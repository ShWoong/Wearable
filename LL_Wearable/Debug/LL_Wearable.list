
LL_Wearable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080090a8  080090a8  000190a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009488  08009488  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009490  08009490  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08009498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000268  08009700  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  08009700  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001142b  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b2  00000000  00000000  00031706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  000340b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c57  00000000  00000000  00035088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f12  00000000  00000000  00035cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141c6  00000000  00000000  0005abf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1611  00000000  00000000  0006edb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054c4  00000000  00000000  001503c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015588c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000268 	.word	0x20000268
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800908c 	.word	0x0800908c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000026c 	.word	0x2000026c
 800020c:	0800908c 	.word	0x0800908c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <_write>:
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <_write+0x24>)
 8000f9a:	f004 fa15 	bl	80053c8 <HAL_UART_Transmit>
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000464 	.word	0x20000464
 8000fac:	00000000 	.word	0x00000000

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 ff43 	bl	8001e40 <HAL_Init>
  //KMF_Init(&kf, 0.0, 1.0, 0.1); // kf ?��?��?��?�� 초기?��
  //HighPassFilter_Init;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f93b 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f000 fb63 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc2:	f000 fb39 	bl	8001638 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 fb0d 	bl	80015e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fca:	f000 f9a5 	bl	8001318 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fce:	f000 fa93 	bl	80014f8 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000fd2:	f000 f9f3 	bl	80013bc <MX_ADC2_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fa43 	bl	8001460 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000fda:	487f      	ldr	r0, [pc, #508]	; (80011d8 <main+0x228>)
 8000fdc:	f003 f9ba 	bl	8004354 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fe0:	487e      	ldr	r0, [pc, #504]	; (80011dc <main+0x22c>)
 8000fe2:	f003 f9b7 	bl	8004354 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adcval1, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	497d      	ldr	r1, [pc, #500]	; (80011e0 <main+0x230>)
 8000fea:	487e      	ldr	r0, [pc, #504]	; (80011e4 <main+0x234>)
 8000fec:	f001 f8ee 	bl	80021cc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adcval2, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	497d      	ldr	r1, [pc, #500]	; (80011e8 <main+0x238>)
 8000ff4:	487d      	ldr	r0, [pc, #500]	; (80011ec <main+0x23c>)
 8000ff6:	f001 f8e9 	bl	80021cc <HAL_ADC_Start_DMA>

  //HAL_ADC_Start_DMA(&hadc2, adcval2, 1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4876      	ldr	r0, [pc, #472]	; (80011d8 <main+0x228>)
 8000ffe:	f003 fa73 	bl	80044e8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adc2Flag == 1){
 8001002:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <main+0x240>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d119      	bne.n	8001040 <main+0x90>
		  adc2Flag = 0;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <main+0x240>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		  stretch_raw = adcval2[0];
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <main+0x238>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <main+0x244>)
 8001018:	6013      	str	r3, [r2, #0]
		  time = time + 0.00001;
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <main+0x248>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fab2 	bl	8000588 <__aeabi_f2d>
 8001024:	a368      	add	r3, pc, #416	; (adr r3, 80011c8 <main+0x218>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f94f 	bl	80002cc <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fdd7 	bl	8000be8 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <main+0x248>)
 800103e:	6013      	str	r3, [r2, #0]
		  //printf("%u\r\n", stretch_raw);
	  }

	  if(stretch_raw >= 2785.776 && cgFlag ==1){
 8001040:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <main+0x244>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f640 22e1 	movw	r2, #2785	; 0xae1
 8001048:	4293      	cmp	r3, r2
 800104a:	d92f      	bls.n	80010ac <main+0xfc>
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <main+0x24c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12a      	bne.n	80010ac <main+0xfc>
	  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2110      	movs	r1, #16
 800105a:	4869      	ldr	r0, [pc, #420]	; (8001200 <main+0x250>)
 800105c:	f002 fab4 	bl	80035c8 <HAL_GPIO_WritePin>
	  			cap = time/R*1000000000000;
 8001060:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <main+0x248>)
 8001062:	edd3 6a00 	vldr	s13, [r3]
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <main+0x254>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001076:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001208 <main+0x258>
 800107a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107e:	4b63      	ldr	r3, [pc, #396]	; (800120c <main+0x25c>)
 8001080:	edc3 7a00 	vstr	s15, [r3]

	  			if(cap<140){
 8001084:	4b61      	ldr	r3, [pc, #388]	; (800120c <main+0x25c>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001210 <main+0x260>
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d502      	bpl.n	800109e <main+0xee>
	  				cap = 140;
 8001098:	4b5c      	ldr	r3, [pc, #368]	; (800120c <main+0x25c>)
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <main+0x264>)
 800109c:	601a      	str	r2, [r3, #0]
	  			}


	  			  capFlag = 1;
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <main+0x268>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
	  			  cgFlag =0;
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <main+0x24c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e011      	b.n	80010d0 <main+0x120>
	  		  }

	  		  else if(stretch_raw <=614.4){
 80010ac:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <main+0x244>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f240 2266 	movw	r2, #614	; 0x266
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d80b      	bhi.n	80010d0 <main+0x120>
	  			  time = 0;
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <main+0x248>)
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
	  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	484e      	ldr	r0, [pc, #312]	; (8001200 <main+0x250>)
 80010c6:	f002 fa7f 	bl	80035c8 <HAL_GPIO_WritePin>
	  			  cgFlag = 1;
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <main+0x24c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
	  		  }

	  if(adc1Flag == 1 && capFlag == 1){
 80010d0:	4b52      	ldr	r3, [pc, #328]	; (800121c <main+0x26c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d193      	bne.n	8001002 <main+0x52>
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <main+0x268>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d18e      	bne.n	8001002 <main+0x52>
		  adc1Flag = 0;
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <main+0x26c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
		  capFlag = 0;
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <main+0x268>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);

		  	emg_raw = adcval1[0];
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <main+0x230>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <main+0x270>)
 80010f6:	6013      	str	r3, [r2, #0]

			float filtered_emg_raw =BWHPF((float)emg_raw, 10);
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <main+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001104:	200a      	movs	r0, #10
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	f004 fd19 	bl	8005b40 <BWHPF>
 800110e:	ed87 0a05 	vstr	s0, [r7, #20]
			float emg_rec = fabs(filtered_emg_raw);
 8001112:	edd7 7a05 	vldr	s15, [r7, #20]
 8001116:	eef0 7ae7 	vabs.f32	s15, s15
 800111a:	edc7 7a04 	vstr	s15, [r7, #16]
			float filtered_emg = BWLPF(emg_rec, 10);
 800111e:	200a      	movs	r0, #10
 8001120:	ed97 0a04 	vldr	s0, [r7, #16]
 8001124:	f004 fe62 	bl	8005dec <BWLPF>
 8001128:	ed87 0a03 	vstr	s0, [r7, #12]

			float neural_activation = NEURAL_ACTIVATION(filtered_emg);
 800112c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001130:	f004 ffb0 	bl	8006094 <NEURAL_ACTIVATION>
 8001134:	ed87 0a02 	vstr	s0, [r7, #8]
			float muscle_activation = MUSCLE_ACTIVATION(neural_activation);
 8001138:	ed97 0a02 	vldr	s0, [r7, #8]
 800113c:	f005 f816 	bl	800616c <MUSCLE_ACTIVATION>
 8001140:	ed87 0a01 	vstr	s0, [r7, #4]

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, muscle_activation);
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <main+0x228>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	edd7 7a01 	vldr	s15, [r7, #4]
 800114c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001150:	ee17 2a90 	vmov	r2, s15
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
			float caplpf = (BWLPF(cap, 20));
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <main+0x25c>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	2014      	movs	r0, #20
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f004 fe43 	bl	8005dec <BWLPF>
 8001166:	ed87 0a00 	vstr	s0, [r7]
			L = (caplpf-140)*0.041379;
 800116a:	edd7 7a00 	vldr	s15, [r7]
 800116e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001210 <main+0x260>
 8001172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001176:	ee17 0a90 	vmov	r0, s15
 800117a:	f7ff fa05 	bl	8000588 <__aeabi_f2d>
 800117e:	a314      	add	r3, pc, #80	; (adr r3, 80011d0 <main+0x220>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa58 	bl	8000638 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd2a 	bl	8000be8 <__aeabi_d2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4a23      	ldr	r2, [pc, #140]	; (8001224 <main+0x274>)
 8001198:	6013      	str	r3, [r2, #0]
		  	//printf("%"PRIu32, emg_raw);
		  	//printf(",");
		  	//printf("%u\r\n", stretch_raw);
			//printf("%f\r\n", st_f);
			//printf("%f\r\n", C);
			printf("%.2f cm", L);
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <main+0x274>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9f2 	bl	8000588 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	481f      	ldr	r0, [pc, #124]	; (8001228 <main+0x278>)
 80011aa:	f005 fd75 	bl	8006c98 <iprintf>
			printf(", ");
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <main+0x27c>)
 80011b0:	f005 fd72 	bl	8006c98 <iprintf>
			printf("%.2f pF\r\n", caplpf);
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <main+0x280>)
 80011c0:	f005 fd6a 	bl	8006c98 <iprintf>
	  if(adc2Flag == 1){
 80011c4:	e71d      	b.n	8001002 <main+0x52>
 80011c6:	bf00      	nop
 80011c8:	88e368f1 	.word	0x88e368f1
 80011cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80011d0:	d77b7c78 	.word	0xd77b7c78
 80011d4:	3fa52fa0 	.word	0x3fa52fa0
 80011d8:	2000041c 	.word	0x2000041c
 80011dc:	200003d4 	.word	0x200003d4
 80011e0:	200004b0 	.word	0x200004b0
 80011e4:	20000284 	.word	0x20000284
 80011e8:	200004b4 	.word	0x200004b4
 80011ec:	200002cc 	.word	0x200002cc
 80011f0:	200004ad 	.word	0x200004ad
 80011f4:	200004bc 	.word	0x200004bc
 80011f8:	200004c0 	.word	0x200004c0
 80011fc:	200004af 	.word	0x200004af
 8001200:	40020800 	.word	0x40020800
 8001204:	20000000 	.word	0x20000000
 8001208:	5368d4a5 	.word	0x5368d4a5
 800120c:	200004c4 	.word	0x200004c4
 8001210:	430c0000 	.word	0x430c0000
 8001214:	430c0000 	.word	0x430c0000
 8001218:	200004ae 	.word	0x200004ae
 800121c:	200004ac 	.word	0x200004ac
 8001220:	200004b8 	.word	0x200004b8
 8001224:	200004c8 	.word	0x200004c8
 8001228:	080090a8 	.word	0x080090a8
 800122c:	080090b0 	.word	0x080090b0
 8001230:	080090b4 	.word	0x080090b4

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2234      	movs	r2, #52	; 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fd7d 	bl	8006d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <SystemClock_Config+0xdc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <SystemClock_Config+0xdc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <SystemClock_Config+0xdc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <SystemClock_Config+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <SystemClock_Config+0xe0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <SystemClock_Config+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a4:	2308      	movs	r3, #8
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a8:	23b4      	movs	r3, #180	; 0xb4
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fd5b 	bl	8003d78 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c8:	f000 fa8c 	bl	80017e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012cc:	f002 f9ba 	bl	8003644 <HAL_PWREx_EnableOverDrive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012d6:	f000 fa85 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2105      	movs	r1, #5
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 f9f3 	bl	80036e4 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001304:	f000 fa6e 	bl	80017e4 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <MX_ADC1_Init+0xa0>)
 800132e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001332:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001336:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001340:	2201      	movs	r2, #1
 8001342:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001346:	2200      	movs	r2, #0
 8001348:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800135c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800136a:	2201      	movs	r2, #1
 800136c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_ADC1_Init+0x9c>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800137e:	f000 fdd1 	bl	8001f24 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001388:	f000 fa2c 	bl	80017e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800138c:	230d      	movs	r3, #13
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001394:	2307      	movs	r3, #7
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800139e:	f001 f843 	bl	8002428 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 fa1c 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000284 	.word	0x20000284
 80013b8:	40012000 	.word	0x40012000

080013bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <MX_ADC2_Init+0xa0>)
 80013d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_ADC2_Init+0x9c>)
 8001400:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_ADC2_Init+0x9c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_ADC2_Init+0x9c>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_ADC2_Init+0x9c>)
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_ADC2_Init+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_ADC2_Init+0x9c>)
 8001422:	f000 fd7f 	bl	8001f24 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800142c:	f000 f9da 	bl	80017e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001430:	230c      	movs	r3, #12
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001438:	2307      	movs	r3, #7
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_ADC2_Init+0x9c>)
 8001442:	f000 fff1 	bl	8002428 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800144c:	f000 f9ca 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200002cc 	.word	0x200002cc
 800145c:	40012100 	.word	0x40012100

08001460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM2_Init+0x94>)
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 449;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM2_Init+0x94>)
 8001486:	f240 12c1 	movw	r2, #449	; 0x1c1
 800148a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_TIM2_Init+0x94>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM2_Init+0x94>)
 8001494:	2201      	movs	r2, #1
 8001496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM2_Init+0x94>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_TIM2_Init+0x94>)
 80014a6:	f002 ff05 	bl	80042b4 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014b0:	f000 f998 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_TIM2_Init+0x94>)
 80014c2:	f003 fa8b 	bl	80049dc <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014cc:	f000 f98a 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014d0:	2320      	movs	r3, #32
 80014d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM2_Init+0x94>)
 80014de:	f003 fe93 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014e8:	f000 f97c 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200003d4 	.word	0x200003d4

080014f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_TIM3_Init+0xe4>)
 800152a:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <MX_TIM3_Init+0xe8>)
 800152c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_TIM3_Init+0xe4>)
 8001530:	f240 3283 	movw	r2, #899	; 0x383
 8001534:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_TIM3_Init+0xe4>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <MX_TIM3_Init+0xe4>)
 800153e:	2263      	movs	r2, #99	; 0x63
 8001540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_TIM3_Init+0xe4>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_TIM3_Init+0xe4>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <MX_TIM3_Init+0xe4>)
 8001550:	f002 feb0 	bl	80042b4 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800155a:	f000 f943 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001568:	4619      	mov	r1, r3
 800156a:	481c      	ldr	r0, [pc, #112]	; (80015dc <MX_TIM3_Init+0xe4>)
 800156c:	f003 fa36 	bl	80049dc <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001576:	f000 f935 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <MX_TIM3_Init+0xe4>)
 800157c:	f002 ff5a 	bl	8004434 <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001586:	f000 f92d 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800158a:	2320      	movs	r3, #32
 800158c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	4619      	mov	r1, r3
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <MX_TIM3_Init+0xe4>)
 800159a:	f003 fe35 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015a4:	f000 f91e 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM3_Init+0xe4>)
 80015c0:	f003 f94a 	bl	8004858 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ca:	f000 f90b 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM3_Init+0xe4>)
 80015d0:	f000 fa66 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	; 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000041c 	.word	0x2000041c
 80015e0:	40000400 	.word	0x40000400

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f003 fe84 	bl	8005328 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f8dd 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000464 	.word	0x20000464
 8001634:	40004400 	.word	0x40004400

08001638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_DMA_Init+0x4c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <MX_DMA_Init+0x4c>)
 8001648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_DMA_Init+0x4c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2038      	movs	r0, #56	; 0x38
 8001660:	f001 fa77 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001664:	2038      	movs	r0, #56	; 0x38
 8001666:	f001 fa90 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	203a      	movs	r0, #58	; 0x3a
 8001670:	f001 fa6f 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001674:	203a      	movs	r0, #58	; 0x3a
 8001676:	f001 fa88 	bl	8002b8a <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <MX_GPIO_Init+0x108>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <MX_GPIO_Init+0x108>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <MX_GPIO_Init+0x108>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <MX_GPIO_Init+0x108>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <MX_GPIO_Init+0x108>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <MX_GPIO_Init+0x108>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_GPIO_Init+0x108>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MX_GPIO_Init+0x108>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_GPIO_Init+0x108>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <MX_GPIO_Init+0x108>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a25      	ldr	r2, [pc, #148]	; (8001790 <MX_GPIO_Init+0x108>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <MX_GPIO_Init+0x108>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2120      	movs	r1, #32
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <MX_GPIO_Init+0x10c>)
 8001714:	f001 ff58 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cg_GPIO_Port, Cg_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2110      	movs	r1, #16
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <MX_GPIO_Init+0x110>)
 800171e:	f001 ff53 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8001722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <MX_GPIO_Init+0x110>)
 800173a:	f001 fdb1 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <MX_GPIO_Init+0x10c>)
 8001756:	f001 fda3 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cg_Pin */
  GPIO_InitStruct.Pin = Cg_Pin;
 800175a:	2310      	movs	r3, #16
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Cg_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <MX_GPIO_Init+0x110>)
 8001772:	f001 fd95 	bl	80032a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2028      	movs	r0, #40	; 0x28
 800177c:	f001 f9e9 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001780:	2028      	movs	r0, #40	; 0x28
 8001782:	f001 fa02 	bl	8002b8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020800 	.word	0x40020800

0800179c <HAL_ADC_ConvCpltCallback>:
/*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance==TIM3){
		Tim3Flag = 1;
	}
}*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x38>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d103      	bne.n	80017b6 <HAL_ADC_ConvCpltCallback+0x1a>
		adc1Flag = 1;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
	    }
	else if (hadc->Instance == ADC2){
		adc2Flag = 1;
		}
}
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_ConvCpltCallback+0x2a>
	else if (hadc->Instance == ADC2){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_ADC_ConvCpltCallback+0x40>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d102      	bne.n	80017c6 <HAL_ADC_ConvCpltCallback+0x2a>
		adc2Flag = 1;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x44>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40012000 	.word	0x40012000
 80017d8:	200004ac 	.word	0x200004ac
 80017dc:	40012100 	.word	0x40012100
 80017e0:	200004ad 	.word	0x200004ad

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f001 f984 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_ADC_MspInit+0x1b8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d160      	bne.n	8001924 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a64      	ldr	r2, [pc, #400]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189a:	2308      	movs	r3, #8
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4854      	ldr	r0, [pc, #336]	; (8001a00 <HAL_ADC_MspInit+0x1c0>)
 80018ae:	f001 fcf7 	bl	80032a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018b4:	4a54      	ldr	r2, [pc, #336]	; (8001a08 <HAL_ADC_MspInit+0x1c8>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018b8:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f0:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f6:	4843      	ldr	r0, [pc, #268]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 80018f8:	f001 f962 	bl	8002bc0 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001902:	f7ff ff6f 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
 800190c:	4a3d      	ldr	r2, [pc, #244]	; (8001a04 <HAL_ADC_MspInit+0x1c4>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2012      	movs	r0, #18
 8001918:	f001 f91b 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800191c:	2012      	movs	r0, #18
 800191e:	f001 f934 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001922:	e065      	b.n	80019f0 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_ADC_MspInit+0x1cc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d160      	bne.n	80019f0 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_ADC_MspInit+0x1bc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001966:	2304      	movs	r3, #4
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <HAL_ADC_MspInit+0x1c0>)
 800197a:	f001 fc91 	bl	80032a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 8001980:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <HAL_ADC_MspInit+0x1d4>)
 8001982:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 800199a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ae:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80019c4:	4812      	ldr	r0, [pc, #72]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019c6:	f001 f8fb 	bl	8002bc0 <HAL_DMA_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 80019d0:	f7ff ff08 	bl	80017e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_ADC_MspInit+0x1d0>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2012      	movs	r0, #18
 80019e6:	f001 f8b4 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019ea:	2012      	movs	r0, #18
 80019ec:	f001 f8cd 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800
 8001a04:	20000314 	.word	0x20000314
 8001a08:	40026410 	.word	0x40026410
 8001a0c:	40012100 	.word	0x40012100
 8001a10:	20000374 	.word	0x20000374
 8001a14:	40026440 	.word	0x40026440

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d116      	bne.n	8001a58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f001 f881 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a50:	201c      	movs	r0, #28
 8001a52:	f001 f89a 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a56:	e01a      	b.n	8001a8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_TIM_Base_MspInit+0x84>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d115      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x80>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201d      	movs	r0, #29
 8001a84:	f001 f865 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a88:	201d      	movs	r0, #29
 8001a8a:	f001 f87e 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11d      	bne.n	8001afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001afa:	f001 fbd1 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_UART_MspInit+0x84>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12b      	bne.n	8001b8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_UART_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_UART_MspInit+0x8c>)
 8001b8a:	f001 fb89 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f978 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <ADC_IRQHandler+0x14>)
 8001bfe:	f000 f9d4 	bl	8001faa <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <ADC_IRQHandler+0x18>)
 8001c04:	f000 f9d1 	bl	8001faa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000284 	.word	0x20000284
 8001c10:	200002cc 	.word	0x200002cc

08001c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM2_IRQHandler+0x10>)
 8001c1a:	f002 fd2d 	bl	8004678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200003d4 	.word	0x200003d4

08001c28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM3_IRQHandler+0x10>)
 8001c2e:	f002 fd23 	bl	8004678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000041c 	.word	0x2000041c

08001c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 8001c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c44:	f001 fcda 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream0_IRQHandler+0x10>)
 8001c52:	f001 f8bb 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000314 	.word	0x20000314

08001c60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA2_Stream2_IRQHandler+0x10>)
 8001c66:	f001 f8b1 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000374 	.word	0x20000374

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f005 f8ab 	bl	8006de8 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
  }

  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f005 f82c 	bl	8006de8 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	200004cc 	.word	0x200004cc
 8001dc4:	200006b0 	.word	0x200006b0

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0xe>
 8001df0:	f7ff ffea 	bl	8001dc8 <SystemInit>
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <LoopFillZerobss+0x12>)
 8001df6:	490d      	ldr	r1, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <LoopFillZerobss+0x1a>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:
 8001dfe:	58d4      	ldr	r4, [r2, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:
 8001e04:	18c4      	adds	r4, r0, r3
 8001e06:	428c      	cmp	r4, r1
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x1e>)
 8001e0c:	4c0a      	ldr	r4, [pc, #40]	; (8001e38 <LoopFillZerobss+0x22>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:
 8001e16:	42a2      	cmp	r2, r4
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>
 8001e1a:	f004 ffeb 	bl	8006df4 <__libc_init_array>
 8001e1e:	f7ff f8c7 	bl	8000fb0 <main>
 8001e22:	4770      	bx	lr
 8001e24:	20020000 	.word	0x20020000
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000268 	.word	0x20000268
 8001e30:	08009498 	.word	0x08009498
 8001e34:	20000268 	.word	0x20000268
 8001e38:	200006ac 	.word	0x200006ac

08001e3c <CAN1_RX0_IRQHandler>:
 8001e3c:	e7fe      	b.n	8001e3c <CAN1_RX0_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 fe67 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fcbc 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fe7f 	bl	8002ba6 <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 fe47 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	200004d0 	.word	0x200004d0

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200004d0 	.word	0x200004d0

08001f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e033      	b.n	8001fa2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fc7c 	bl	8001840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fb88 	bl	800268c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
 8001f92:	e001      	b.n	8001f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d049      	beq.n	8002074 <HAL_ADC_IRQHandler+0xca>
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d046      	beq.n	8002074 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d12b      	bne.n	8002064 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d127      	bne.n	8002064 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800202c:	2b00      	cmp	r3, #0
 800202e:	d119      	bne.n	8002064 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0220 	bic.w	r2, r2, #32
 800203e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fb99 	bl	800179c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0212 	mvn.w	r2, #18
 8002072:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d057      	beq.n	800213a <HAL_ADC_IRQHandler+0x190>
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d054      	beq.n	800213a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d139      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d12b      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d124      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11d      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fc2c 	bl	8002988 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 020c 	mvn.w	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <HAL_ADC_IRQHandler+0x1d6>
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d014      	beq.n	8002180 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10d      	bne.n	8002180 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f945 	bl	8002400 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0201 	mvn.w	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x218>
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f043 0202 	orr.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0220 	mvn.w	r2, #32
 80021b0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f92e 	bl	8002414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0220 	mvn.w	r2, #32
 80021c0:	601a      	str	r2, [r3, #0]
  }
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_Start_DMA+0x1e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0e9      	b.n	80023be <HAL_ADC_Start_DMA+0x1f2>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d018      	beq.n	8002232 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002210:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_ADC_Start_DMA+0x1fc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6d      	ldr	r2, [pc, #436]	; (80023cc <HAL_ADC_Start_DMA+0x200>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9a      	lsrs	r2, r3, #18
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002224:	e002      	b.n	800222c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3b01      	subs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002240:	d107      	bne.n	8002252 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002250:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	f040 80a1 	bne.w	80023a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800228c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f023 0206 	bic.w	r2, r3, #6
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
 80022ae:	e002      	b.n	80022b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_ADC_Start_DMA+0x204>)
 80022c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a43      	ldr	r2, [pc, #268]	; (80023d4 <HAL_ADC_Start_DMA+0x208>)
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	4a42      	ldr	r2, [pc, #264]	; (80023d8 <HAL_ADC_Start_DMA+0x20c>)
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	4a41      	ldr	r2, [pc, #260]	; (80023dc <HAL_ADC_Start_DMA+0x210>)
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002302:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	4619      	mov	r1, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f000 fd02 	bl	8002d1c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2b00      	cmp	r3, #0
 8002322:	d12a      	bne.n	800237a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_ADC_Start_DMA+0x214>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d015      	beq.n	800235a <HAL_ADC_Start_DMA+0x18e>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <HAL_ADC_Start_DMA+0x218>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d105      	bne.n	8002344 <HAL_ADC_Start_DMA+0x178>
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_ADC_Start_DMA+0x204>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_ADC_Start_DMA+0x21c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d136      	bne.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_ADC_Start_DMA+0x204>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d130      	bne.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d129      	bne.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e020      	b.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_ADC_Start_DMA+0x214>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d11b      	bne.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d114      	bne.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	e00b      	b.n	80023bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000004 	.word	0x20000004
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	40012300 	.word	0x40012300
 80023d4:	08002885 	.word	0x08002885
 80023d8:	0800293f 	.word	0x0800293f
 80023dc:	0800295b 	.word	0x0800295b
 80023e0:	40012000 	.word	0x40012000
 80023e4:	40012100 	.word	0x40012100
 80023e8:	40012200 	.word	0x40012200

080023ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e113      	b.n	800266c <HAL_ADC_ConfigChannel+0x244>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d925      	bls.n	80024a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	2207      	movs	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68d9      	ldr	r1, [r3, #12]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	4603      	mov	r3, r0
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4403      	add	r3, r0
 8002492:	3b1e      	subs	r3, #30
 8002494:	409a      	lsls	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	e022      	b.n	80024e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	2207      	movs	r2, #7
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6919      	ldr	r1, [r3, #16]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4403      	add	r3, r0
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d824      	bhi.n	8002538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b05      	subs	r3, #5
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	400a      	ands	r2, r1
 800250e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b05      	subs	r3, #5
 800252a:	fa00 f203 	lsl.w	r2, r0, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
 8002536:	e04c      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d824      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b23      	subs	r3, #35	; 0x23
 8002552:	221f      	movs	r2, #31
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43da      	mvns	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	400a      	ands	r2, r1
 8002560:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b23      	subs	r3, #35	; 0x23
 800257c:	fa00 f203 	lsl.w	r2, r0, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
 8002588:	e023      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b41      	subs	r3, #65	; 0x41
 800259c:	221f      	movs	r2, #31
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b41      	subs	r3, #65	; 0x41
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_ADC_ConfigChannel+0x250>)
 80025d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_ADC_ConfigChannel+0x254>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10f      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1d8>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d10b      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_ADC_ConfigChannel+0x254>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12b      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_ADC_ConfigChannel+0x258>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <HAL_ADC_ConfigChannel+0x1f4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b11      	cmp	r3, #17
 800261a:	d122      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_ADC_ConfigChannel+0x258>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d111      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_ADC_ConfigChannel+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_ADC_ConfigChannel+0x260>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9a      	lsrs	r2, r3, #18
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002654:	e002      	b.n	800265c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3b01      	subs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40012300 	.word	0x40012300
 800267c:	40012000 	.word	0x40012000
 8002680:	10000012 	.word	0x10000012
 8002684:	20000004 	.word	0x20000004
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <ADC_Init+0x1f0>)
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <ADC_Init+0x1f4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e00f      	b.n	800278a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002788:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0202 	bic.w	r2, r2, #2
 8002798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7e1b      	ldrb	r3, [r3, #24]
 80027a4:	005a      	lsls	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	3b01      	subs	r3, #1
 80027e4:	035a      	lsls	r2, r3, #13
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e007      	b.n	8002800 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	3b01      	subs	r3, #1
 800281c:	051a      	lsls	r2, r3, #20
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002842:	025a      	lsls	r2, r3, #9
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	029a      	lsls	r2, r3, #10
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012300 	.word	0x40012300
 8002880:	0f000001 	.word	0x0f000001

08002884 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d13c      	bne.n	8002918 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12b      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d127      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d119      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0220 	bic.w	r2, r2, #32
 80028ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fe ff43 	bl	800179c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002916:	e00e      	b.n	8002936 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fd75 	bl	8002414 <HAL_ADC_ErrorCallback>
}
 800292a:	e004      	b.n	8002936 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fd4d 	bl	80023ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fd4a 	bl	8002414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff8e 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff29 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff3e 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff8e 	bl	8002a90 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5d 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff31 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff f99e 	bl	8001f0c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e099      	b.n	8002d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfc:	e00f      	b.n	8002c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bfe:	f7ff f985 	bl	8001f0c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d908      	bls.n	8002c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e078      	b.n	8002d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e8      	bne.n	8002bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <HAL_DMA_Init+0x158>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4313      	orrs	r3, r2
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d117      	bne.n	8002ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa6f 	bl	80031a8 <DMA_CheckFifoParam>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e016      	b.n	8002d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa26 	bl	800313c <DMA_CalcBaseAndBitshift>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	223f      	movs	r2, #63	; 0x3f
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	f010803f 	.word	0xf010803f

08002d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_DMA_Start_IT+0x26>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e040      	b.n	8002dc4 <HAL_DMA_Start_IT+0xa8>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d12f      	bne.n	8002db6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f9b8 	bl	80030e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	409a      	lsls	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0216 	orr.w	r2, r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e005      	b.n	8002dc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_DMA_IRQHandler+0x248>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8e      	ldr	r2, [pc, #568]	; (8003018 <HAL_DMA_IRQHandler+0x24c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2208      	movs	r2, #8
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e01f      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e016      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2220      	movs	r2, #32
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808f 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d136      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0216 	bic.w	r2, r2, #22
 8002f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x1da>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	223f      	movs	r2, #63	; 0x3f
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d07e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
        }
        return;
 8002fe2:	e079      	b.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d031      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e02c      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
 8003012:	bf00      	nop
 8003014:	20000004 	.word	0x20000004
 8003018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <HAL_DMA_IRQHandler+0x2cc>
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d8:	bf00      	nop
    }
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d108      	bne.n	8003120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800311e:	e007      	b.n	8003130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3b10      	subs	r3, #16
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <DMA_CalcBaseAndBitshift+0x64>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d909      	bls.n	800317e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58
 800317c:	e007      	b.n	800318e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	080090d8 	.word	0x080090d8

080031a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d856      	bhi.n	8003276 <DMA_CheckFifoParam+0xce>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <DMA_CheckFifoParam+0x28>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	080031e1 	.word	0x080031e1
 80031dc:	08003277 	.word	0x08003277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d046      	beq.n	800327a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e043      	b.n	800327a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031fa:	d140      	bne.n	800327e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e03d      	b.n	800327e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d121      	bne.n	8003250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d837      	bhi.n	8003282 <DMA_CheckFifoParam+0xda>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <DMA_CheckFifoParam+0x70>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	0800322f 	.word	0x0800322f
 8003220:	08003229 	.word	0x08003229
 8003224:	08003241 	.word	0x08003241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e030      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323e:	e022      	b.n	8003286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003248:	d11f      	bne.n	800328a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800324e:	e01c      	b.n	800328a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d903      	bls.n	800325e <DMA_CheckFifoParam+0xb6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800325c:	e018      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e015      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      break;
 8003274:	e00b      	b.n	800328e <DMA_CheckFifoParam+0xe6>
      break;
 8003276:	bf00      	nop
 8003278:	e00a      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e008      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e006      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;   
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
    }
  } 
  
  return status; 
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e165      	b.n	8003588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 8154 	bne.w	8003582 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d005      	beq.n	80032f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d130      	bne.n	8003354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 0201 	and.w	r2, r3, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d017      	beq.n	8003390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d123      	bne.n	80033e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80ae 	beq.w	8003582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_GPIO_Init+0x300>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_GPIO_Init+0x300>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <HAL_GPIO_Init+0x300>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003442:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_GPIO_Init+0x304>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4f      	ldr	r2, [pc, #316]	; (80035a8 <HAL_GPIO_Init+0x308>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d025      	beq.n	80034ba <HAL_GPIO_Init+0x21a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <HAL_GPIO_Init+0x30c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01f      	beq.n	80034b6 <HAL_GPIO_Init+0x216>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <HAL_GPIO_Init+0x310>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d019      	beq.n	80034b2 <HAL_GPIO_Init+0x212>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4c      	ldr	r2, [pc, #304]	; (80035b4 <HAL_GPIO_Init+0x314>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_GPIO_Init+0x20e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_GPIO_Init+0x318>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_GPIO_Init+0x20a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <HAL_GPIO_Init+0x31c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <HAL_GPIO_Init+0x206>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a49      	ldr	r2, [pc, #292]	; (80035c0 <HAL_GPIO_Init+0x320>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_GPIO_Init+0x202>
 800349e:	2306      	movs	r3, #6
 80034a0:	e00c      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034a2:	2307      	movs	r3, #7
 80034a4:	e00a      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034a6:	2305      	movs	r3, #5
 80034a8:	e008      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034ae:	2303      	movs	r3, #3
 80034b0:	e004      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_GPIO_Init+0x21c>
 80034ba:	2300      	movs	r3, #0
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f002 0203 	and.w	r2, r2, #3
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	4093      	lsls	r3, r2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034cc:	4935      	ldr	r1, [pc, #212]	; (80035a4 <HAL_GPIO_Init+0x304>)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_GPIO_Init+0x324>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_GPIO_Init+0x324>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_GPIO_Init+0x324>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357c:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_GPIO_Init+0x324>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3301      	adds	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	f67f ae96 	bls.w	80032bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40021400 	.word	0x40021400
 80035c0:	40021800 	.word	0x40021800
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f806 	bl	800362c <HAL_GPIO_EXTI_Callback>
  }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003670:	f7fe fc4c 	bl	8001f0c <HAL_GetTick>
 8003674:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003676:	e009      	b.n	800368c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003678:	f7fe fc48 	bl	8001f0c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003686:	d901      	bls.n	800368c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e01f      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_PWREx_EnableOverDrive+0x98>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d1ee      	bne.n	8003678 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7fe fc34 	bl	8001f0c <HAL_GetTick>
 80036a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036a6:	e009      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a8:	f7fe fc30 	bl	8001f0c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b6:	d901      	bls.n	80036bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e007      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_PWREx_EnableOverDrive+0x98>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c8:	d1ee      	bne.n	80036a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	420e0040 	.word	0x420e0040
 80036dc:	40007000 	.word	0x40007000
 80036e0:	420e0044 	.word	0x420e0044

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0cc      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d90c      	bls.n	8003720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800375a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d044      	beq.n	8003804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e06f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e067      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4934      	ldr	r1, [pc, #208]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fb9a 	bl	8001f0c <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fb96 	bl	8001f0c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d20c      	bcs.n	800382c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f855 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fafa 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	080090c0 	.word	0x080090c0
 80038a8:	20000004 	.word	0x20000004
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	080090d0 	.word	0x080090d0

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	080090d0 	.word	0x080090d0

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0ae      	sub	sp, #184	; 0xb8
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393e:	4bcb      	ldr	r3, [pc, #812]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b0c      	cmp	r3, #12
 8003948:	f200 8206 	bhi.w	8003d58 <HAL_RCC_GetSysClockFreq+0x440>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	08003d59 	.word	0x08003d59
 800395c:	08003d59 	.word	0x08003d59
 8003960:	08003d59 	.word	0x08003d59
 8003964:	08003991 	.word	0x08003991
 8003968:	08003d59 	.word	0x08003d59
 800396c:	08003d59 	.word	0x08003d59
 8003970:	08003d59 	.word	0x08003d59
 8003974:	08003999 	.word	0x08003999
 8003978:	08003d59 	.word	0x08003d59
 800397c:	08003d59 	.word	0x08003d59
 8003980:	08003d59 	.word	0x08003d59
 8003984:	08003b89 	.word	0x08003b89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4bb9      	ldr	r3, [pc, #740]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x358>)
 800398a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800398e:	e1e7      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003990:	4bb8      	ldr	r3, [pc, #736]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003996:	e1e3      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4bb4      	ldr	r3, [pc, #720]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a4:	4bb1      	ldr	r3, [pc, #708]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d071      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4bae      	ldr	r3, [pc, #696]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4621      	mov	r1, r4
 80039f0:	1a51      	subs	r1, r2, r1
 80039f2:	6439      	str	r1, [r7, #64]	; 0x40
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a08:	4649      	mov	r1, r9
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a12:	4641      	mov	r1, r8
 8003a14:	018a      	lsls	r2, r1, #6
 8003a16:	4641      	mov	r1, r8
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a30:	4649      	mov	r1, r9
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4641      	mov	r1, r8
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4622      	mov	r2, r4
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a60:	4629      	mov	r1, r5
 8003a62:	024b      	lsls	r3, r1, #9
 8003a64:	4621      	mov	r1, r4
 8003a66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	024a      	lsls	r2, r1, #9
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a84:	f7fd f900 	bl	8000c88 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a92:	e067      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a94:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aae:	2300      	movs	r3, #0
 8003ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ab2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac8:	0150      	lsls	r0, r2, #5
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4621      	mov	r1, r4
 8003ad0:	1a51      	subs	r1, r2, r1
 8003ad2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ae8:	4649      	mov	r1, r9
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af2:	4641      	mov	r1, r8
 8003af4:	018a      	lsls	r2, r1, #6
 8003af6:	4641      	mov	r1, r8
 8003af8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003afc:	4649      	mov	r1, r9
 8003afe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b16:	4692      	mov	sl, r2
 8003b18:	469b      	mov	fp, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb1a 0303 	adds.w	r3, sl, r3
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	462b      	mov	r3, r5
 8003b24:	eb4b 0303 	adc.w	r3, fp, r3
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b50:	677a      	str	r2, [r7, #116]	; 0x74
 8003b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b56:	f7fd f897 	bl	8000c88 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b64:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b86:	e0eb      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d06b      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0159      	lsls	r1, r3, #5
 8003bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bce:	0150      	lsls	r0, r2, #5
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	1a51      	subs	r1, r2, r1
 8003bd8:	61b9      	str	r1, [r7, #24]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bee:	4659      	mov	r1, fp
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	018a      	lsls	r2, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ebb2 0801 	subs.w	r8, r2, r1
 8003c02:	4659      	mov	r1, fp
 8003c04:	eb63 0901 	sbc.w	r9, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	4699      	mov	r9, r3
 8003c20:	4623      	mov	r3, r4
 8003c22:	eb18 0303 	adds.w	r3, r8, r3
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	024b      	lsls	r3, r1, #9
 8003c40:	4621      	mov	r1, r4
 8003c42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c46:	4621      	mov	r1, r4
 8003c48:	024a      	lsls	r2, r1, #9
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c52:	2200      	movs	r2, #0
 8003c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c5c:	f7fd f814 	bl	8000c88 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6a:	e065      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x420>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	4611      	mov	r1, r2
 8003c84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c88:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c92:	4642      	mov	r2, r8
 8003c94:	464b      	mov	r3, r9
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4641      	mov	r1, r8
 8003cac:	1a51      	subs	r1, r2, r1
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	018b      	lsls	r3, r1, #6
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cce:	4651      	mov	r1, sl
 8003cd0:	018a      	lsls	r2, r1, #6
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	1a54      	subs	r4, r2, r1
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	eb63 0501 	sbc.w	r5, r3, r1
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	00eb      	lsls	r3, r5, #3
 8003ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cea:	00e2      	lsls	r2, r4, #3
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	18e3      	adds	r3, r4, r3
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	028b      	lsls	r3, r1, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d14:	4621      	mov	r1, r4
 8003d16:	028a      	lsls	r2, r1, #10
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d20:	2200      	movs	r2, #0
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d2a:	f7fc ffad 	bl	8000c88 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4613      	mov	r3, r2
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0f1b      	lsrs	r3, r3, #28
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	37b8      	adds	r7, #184	; 0xb8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400

08003d78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e28d      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8083 	beq.w	8003e9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d98:	4b94      	ldr	r3, [pc, #592]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d019      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003da4:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db0:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d112      	bne.n	8003df0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x124>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d157      	bne.n	8003e9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e25a      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x90>
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xcc>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xb4>
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xcc>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe f85e 	bl	8001f0c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe f85a 	bl	8001f0c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e21f      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xdc>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe f84a 	bl	8001f0c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fe f846 	bl	8001f0c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e20b      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x104>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d06f      	beq.n	8003f8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d105      	bne.n	8003ece <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b44      	ldr	r3, [pc, #272]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x186>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1d3      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e03a      	b.n	8003f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_RCC_OscConfig+0x278>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f22:	f7fd fff3 	bl	8001f0c <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fd ffef 	bl	8001f0c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1b4      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4925      	ldr	r1, [pc, #148]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x278>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd ffd2 	bl	8001f0c <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd ffce 	bl	8001f0c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e193      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d036      	beq.n	8004004 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd ffb2 	bl	8001f0c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fd ffae 	bl	8001f0c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e173      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x234>
 8003fca:	e01b      	b.n	8004004 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd ff9b 	bl	8001f0c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	e00e      	b.n	8003ff8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd ff97 	bl	8001f0c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d907      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e15c      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470000 	.word	0x42470000
 8003ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	4b8a      	ldr	r3, [pc, #552]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ea      	bne.n	8003fda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8097 	beq.w	8004140 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b83      	ldr	r3, [pc, #524]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b7f      	ldr	r3, [pc, #508]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a7e      	ldr	r2, [pc, #504]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b7c      	ldr	r3, [pc, #496]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b79      	ldr	r3, [pc, #484]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d118      	bne.n	8004080 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a75      	ldr	r2, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fd ff57 	bl	8001f0c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fd ff53 	bl	8001f0c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e118      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x31e>
 8004088:	4b66      	ldr	r3, [pc, #408]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	e01c      	b.n	80040d0 <HAL_RCC_OscConfig+0x358>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x340>
 800409e:	4b61      	ldr	r3, [pc, #388]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a60      	ldr	r2, [pc, #384]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70
 80040aa:	4b5e      	ldr	r3, [pc, #376]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a5d      	ldr	r2, [pc, #372]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x358>
 80040b8:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a59      	ldr	r2, [pc, #356]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a56      	ldr	r2, [pc, #344]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd ff18 	bl	8001f0c <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fd ff14 	bl	8001f0c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e0d7      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ee      	beq.n	80040e0 <HAL_RCC_OscConfig+0x368>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd ff02 	bl	8001f0c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd fefe 	bl	8001f0c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0c1      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ee      	bne.n	800410c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d105      	bne.n	8004140 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80ad 	beq.w	80042a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b08      	cmp	r3, #8
 8004154:	d060      	beq.n	8004218 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d145      	bne.n	80041ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd fed2 	bl	8001f0c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fece 	bl	8001f0c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e093      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	3b01      	subs	r3, #1
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	491b      	ldr	r1, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fea3 	bl	8001f0c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd fe9f 	bl	8001f0c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e064      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x452>
 80041e8:	e05c      	b.n	80042a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fe8c 	bl	8001f0c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fe88 	bl	8001f0c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04d      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x480>
 8004216:	e045      	b.n	80042a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e040      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
 8004224:	40023800 	.word	0x40023800
 8004228:	40007000 	.word	0x40007000
 800422c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004230:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <HAL_RCC_OscConfig+0x538>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d030      	beq.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d129      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d122      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004268:	4293      	cmp	r3, r2
 800426a:	d119      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	3b01      	subs	r3, #1
 800427a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d10f      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e041      	b.n	800434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd fb9c 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 fc6c 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d001      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e04e      	b.n	800440a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_TIM_Base_Start_IT+0xc4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d01d      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_TIM_Base_Start_IT+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_TIM_Base_Start_IT+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIM_Base_Start_IT+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <HAL_TIM_Base_Start_IT+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_TIM_Base_Start_IT+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40010400 	.word	0x40010400
 800442c:	40014000 	.word	0x40014000
 8004430:	40001800 	.word	0x40001800

08004434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e041      	b.n	80044ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f839 	bl	80044d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fbac 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_TIM_PWM_Start+0x24>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e022      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d109      	bne.n	8004526 <HAL_TIM_PWM_Start+0x3e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e015      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d109      	bne.n	8004540 <HAL_TIM_PWM_Start+0x58>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e008      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07c      	b.n	8004654 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0x82>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	e013      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d104      	bne.n	800457a <HAL_TIM_PWM_Start+0x92>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	e00b      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004588:	e003      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fe0e 	bl	80051bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_TIM_PWM_Start+0x174>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_PWM_Start+0xcc>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <HAL_TIM_PWM_Start+0x178>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_PWM_Start+0xd0>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_TIM_PWM_Start+0xd2>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_TIM_PWM_Start+0x174>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_TIM_PWM_Start+0x17c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_TIM_PWM_Start+0x180>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_TIM_PWM_Start+0x184>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_PWM_Start+0x178>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_PWM_Start+0x188>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a16      	ldr	r2, [pc, #88]	; (8004674 <HAL_TIM_PWM_Start+0x18c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d010      	beq.n	8004652 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	e007      	b.n	8004652 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40001800 	.word	0x40001800

08004678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0202 	mvn.w	r2, #2
 80046ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa65 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa57 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa68 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d020      	beq.n	8004728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0204 	mvn.w	r2, #4
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa3f 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa31 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa42 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0208 	mvn.w	r2, #8
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa19 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa0b 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa1c 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d020      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0210 	mvn.w	r2, #16
 8004790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2208      	movs	r2, #8
 8004796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9f3 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9e5 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9f6 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0201 	mvn.w	r2, #1
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9c3 	bl	8004b6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fd86 	bl	8005314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9c7 	bl	8004bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0220 	mvn.w	r2, #32
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fd58 	bl	8005300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e0ae      	b.n	80049d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	f200 809f 	bhi.w	80049c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080049c5 	.word	0x080049c5
 8004894:	080049c5 	.word	0x080049c5
 8004898:	080049c5 	.word	0x080049c5
 800489c:	08004901 	.word	0x08004901
 80048a0:	080049c5 	.word	0x080049c5
 80048a4:	080049c5 	.word	0x080049c5
 80048a8:	080049c5 	.word	0x080049c5
 80048ac:	08004943 	.word	0x08004943
 80048b0:	080049c5 	.word	0x080049c5
 80048b4:	080049c5 	.word	0x080049c5
 80048b8:	080049c5 	.word	0x080049c5
 80048bc:	08004983 	.word	0x08004983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa2e 	bl	8004d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0208 	orr.w	r2, r2, #8
 80048da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0204 	bic.w	r2, r2, #4
 80048ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	619a      	str	r2, [r3, #24]
      break;
 80048fe:	e064      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fa7e 	bl	8004e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6999      	ldr	r1, [r3, #24]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	619a      	str	r2, [r3, #24]
      break;
 8004940:	e043      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fad3 	bl	8004ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0208 	orr.w	r2, r2, #8
 800495c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0204 	bic.w	r2, r2, #4
 800496c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69d9      	ldr	r1, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	61da      	str	r2, [r3, #28]
      break;
 8004980:	e023      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fb27 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69d9      	ldr	r1, [r3, #28]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	021a      	lsls	r2, r3, #8
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	61da      	str	r2, [r3, #28]
      break;
 80049c2:	e002      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      break;
 80049c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0b4      	b.n	8004b62 <HAL_TIM_ConfigClockSource+0x186>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a30:	d03e      	beq.n	8004ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a36:	f200 8087 	bhi.w	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	f000 8086 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x172>
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	d87f      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b70      	cmp	r3, #112	; 0x70
 8004a4a:	d01a      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0xa6>
 8004a4c:	2b70      	cmp	r3, #112	; 0x70
 8004a4e:	d87b      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d050      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a54:	2b60      	cmp	r3, #96	; 0x60
 8004a56:	d877      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b50      	cmp	r3, #80	; 0x50
 8004a5a:	d03c      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a5c:	2b50      	cmp	r3, #80	; 0x50
 8004a5e:	d873      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d058      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x13a>
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d86f      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d064      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d86b      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d060      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d867      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d05c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d05a      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a80:	e062      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	f000 fb73 	bl	800517c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	609a      	str	r2, [r3, #8]
      break;
 8004aae:	e04f      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	f000 fb5c 	bl	800517c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad2:	609a      	str	r2, [r3, #8]
      break;
 8004ad4:	e03c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 fad0 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2150      	movs	r1, #80	; 0x50
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb29 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004af4:	e02c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 faef 	bl	80050e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2160      	movs	r1, #96	; 0x60
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb19 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004b14:	e01c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 fab0 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2140      	movs	r1, #64	; 0x40
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb09 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004b34:	e00c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 fb00 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004b46:	e003      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4c:	e000      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a46      	ldr	r2, [pc, #280]	; (8004cfc <TIM_Base_SetConfig+0x12c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d00f      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a43      	ldr	r2, [pc, #268]	; (8004d00 <TIM_Base_SetConfig+0x130>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a42      	ldr	r2, [pc, #264]	; (8004d04 <TIM_Base_SetConfig+0x134>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a41      	ldr	r2, [pc, #260]	; (8004d08 <TIM_Base_SetConfig+0x138>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <TIM_Base_SetConfig+0x13c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a35      	ldr	r2, [pc, #212]	; (8004cfc <TIM_Base_SetConfig+0x12c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d027      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a32      	ldr	r2, [pc, #200]	; (8004d00 <TIM_Base_SetConfig+0x130>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d023      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <TIM_Base_SetConfig+0x134>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <TIM_Base_SetConfig+0x138>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <TIM_Base_SetConfig+0x13c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d017      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <TIM_Base_SetConfig+0x140>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <TIM_Base_SetConfig+0x144>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <TIM_Base_SetConfig+0x148>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2b      	ldr	r2, [pc, #172]	; (8004d1c <TIM_Base_SetConfig+0x14c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <TIM_Base_SetConfig+0x150>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <TIM_Base_SetConfig+0x154>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d108      	bne.n	8004c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <TIM_Base_SetConfig+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0xf8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <TIM_Base_SetConfig+0x13c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d103      	bne.n	8004cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40010400 	.word	0x40010400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800
 8004d1c:	40001800 	.word	0x40001800
 8004d20:	40001c00 	.word	0x40001c00
 8004d24:	40002000 	.word	0x40002000

08004d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f023 0201 	bic.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 0302 	bic.w	r3, r3, #2
 8004d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <TIM_OC1_SetConfig+0xd8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_OC1_SetConfig+0x64>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <TIM_OC1_SetConfig+0xdc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d10c      	bne.n	8004da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0308 	bic.w	r3, r3, #8
 8004d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <TIM_OC1_SetConfig+0xd8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_OC1_SetConfig+0x8e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <TIM_OC1_SetConfig+0xdc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d111      	bne.n	8004dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	621a      	str	r2, [r3, #32]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40010400 	.word	0x40010400

08004e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f023 0210 	bic.w	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <TIM_OC2_SetConfig+0xe4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0x68>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <TIM_OC2_SetConfig+0xe8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <TIM_OC2_SetConfig+0xe4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC2_SetConfig+0x94>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <TIM_OC2_SetConfig+0xe8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d113      	bne.n	8004ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40010400 	.word	0x40010400

08004ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <TIM_OC3_SetConfig+0xe0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_OC3_SetConfig+0x66>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <TIM_OC3_SetConfig+0xe4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10d      	bne.n	8004f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <TIM_OC3_SetConfig+0xe0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC3_SetConfig+0x92>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <TIM_OC3_SetConfig+0xe4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d113      	bne.n	8004fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <TIM_OC4_SetConfig+0xa4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC4_SetConfig+0x68>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a11      	ldr	r2, [pc, #68]	; (8005084 <TIM_OC4_SetConfig+0xa8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d109      	bne.n	8005058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40010400 	.word	0x40010400

08005088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 030a 	bic.w	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b087      	sub	sp, #28
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f023 0210 	bic.w	r2, r3, #16
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	f043 0307 	orr.w	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800521c:	2302      	movs	r3, #2
 800521e:	e05a      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d01d      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e042      	b.n	80053c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fbe0 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f973 	bl	8005658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d175      	bne.n	80054d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_UART_Transmit+0x2c>
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e06e      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2221      	movs	r2, #33	; 0x21
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005406:	f7fc fd81 	bl	8001f0c <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d108      	bne.n	8005434 <HAL_UART_Transmit+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e003      	b.n	800543c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800543c:	e02e      	b.n	800549c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	2180      	movs	r1, #128	; 0x80
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f848 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e03a      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3302      	adds	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	e007      	b.n	800548e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1cb      	bne.n	800543e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	2140      	movs	r1, #64	; 0x40
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f814 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	e03b      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d037      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fc fd08 	bl	8001f0c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <UART_WaitOnFlagUntilTimeout+0x30>
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e03a      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d023      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d020      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d01d      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d116      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f81d 	bl	8005590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2208      	movs	r2, #8
 800555a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e00f      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	d0b4      	beq.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b095      	sub	sp, #84	; 0x54
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b8:	643a      	str	r2, [r7, #64]	; 0x40
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	61fb      	str	r3, [r7, #28]
   return(result);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	d119      	bne.n	800563c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60bb      	str	r3, [r7, #8]
   return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	647b      	str	r3, [r7, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005628:	61ba      	str	r2, [r7, #24]
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	; 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800565c:	b0c0      	sub	sp, #256	; 0x100
 800565e:	af00      	add	r7, sp, #0
 8005660:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	68d9      	ldr	r1, [r3, #12]
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	ea40 0301 	orr.w	r3, r0, r1
 8005680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	431a      	orrs	r2, r3
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056b0:	f021 010c 	bic.w	r1, r1, #12
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056be:	430b      	orrs	r3, r1
 80056c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	6999      	ldr	r1, [r3, #24]
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	ea40 0301 	orr.w	r3, r0, r1
 80056de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <UART_SetConfig+0x2cc>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d005      	beq.n	80056f8 <UART_SetConfig+0xa0>
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b8d      	ldr	r3, [pc, #564]	; (8005928 <UART_SetConfig+0x2d0>)
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d104      	bne.n	8005702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f8:	f7fe f8fa 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 80056fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005700:	e003      	b.n	800570a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005702:	f7fe f8e1 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8005706:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005714:	f040 810c 	bne.w	8005930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571c:	2200      	movs	r2, #0
 800571e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005722:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	1891      	adds	r1, r2, r2
 8005730:	65b9      	str	r1, [r7, #88]	; 0x58
 8005732:	415b      	adcs	r3, r3
 8005734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800573a:	4621      	mov	r1, r4
 800573c:	eb12 0801 	adds.w	r8, r2, r1
 8005740:	4629      	mov	r1, r5
 8005742:	eb43 0901 	adc.w	r9, r3, r1
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575a:	4690      	mov	r8, r2
 800575c:	4699      	mov	r9, r3
 800575e:	4623      	mov	r3, r4
 8005760:	eb18 0303 	adds.w	r3, r8, r3
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005768:	462b      	mov	r3, r5
 800576a:	eb49 0303 	adc.w	r3, r9, r3
 800576e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800577e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005786:	460b      	mov	r3, r1
 8005788:	18db      	adds	r3, r3, r3
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
 800578c:	4613      	mov	r3, r2
 800578e:	eb42 0303 	adc.w	r3, r2, r3
 8005792:	657b      	str	r3, [r7, #84]	; 0x54
 8005794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800579c:	f7fb fa74 	bl	8000c88 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4b61      	ldr	r3, [pc, #388]	; (800592c <UART_SetConfig+0x2d4>)
 80057a6:	fba3 2302 	umull	r2, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	011c      	lsls	r4, r3, #4
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80057c8:	415b      	adcs	r3, r3
 80057ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057d0:	4641      	mov	r1, r8
 80057d2:	eb12 0a01 	adds.w	sl, r2, r1
 80057d6:	4649      	mov	r1, r9
 80057d8:	eb43 0b01 	adc.w	fp, r3, r1
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f0:	4692      	mov	sl, r2
 80057f2:	469b      	mov	fp, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	eb1a 0303 	adds.w	r3, sl, r3
 80057fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057fe:	464b      	mov	r3, r9
 8005800:	eb4b 0303 	adc.w	r3, fp, r3
 8005804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005814:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800581c:	460b      	mov	r3, r1
 800581e:	18db      	adds	r3, r3, r3
 8005820:	643b      	str	r3, [r7, #64]	; 0x40
 8005822:	4613      	mov	r3, r2
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
 800582a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800582e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005832:	f7fb fa29 	bl	8000c88 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4611      	mov	r1, r2
 800583c:	4b3b      	ldr	r3, [pc, #236]	; (800592c <UART_SetConfig+0x2d4>)
 800583e:	fba3 2301 	umull	r2, r3, r3, r1
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2264      	movs	r2, #100	; 0x64
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	1acb      	subs	r3, r1, r3
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005852:	4b36      	ldr	r3, [pc, #216]	; (800592c <UART_SetConfig+0x2d4>)
 8005854:	fba3 2302 	umull	r2, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005860:	441c      	add	r4, r3
 8005862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005866:	2200      	movs	r2, #0
 8005868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800586c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	1891      	adds	r1, r2, r2
 800587a:	63b9      	str	r1, [r7, #56]	; 0x38
 800587c:	415b      	adcs	r3, r3
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005884:	4641      	mov	r1, r8
 8005886:	1851      	adds	r1, r2, r1
 8005888:	6339      	str	r1, [r7, #48]	; 0x30
 800588a:	4649      	mov	r1, r9
 800588c:	414b      	adcs	r3, r1
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800589c:	4659      	mov	r1, fp
 800589e:	00cb      	lsls	r3, r1, #3
 80058a0:	4651      	mov	r1, sl
 80058a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058a6:	4651      	mov	r1, sl
 80058a8:	00ca      	lsls	r2, r1, #3
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	4642      	mov	r2, r8
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b8:	464b      	mov	r3, r9
 80058ba:	460a      	mov	r2, r1
 80058bc:	eb42 0303 	adc.w	r3, r2, r3
 80058c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058d8:	460b      	mov	r3, r1
 80058da:	18db      	adds	r3, r3, r3
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058de:	4613      	mov	r3, r2
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058ee:	f7fb f9cb 	bl	8000c88 <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <UART_SetConfig+0x2d4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	; 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	3332      	adds	r3, #50	; 0x32
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <UART_SetConfig+0x2d4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 0207 	and.w	r2, r3, #7
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4422      	add	r2, r4
 800591e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005920:	e106      	b.n	8005b30 <UART_SetConfig+0x4d8>
 8005922:	bf00      	nop
 8005924:	40011000 	.word	0x40011000
 8005928:	40011400 	.word	0x40011400
 800592c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800593a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800593e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005942:	4642      	mov	r2, r8
 8005944:	464b      	mov	r3, r9
 8005946:	1891      	adds	r1, r2, r2
 8005948:	6239      	str	r1, [r7, #32]
 800594a:	415b      	adcs	r3, r3
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005952:	4641      	mov	r1, r8
 8005954:	1854      	adds	r4, r2, r1
 8005956:	4649      	mov	r1, r9
 8005958:	eb43 0501 	adc.w	r5, r3, r1
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	00eb      	lsls	r3, r5, #3
 8005966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596a:	00e2      	lsls	r2, r4, #3
 800596c:	4614      	mov	r4, r2
 800596e:	461d      	mov	r5, r3
 8005970:	4643      	mov	r3, r8
 8005972:	18e3      	adds	r3, r4, r3
 8005974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005978:	464b      	mov	r3, r9
 800597a:	eb45 0303 	adc.w	r3, r5, r3
 800597e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800598e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800599e:	4629      	mov	r1, r5
 80059a0:	008b      	lsls	r3, r1, #2
 80059a2:	4621      	mov	r1, r4
 80059a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a8:	4621      	mov	r1, r4
 80059aa:	008a      	lsls	r2, r1, #2
 80059ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059b0:	f7fb f96a 	bl	8000c88 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b60      	ldr	r3, [pc, #384]	; (8005b3c <UART_SetConfig+0x4e4>)
 80059ba:	fba3 2302 	umull	r2, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	011c      	lsls	r4, r3, #4
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	61b9      	str	r1, [r7, #24]
 80059dc:	415b      	adcs	r3, r3
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059e4:	4641      	mov	r1, r8
 80059e6:	1851      	adds	r1, r2, r1
 80059e8:	6139      	str	r1, [r7, #16]
 80059ea:	4649      	mov	r1, r9
 80059ec:	414b      	adcs	r3, r1
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059fc:	4659      	mov	r1, fp
 80059fe:	00cb      	lsls	r3, r1, #3
 8005a00:	4651      	mov	r1, sl
 8005a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a06:	4651      	mov	r1, sl
 8005a08:	00ca      	lsls	r2, r1, #3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4642      	mov	r2, r8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a18:	464b      	mov	r3, r9
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	008b      	lsls	r3, r1, #2
 8005a40:	4641      	mov	r1, r8
 8005a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a46:	4641      	mov	r1, r8
 8005a48:	008a      	lsls	r2, r1, #2
 8005a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a4e:	f7fb f91b 	bl	8000c88 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	; 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	; 0x32
 8005a6c:	4a33      	ldr	r2, [pc, #204]	; (8005b3c <UART_SetConfig+0x4e4>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a78:	441c      	add	r4, r3
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	673b      	str	r3, [r7, #112]	; 0x70
 8005a82:	677a      	str	r2, [r7, #116]	; 0x74
 8005a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	415b      	adcs	r3, r3
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aca:	464b      	mov	r3, r9
 8005acc:	460a      	mov	r2, r1
 8005ace:	eb42 0303 	adc.w	r3, r2, r3
 8005ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ade:	667a      	str	r2, [r7, #100]	; 0x64
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005aec:	4649      	mov	r1, r9
 8005aee:	008b      	lsls	r3, r1, #2
 8005af0:	4641      	mov	r1, r8
 8005af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af6:	4641      	mov	r1, r8
 8005af8:	008a      	lsls	r2, r1, #2
 8005afa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005afe:	f7fb f8c3 	bl	8000c88 <__aeabi_uldivmod>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <UART_SetConfig+0x4e4>)
 8005b08:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2164      	movs	r1, #100	; 0x64
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	3332      	adds	r3, #50	; 0x32
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <UART_SetConfig+0x4e4>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4422      	add	r2, r4
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b36:	46bd      	mov	sp, r7
 8005b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3c:	51eb851f 	.word	0x51eb851f

08005b40 <BWHPF>:
float hpf_sos_50[SECTIONS][6] = {
	{0.8484753, -1.69695059,  0.8686753, 1.0, -1.77831349, 0.79244747},
	{1.0, -2.0,  1.0, 1.0, -1.8934156, 0.90846441}
};

float BWHPF(float input, int8_t ch) {
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	70fb      	strb	r3, [r7, #3]
	float output = 0;
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
	float xn = 0;
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	if (ch == 10){
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b0a      	cmp	r3, #10
 8005b60:	f040 8095 	bne.w	8005c8e <BWHPF+0x14e>

		for (int i = 0; i < SECTIONS; i++) {
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	e08c      	b.n	8005c84 <BWHPF+0x144>
			xn = (i == 0) ? input : output;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <BWHPF+0x34>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	e000      	b.n	8005b76 <BWHPF+0x36>
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	60bb      	str	r3, [r7, #8]

			output = hpf_sos_20[i][0] * xn + hpf_sos_20[i][1] * hpf_x_buffer10[i][0] + hpf_sos_20[i][2] * hpf_x_buffer10[i][1]
 8005b78:	4996      	ldr	r1, [pc, #600]	; (8005dd4 <BWHPF+0x294>)
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	4413      	add	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	440b      	add	r3, r1
 8005b86:	ed93 7a00 	vldr	s14, [r3]
 8005b8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b92:	4990      	ldr	r1, [pc, #576]	; (8005dd4 <BWHPF+0x294>)
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	edd3 6a00 	vldr	s13, [r3]
 8005ba6:	4a8c      	ldr	r2, [pc, #560]	; (8005dd8 <BWHPF+0x298>)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	edd3 7a00 	vldr	s15, [r3]
 8005bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bba:	4986      	ldr	r1, [pc, #536]	; (8005dd4 <BWHPF+0x294>)
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3308      	adds	r3, #8
 8005bca:	edd3 6a00 	vldr	s13, [r3]
 8005bce:	4a82      	ldr	r2, [pc, #520]	; (8005dd8 <BWHPF+0x298>)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be0:	ee37 7a27 	vadd.f32	s14, s14, s15
		    - hpf_sos_20[i][4] * hpf_y_buffer10[i][0] - hpf_sos_20[i][5] * hpf_y_buffer10[i][1];
 8005be4:	497b      	ldr	r1, [pc, #492]	; (8005dd4 <BWHPF+0x294>)
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3310      	adds	r3, #16
 8005bf4:	edd3 6a00 	vldr	s13, [r3]
 8005bf8:	4a78      	ldr	r2, [pc, #480]	; (8005ddc <BWHPF+0x29c>)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	edd3 7a00 	vldr	s15, [r3]
 8005c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c0c:	4971      	ldr	r1, [pc, #452]	; (8005dd4 <BWHPF+0x294>)
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4613      	mov	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	edd3 6a00 	vldr	s13, [r3]
 8005c20:	4a6e      	ldr	r2, [pc, #440]	; (8005ddc <BWHPF+0x29c>)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	edd3 7a00 	vldr	s15, [r3]
 8005c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			output = hpf_sos_20[i][0] * xn + hpf_sos_20[i][1] * hpf_x_buffer10[i][0] + hpf_sos_20[i][2] * hpf_x_buffer10[i][1]
 8005c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c36:	edc7 7a05 	vstr	s15, [r7, #20]

			hpf_x_buffer10[i][1] = hpf_x_buffer10[i][0];
 8005c3a:	4a67      	ldr	r2, [pc, #412]	; (8005dd8 <BWHPF+0x298>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4964      	ldr	r1, [pc, #400]	; (8005dd8 <BWHPF+0x298>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	601a      	str	r2, [r3, #0]
			hpf_x_buffer10[i][0] = xn;
 8005c50:	4a61      	ldr	r2, [pc, #388]	; (8005dd8 <BWHPF+0x298>)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	601a      	str	r2, [r3, #0]
			hpf_y_buffer10[i][1] = hpf_y_buffer10[i][0];
 8005c5c:	4a5f      	ldr	r2, [pc, #380]	; (8005ddc <BWHPF+0x29c>)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	495d      	ldr	r1, [pc, #372]	; (8005ddc <BWHPF+0x29c>)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3304      	adds	r3, #4
 8005c70:	601a      	str	r2, [r3, #0]
			hpf_y_buffer10[i][0] = output;
 8005c72:	4a5a      	ldr	r2, [pc, #360]	; (8005ddc <BWHPF+0x29c>)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SECTIONS; i++) {
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3301      	adds	r3, #1
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f77f af6f 	ble.w	8005b6a <BWHPF+0x2a>
 8005c8c:	e098      	b.n	8005dc0 <BWHPF+0x280>
		}
	}
	else if (ch == 20){
 8005c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c92:	2b14      	cmp	r3, #20
 8005c94:	f040 8094 	bne.w	8005dc0 <BWHPF+0x280>

		for (int i = 0; i < SECTIONS; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e08c      	b.n	8005db8 <BWHPF+0x278>
			xn = (i == 0) ? input : output;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <BWHPF+0x168>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	e000      	b.n	8005caa <BWHPF+0x16a>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	60bb      	str	r3, [r7, #8]

			output = hpf_sos_50[i][0] * xn + hpf_sos_50[i][1] * hpf_x_buffer20[i][0] + hpf_sos_50[i][2] * hpf_x_buffer20[i][1]
 8005cac:	494c      	ldr	r1, [pc, #304]	; (8005de0 <BWHPF+0x2a0>)
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	ed93 7a00 	vldr	s14, [r3]
 8005cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc6:	4946      	ldr	r1, [pc, #280]	; (8005de0 <BWHPF+0x2a0>)
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	edd3 6a00 	vldr	s13, [r3]
 8005cda:	4a42      	ldr	r2, [pc, #264]	; (8005de4 <BWHPF+0x2a4>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	edd3 7a00 	vldr	s15, [r3]
 8005ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cee:	493c      	ldr	r1, [pc, #240]	; (8005de0 <BWHPF+0x2a0>)
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	edd3 6a00 	vldr	s13, [r3]
 8005d02:	4a38      	ldr	r2, [pc, #224]	; (8005de4 <BWHPF+0x2a4>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d14:	ee37 7a27 	vadd.f32	s14, s14, s15
		    - hpf_sos_50[i][4] * hpf_y_buffer20[i][0] - hpf_sos_50[i][5] * hpf_y_buffer20[i][1];
 8005d18:	4931      	ldr	r1, [pc, #196]	; (8005de0 <BWHPF+0x2a0>)
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	3310      	adds	r3, #16
 8005d28:	edd3 6a00 	vldr	s13, [r3]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <BWHPF+0x2a8>)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	edd3 7a00 	vldr	s15, [r3]
 8005d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d40:	4927      	ldr	r1, [pc, #156]	; (8005de0 <BWHPF+0x2a0>)
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3314      	adds	r3, #20
 8005d50:	edd3 6a00 	vldr	s13, [r3]
 8005d54:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <BWHPF+0x2a8>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	edd3 7a00 	vldr	s15, [r3]
 8005d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
			output = hpf_sos_50[i][0] * xn + hpf_sos_50[i][1] * hpf_x_buffer20[i][0] + hpf_sos_50[i][2] * hpf_x_buffer20[i][1]
 8005d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d6a:	edc7 7a05 	vstr	s15, [r7, #20]

			hpf_x_buffer20[i][1] = hpf_x_buffer20[i][0];
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <BWHPF+0x2a4>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	491a      	ldr	r1, [pc, #104]	; (8005de4 <BWHPF+0x2a4>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	3304      	adds	r3, #4
 8005d82:	601a      	str	r2, [r3, #0]
			hpf_x_buffer20[i][0] = xn;
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <BWHPF+0x2a4>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	601a      	str	r2, [r3, #0]
			hpf_y_buffer20[i][1] = hpf_y_buffer20[i][0];
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <BWHPF+0x2a8>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4913      	ldr	r1, [pc, #76]	; (8005de8 <BWHPF+0x2a8>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	440b      	add	r3, r1
 8005da2:	3304      	adds	r3, #4
 8005da4:	601a      	str	r2, [r3, #0]
			hpf_y_buffer20[i][0] = output;
 8005da6:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <BWHPF+0x2a8>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SECTIONS; i++) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	f77f af6f 	ble.w	8005c9e <BWHPF+0x15e>
		}
	}
	return output;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
}
 8005dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	20000010 	.word	0x20000010
 8005dd8:	200004d4 	.word	0x200004d4
 8005ddc:	200004e4 	.word	0x200004e4
 8005de0:	20000040 	.word	0x20000040
 8005de4:	200004f4 	.word	0x200004f4
 8005de8:	20000504 	.word	0x20000504

08005dec <BWLPF>:
float lpf_sos_20[SECTIONS][6] = {
    {1.32937289e-05, 2.65874578e-05, 1.32937289e-05, 1.0, -1.77831349, 0.79244747},
	{1.00000000, 2.00000000, 1.00000000, 1.00000000, -1.89341560, 0.90846441} //20Hz
};

float BWLPF(float input, int8_t ch) {
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	ed87 0a01 	vstr	s0, [r7, #4]
 8005df6:	4603      	mov	r3, r0
 8005df8:	70fb      	strb	r3, [r7, #3]
	float output = 0;
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
	float xn = 0;
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

	if (ch == 10){
 8005e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e0a:	2b0a      	cmp	r3, #10
 8005e0c:	f040 8095 	bne.w	8005f3a <BWLPF+0x14e>

		for (int i = 0; i < SECTIONS; i++) {
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	e08c      	b.n	8005f30 <BWLPF+0x144>
			xn = (i == 0) ? input : output;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <BWLPF+0x34>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	e000      	b.n	8005e22 <BWLPF+0x36>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	60bb      	str	r3, [r7, #8]

			output = lpf_sos_6[i][0] * xn + lpf_sos_6[i][1] * lpf_x_buffer10[i][0] + lpf_sos_6[i][2] * lpf_x_buffer10[i][1]
 8005e24:	4996      	ldr	r1, [pc, #600]	; (8006080 <BWLPF+0x294>)
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	440b      	add	r3, r1
 8005e32:	ed93 7a00 	vldr	s14, [r3]
 8005e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e3e:	4990      	ldr	r1, [pc, #576]	; (8006080 <BWLPF+0x294>)
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	edd3 6a00 	vldr	s13, [r3]
 8005e52:	4a8c      	ldr	r2, [pc, #560]	; (8006084 <BWLPF+0x298>)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	edd3 7a00 	vldr	s15, [r3]
 8005e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e66:	4986      	ldr	r1, [pc, #536]	; (8006080 <BWLPF+0x294>)
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	440b      	add	r3, r1
 8005e74:	3308      	adds	r3, #8
 8005e76:	edd3 6a00 	vldr	s13, [r3]
 8005e7a:	4a82      	ldr	r2, [pc, #520]	; (8006084 <BWLPF+0x298>)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4413      	add	r3, r2
 8005e82:	3304      	adds	r3, #4
 8005e84:	edd3 7a00 	vldr	s15, [r3]
 8005e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- lpf_sos_6[i][4] * lpf_y_buffer10[i][0] - lpf_sos_6[i][5] * lpf_y_buffer10[i][1];
 8005e90:	497b      	ldr	r1, [pc, #492]	; (8006080 <BWLPF+0x294>)
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4613      	mov	r3, r2
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3310      	adds	r3, #16
 8005ea0:	edd3 6a00 	vldr	s13, [r3]
 8005ea4:	4a78      	ldr	r2, [pc, #480]	; (8006088 <BWLPF+0x29c>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eb8:	4971      	ldr	r1, [pc, #452]	; (8006080 <BWLPF+0x294>)
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	edd3 6a00 	vldr	s13, [r3]
 8005ecc:	4a6e      	ldr	r2, [pc, #440]	; (8006088 <BWLPF+0x29c>)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	edd3 7a00 	vldr	s15, [r3]
 8005eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
			output = lpf_sos_6[i][0] * xn + lpf_sos_6[i][1] * lpf_x_buffer10[i][0] + lpf_sos_6[i][2] * lpf_x_buffer10[i][1]
 8005ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ee2:	edc7 7a05 	vstr	s15, [r7, #20]

			lpf_x_buffer10[i][1] = lpf_x_buffer10[i][0];
 8005ee6:	4a67      	ldr	r2, [pc, #412]	; (8006084 <BWLPF+0x298>)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4964      	ldr	r1, [pc, #400]	; (8006084 <BWLPF+0x298>)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3304      	adds	r3, #4
 8005efa:	601a      	str	r2, [r3, #0]
			lpf_x_buffer10[i][0] = xn;
 8005efc:	4a61      	ldr	r2, [pc, #388]	; (8006084 <BWLPF+0x298>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4413      	add	r3, r2
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	601a      	str	r2, [r3, #0]
			lpf_y_buffer10[i][1] = lpf_y_buffer10[i][0];
 8005f08:	4a5f      	ldr	r2, [pc, #380]	; (8006088 <BWLPF+0x29c>)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	495d      	ldr	r1, [pc, #372]	; (8006088 <BWLPF+0x29c>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	440b      	add	r3, r1
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	601a      	str	r2, [r3, #0]
			lpf_y_buffer10[i][0] = output;
 8005f1e:	4a5a      	ldr	r2, [pc, #360]	; (8006088 <BWLPF+0x29c>)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4413      	add	r3, r2
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SECTIONS; i++) {
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f77f af6f 	ble.w	8005e16 <BWLPF+0x2a>
 8005f38:	e098      	b.n	800606c <BWLPF+0x280>
		    }
	}
	else if (ch == 20){
 8005f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f3e:	2b14      	cmp	r3, #20
 8005f40:	f040 8094 	bne.w	800606c <BWLPF+0x280>

		for (int i = 0; i < SECTIONS; i++) {
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e08c      	b.n	8006064 <BWLPF+0x278>
			xn = (i == 0) ? input : output;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <BWLPF+0x168>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	e000      	b.n	8005f56 <BWLPF+0x16a>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	60bb      	str	r3, [r7, #8]

			output = lpf_sos_6[i][0] * xn + lpf_sos_6[i][1] * lpf_x_buffer20[i][0] + lpf_sos_6[i][2] * lpf_x_buffer20[i][1]
 8005f58:	4949      	ldr	r1, [pc, #292]	; (8006080 <BWLPF+0x294>)
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	ed93 7a00 	vldr	s14, [r3]
 8005f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f72:	4943      	ldr	r1, [pc, #268]	; (8006080 <BWLPF+0x294>)
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	440b      	add	r3, r1
 8005f80:	3304      	adds	r3, #4
 8005f82:	edd3 6a00 	vldr	s13, [r3]
 8005f86:	4a41      	ldr	r2, [pc, #260]	; (800608c <BWLPF+0x2a0>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	edd3 7a00 	vldr	s15, [r3]
 8005f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f9a:	4939      	ldr	r1, [pc, #228]	; (8006080 <BWLPF+0x294>)
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3308      	adds	r3, #8
 8005faa:	edd3 6a00 	vldr	s13, [r3]
 8005fae:	4a37      	ldr	r2, [pc, #220]	; (800608c <BWLPF+0x2a0>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	edd3 7a00 	vldr	s15, [r3]
 8005fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
			- lpf_sos_6[i][4] * lpf_y_buffer20[i][0] - lpf_sos_6[i][5] * lpf_y_buffer20[i][1];
 8005fc4:	492e      	ldr	r1, [pc, #184]	; (8006080 <BWLPF+0x294>)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4413      	add	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	edd3 6a00 	vldr	s13, [r3]
 8005fd8:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <BWLPF+0x2a4>)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	edd3 7a00 	vldr	s15, [r3]
 8005fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fec:	4924      	ldr	r1, [pc, #144]	; (8006080 <BWLPF+0x294>)
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	edd3 6a00 	vldr	s13, [r3]
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <BWLPF+0x2a4>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			output = lpf_sos_6[i][0] * xn + lpf_sos_6[i][1] * lpf_x_buffer20[i][0] + lpf_sos_6[i][2] * lpf_x_buffer20[i][1]
 8006012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006016:	edc7 7a05 	vstr	s15, [r7, #20]

			lpf_x_buffer20[i][1] = lpf_x_buffer20[i][0];
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <BWLPF+0x2a0>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4919      	ldr	r1, [pc, #100]	; (800608c <BWLPF+0x2a0>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	440b      	add	r3, r1
 800602c:	3304      	adds	r3, #4
 800602e:	601a      	str	r2, [r3, #0]
			lpf_x_buffer20[i][0] = xn;
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <BWLPF+0x2a0>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	601a      	str	r2, [r3, #0]
			lpf_y_buffer20[i][1] = lpf_y_buffer20[i][0];
 800603c:	4a14      	ldr	r2, [pc, #80]	; (8006090 <BWLPF+0x2a4>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4912      	ldr	r1, [pc, #72]	; (8006090 <BWLPF+0x2a4>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	3304      	adds	r3, #4
 8006050:	601a      	str	r2, [r3, #0]
			lpf_y_buffer20[i][0] = output;
 8006052:	4a0f      	ldr	r2, [pc, #60]	; (8006090 <BWLPF+0x2a4>)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SECTIONS; i++) {
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	f77f af6f 	ble.w	8005f4a <BWLPF+0x15e>
		    }
	}
    return output;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
}
 8006072:	eeb0 0a67 	vmov.f32	s0, s15
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	20000070 	.word	0x20000070
 8006084:	20000514 	.word	0x20000514
 8006088:	20000524 	.word	0x20000524
 800608c:	20000534 	.word	0x20000534
 8006090:	20000544 	.word	0x20000544

08006094 <NEURAL_ACTIVATION>:
}*/

/************************************************NEURAL ACTIVATION CALCULATION************************************************/
float na = 0, nat1 = 0, nat2 = 0;

float NEURAL_ACTIVATION(float emg){
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	ed87 0a01 	vstr	s0, [r7, #4]
	float gma1 = -0.75, gma2 = -0.125;
 800609e:	4b2f      	ldr	r3, [pc, #188]	; (800615c <NEURAL_ACTIVATION+0xc8>)
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	f04f 433e 	mov.w	r3, #3187671040	; 0xbe000000
 80060a6:	61bb      	str	r3, [r7, #24]
	float bet1 = gma1 + gma2, bet2 = gma1*gma2, alp = 1 + bet1 + bet2;
 80060a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80060ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80060b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060b4:	edc7 7a05 	vstr	s15, [r7, #20]
 80060b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80060bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a04 	vstr	s15, [r7, #16]
 80060c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80060cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80060d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060dc:	edc7 7a03 	vstr	s15, [r7, #12]

	nat2 = nat1;
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <NEURAL_ACTIVATION+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <NEURAL_ACTIVATION+0xd0>)
 80060e6:	6013      	str	r3, [r2, #0]
	nat1 = na;
 80060e8:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <NEURAL_ACTIVATION+0xd4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <NEURAL_ACTIVATION+0xcc>)
 80060ee:	6013      	str	r3, [r2, #0]
	na = (alp*emg - bet1*nat1 - bet2*nat2)-4;
 80060f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80060f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060fc:	4b18      	ldr	r3, [pc, #96]	; (8006160 <NEURAL_ACTIVATION+0xcc>)
 80060fe:	edd3 6a00 	vldr	s13, [r3]
 8006102:	edd7 7a05 	vldr	s15, [r7, #20]
 8006106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800610a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <NEURAL_ACTIVATION+0xd0>)
 8006110:	edd3 6a00 	vldr	s13, [r3]
 8006114:	edd7 7a04 	vldr	s15, [r7, #16]
 8006118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800611c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006120:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <NEURAL_ACTIVATION+0xd4>)
 800612a:	edc3 7a00 	vstr	s15, [r3]
	if(na<0){
 800612e:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <NEURAL_ACTIVATION+0xd4>)
 8006130:	edd3 7a00 	vldr	s15, [r3]
 8006134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	d503      	bpl.n	8006146 <NEURAL_ACTIVATION+0xb2>
	  na=0;
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <NEURAL_ACTIVATION+0xd4>)
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
	}

	return na;
 8006146:	4b08      	ldr	r3, [pc, #32]	; (8006168 <NEURAL_ACTIVATION+0xd4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	ee07 3a90 	vmov	s15, r3
}
 800614e:	eeb0 0a67 	vmov.f32	s0, s15
 8006152:	3724      	adds	r7, #36	; 0x24
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	bf400000 	.word	0xbf400000
 8006160:	20000558 	.word	0x20000558
 8006164:	2000055c 	.word	0x2000055c
 8006168:	20000554 	.word	0x20000554

0800616c <MUSCLE_ACTIVATION>:

/************************************************MUSCLE ACTIVATION CALCULATION************************************************/
float MUSCLE_ACTIVATION(float neural_activation){
 800616c:	b5b0      	push	{r4, r5, r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	ed87 0a01 	vstr	s0, [r7, #4]
	float A = -0.03, max_value = 33.81404;
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <MUSCLE_ACTIVATION+0xcc>)
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	4b30      	ldr	r3, [pc, #192]	; (800623c <MUSCLE_ACTIVATION+0xd0>)
 800617c:	613b      	str	r3, [r7, #16]
	float ma = (exp(A*neural_activation) - 1)/(exp(A) - 1);
 800617e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006182:	edd7 7a01 	vldr	s15, [r7, #4]
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	ee17 0a90 	vmov	r0, s15
 800618e:	f7fa f9fb 	bl	8000588 <__aeabi_f2d>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	ec43 2b10 	vmov	d0, r2, r3
 800619a:	f002 fd29 	bl	8008bf0 <exp>
 800619e:	ec51 0b10 	vmov	r0, r1, d0
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	4b26      	ldr	r3, [pc, #152]	; (8006240 <MUSCLE_ACTIVATION+0xd4>)
 80061a8:	f7fa f88e 	bl	80002c8 <__aeabi_dsub>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f7fa f9e7 	bl	8000588 <__aeabi_f2d>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	ec43 2b10 	vmov	d0, r2, r3
 80061c2:	f002 fd15 	bl	8008bf0 <exp>
 80061c6:	ec51 0b10 	vmov	r0, r1, d0
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <MUSCLE_ACTIVATION+0xd4>)
 80061d0:	f7fa f87a 	bl	80002c8 <__aeabi_dsub>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7fa fb56 	bl	800088c <__aeabi_ddiv>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	f7fa fcfe 	bl	8000be8 <__aeabi_d2f>
 80061ec:	4603      	mov	r3, r0
 80061ee:	60fb      	str	r3, [r7, #12]
	float ma_cal = ma/max_value*100;
 80061f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80061f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80061f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006244 <MUSCLE_ACTIVATION+0xd8>
 8006200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006204:	edc7 7a02 	vstr	s15, [r7, #8]

	return (int32_t)round(ma_cal);
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f7fa f9bd 	bl	8000588 <__aeabi_f2d>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec43 2b10 	vmov	d0, r2, r3
 8006216:	f002 fd3f 	bl	8008c98 <round>
 800621a:	ec53 2b10 	vmov	r2, r3, d0
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	f7fa fcb9 	bl	8000b98 <__aeabi_d2iz>
 8006226:	ee07 0a90 	vmov	s15, r0
 800622a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800622e:	eeb0 0a67 	vmov.f32	s0, s15
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bdb0      	pop	{r4, r5, r7, pc}
 8006238:	bcf5c28f 	.word	0xbcf5c28f
 800623c:	42074194 	.word	0x42074194
 8006240:	3ff00000 	.word	0x3ff00000
 8006244:	42c80000 	.word	0x42c80000

08006248 <__cvt>:
 8006248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	ec55 4b10 	vmov	r4, r5, d0
 8006250:	2d00      	cmp	r5, #0
 8006252:	460e      	mov	r6, r1
 8006254:	4619      	mov	r1, r3
 8006256:	462b      	mov	r3, r5
 8006258:	bfbb      	ittet	lt
 800625a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800625e:	461d      	movlt	r5, r3
 8006260:	2300      	movge	r3, #0
 8006262:	232d      	movlt	r3, #45	; 0x2d
 8006264:	700b      	strb	r3, [r1, #0]
 8006266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800626c:	4691      	mov	r9, r2
 800626e:	f023 0820 	bic.w	r8, r3, #32
 8006272:	bfbc      	itt	lt
 8006274:	4622      	movlt	r2, r4
 8006276:	4614      	movlt	r4, r2
 8006278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800627c:	d005      	beq.n	800628a <__cvt+0x42>
 800627e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006282:	d100      	bne.n	8006286 <__cvt+0x3e>
 8006284:	3601      	adds	r6, #1
 8006286:	2102      	movs	r1, #2
 8006288:	e000      	b.n	800628c <__cvt+0x44>
 800628a:	2103      	movs	r1, #3
 800628c:	ab03      	add	r3, sp, #12
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	ab02      	add	r3, sp, #8
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	ec45 4b10 	vmov	d0, r4, r5
 8006298:	4653      	mov	r3, sl
 800629a:	4632      	mov	r2, r6
 800629c:	f000 fe5c 	bl	8006f58 <_dtoa_r>
 80062a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062a4:	4607      	mov	r7, r0
 80062a6:	d102      	bne.n	80062ae <__cvt+0x66>
 80062a8:	f019 0f01 	tst.w	r9, #1
 80062ac:	d022      	beq.n	80062f4 <__cvt+0xac>
 80062ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b2:	eb07 0906 	add.w	r9, r7, r6
 80062b6:	d110      	bne.n	80062da <__cvt+0x92>
 80062b8:	783b      	ldrb	r3, [r7, #0]
 80062ba:	2b30      	cmp	r3, #48	; 0x30
 80062bc:	d10a      	bne.n	80062d4 <__cvt+0x8c>
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f7fa fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 80062ca:	b918      	cbnz	r0, 80062d4 <__cvt+0x8c>
 80062cc:	f1c6 0601 	rsb	r6, r6, #1
 80062d0:	f8ca 6000 	str.w	r6, [sl]
 80062d4:	f8da 3000 	ldr.w	r3, [sl]
 80062d8:	4499      	add	r9, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7fa fc11 	bl	8000b08 <__aeabi_dcmpeq>
 80062e6:	b108      	cbz	r0, 80062ec <__cvt+0xa4>
 80062e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80062ec:	2230      	movs	r2, #48	; 0x30
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	454b      	cmp	r3, r9
 80062f2:	d307      	bcc.n	8006304 <__cvt+0xbc>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f8:	1bdb      	subs	r3, r3, r7
 80062fa:	4638      	mov	r0, r7
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	b004      	add	sp, #16
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	9103      	str	r1, [sp, #12]
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e7f0      	b.n	80062ee <__cvt+0xa6>

0800630c <__exponent>:
 800630c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630e:	4603      	mov	r3, r0
 8006310:	2900      	cmp	r1, #0
 8006312:	bfb8      	it	lt
 8006314:	4249      	neglt	r1, r1
 8006316:	f803 2b02 	strb.w	r2, [r3], #2
 800631a:	bfb4      	ite	lt
 800631c:	222d      	movlt	r2, #45	; 0x2d
 800631e:	222b      	movge	r2, #43	; 0x2b
 8006320:	2909      	cmp	r1, #9
 8006322:	7042      	strb	r2, [r0, #1]
 8006324:	dd2a      	ble.n	800637c <__exponent+0x70>
 8006326:	f10d 0207 	add.w	r2, sp, #7
 800632a:	4617      	mov	r7, r2
 800632c:	260a      	movs	r6, #10
 800632e:	4694      	mov	ip, r2
 8006330:	fb91 f5f6 	sdiv	r5, r1, r6
 8006334:	fb06 1415 	mls	r4, r6, r5, r1
 8006338:	3430      	adds	r4, #48	; 0x30
 800633a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800633e:	460c      	mov	r4, r1
 8006340:	2c63      	cmp	r4, #99	; 0x63
 8006342:	f102 32ff 	add.w	r2, r2, #4294967295
 8006346:	4629      	mov	r1, r5
 8006348:	dcf1      	bgt.n	800632e <__exponent+0x22>
 800634a:	3130      	adds	r1, #48	; 0x30
 800634c:	f1ac 0402 	sub.w	r4, ip, #2
 8006350:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006354:	1c41      	adds	r1, r0, #1
 8006356:	4622      	mov	r2, r4
 8006358:	42ba      	cmp	r2, r7
 800635a:	d30a      	bcc.n	8006372 <__exponent+0x66>
 800635c:	f10d 0209 	add.w	r2, sp, #9
 8006360:	eba2 020c 	sub.w	r2, r2, ip
 8006364:	42bc      	cmp	r4, r7
 8006366:	bf88      	it	hi
 8006368:	2200      	movhi	r2, #0
 800636a:	4413      	add	r3, r2
 800636c:	1a18      	subs	r0, r3, r0
 800636e:	b003      	add	sp, #12
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006376:	f801 5f01 	strb.w	r5, [r1, #1]!
 800637a:	e7ed      	b.n	8006358 <__exponent+0x4c>
 800637c:	2330      	movs	r3, #48	; 0x30
 800637e:	3130      	adds	r1, #48	; 0x30
 8006380:	7083      	strb	r3, [r0, #2]
 8006382:	70c1      	strb	r1, [r0, #3]
 8006384:	1d03      	adds	r3, r0, #4
 8006386:	e7f1      	b.n	800636c <__exponent+0x60>

08006388 <_printf_float>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	ed2d 8b02 	vpush	{d8}
 8006390:	b08d      	sub	sp, #52	; 0x34
 8006392:	460c      	mov	r4, r1
 8006394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006398:	4616      	mov	r6, r2
 800639a:	461f      	mov	r7, r3
 800639c:	4605      	mov	r5, r0
 800639e:	f000 fcd9 	bl	8006d54 <_localeconv_r>
 80063a2:	f8d0 a000 	ldr.w	sl, [r0]
 80063a6:	4650      	mov	r0, sl
 80063a8:	f7f9 ff82 	bl	80002b0 <strlen>
 80063ac:	2300      	movs	r3, #0
 80063ae:	930a      	str	r3, [sp, #40]	; 0x28
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	f8d8 3000 	ldr.w	r3, [r8]
 80063b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063bc:	3307      	adds	r3, #7
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	f103 0208 	add.w	r2, r3, #8
 80063c6:	f8c8 2000 	str.w	r2, [r8]
 80063ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063d2:	9307      	str	r3, [sp, #28]
 80063d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80063d8:	ee08 0a10 	vmov	s16, r0
 80063dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80063e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e4:	4b9e      	ldr	r3, [pc, #632]	; (8006660 <_printf_float+0x2d8>)
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	f7fa fbbf 	bl	8000b6c <__aeabi_dcmpun>
 80063ee:	bb88      	cbnz	r0, 8006454 <_printf_float+0xcc>
 80063f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f4:	4b9a      	ldr	r3, [pc, #616]	; (8006660 <_printf_float+0x2d8>)
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	f7fa fb99 	bl	8000b30 <__aeabi_dcmple>
 80063fe:	bb48      	cbnz	r0, 8006454 <_printf_float+0xcc>
 8006400:	2200      	movs	r2, #0
 8006402:	2300      	movs	r3, #0
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7fa fb88 	bl	8000b1c <__aeabi_dcmplt>
 800640c:	b110      	cbz	r0, 8006414 <_printf_float+0x8c>
 800640e:	232d      	movs	r3, #45	; 0x2d
 8006410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006414:	4a93      	ldr	r2, [pc, #588]	; (8006664 <_printf_float+0x2dc>)
 8006416:	4b94      	ldr	r3, [pc, #592]	; (8006668 <_printf_float+0x2e0>)
 8006418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800641c:	bf94      	ite	ls
 800641e:	4690      	movls	r8, r2
 8006420:	4698      	movhi	r8, r3
 8006422:	2303      	movs	r3, #3
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	9b05      	ldr	r3, [sp, #20]
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	9700      	str	r7, [sp, #0]
 8006434:	4633      	mov	r3, r6
 8006436:	aa0b      	add	r2, sp, #44	; 0x2c
 8006438:	4621      	mov	r1, r4
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f9da 	bl	80067f4 <_printf_common>
 8006440:	3001      	adds	r0, #1
 8006442:	f040 8090 	bne.w	8006566 <_printf_float+0x1de>
 8006446:	f04f 30ff 	mov.w	r0, #4294967295
 800644a:	b00d      	add	sp, #52	; 0x34
 800644c:	ecbd 8b02 	vpop	{d8}
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7fa fb86 	bl	8000b6c <__aeabi_dcmpun>
 8006460:	b140      	cbz	r0, 8006474 <_printf_float+0xec>
 8006462:	464b      	mov	r3, r9
 8006464:	2b00      	cmp	r3, #0
 8006466:	bfbc      	itt	lt
 8006468:	232d      	movlt	r3, #45	; 0x2d
 800646a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800646e:	4a7f      	ldr	r2, [pc, #508]	; (800666c <_printf_float+0x2e4>)
 8006470:	4b7f      	ldr	r3, [pc, #508]	; (8006670 <_printf_float+0x2e8>)
 8006472:	e7d1      	b.n	8006418 <_printf_float+0x90>
 8006474:	6863      	ldr	r3, [r4, #4]
 8006476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800647a:	9206      	str	r2, [sp, #24]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	d13f      	bne.n	8006500 <_printf_float+0x178>
 8006480:	2306      	movs	r3, #6
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	9b05      	ldr	r3, [sp, #20]
 8006486:	6861      	ldr	r1, [r4, #4]
 8006488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	ab0a      	add	r3, sp, #40	; 0x28
 8006492:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006496:	ab09      	add	r3, sp, #36	; 0x24
 8006498:	ec49 8b10 	vmov	d0, r8, r9
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064a4:	4628      	mov	r0, r5
 80064a6:	f7ff fecf 	bl	8006248 <__cvt>
 80064aa:	9b06      	ldr	r3, [sp, #24]
 80064ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ae:	2b47      	cmp	r3, #71	; 0x47
 80064b0:	4680      	mov	r8, r0
 80064b2:	d108      	bne.n	80064c6 <_printf_float+0x13e>
 80064b4:	1cc8      	adds	r0, r1, #3
 80064b6:	db02      	blt.n	80064be <_printf_float+0x136>
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	4299      	cmp	r1, r3
 80064bc:	dd41      	ble.n	8006542 <_printf_float+0x1ba>
 80064be:	f1ab 0302 	sub.w	r3, fp, #2
 80064c2:	fa5f fb83 	uxtb.w	fp, r3
 80064c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064ca:	d820      	bhi.n	800650e <_printf_float+0x186>
 80064cc:	3901      	subs	r1, #1
 80064ce:	465a      	mov	r2, fp
 80064d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064d4:	9109      	str	r1, [sp, #36]	; 0x24
 80064d6:	f7ff ff19 	bl	800630c <__exponent>
 80064da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064dc:	1813      	adds	r3, r2, r0
 80064de:	2a01      	cmp	r2, #1
 80064e0:	4681      	mov	r9, r0
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	dc02      	bgt.n	80064ec <_printf_float+0x164>
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	07d2      	lsls	r2, r2, #31
 80064ea:	d501      	bpl.n	80064f0 <_printf_float+0x168>
 80064ec:	3301      	adds	r3, #1
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d09c      	beq.n	8006432 <_printf_float+0xaa>
 80064f8:	232d      	movs	r3, #45	; 0x2d
 80064fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fe:	e798      	b.n	8006432 <_printf_float+0xaa>
 8006500:	9a06      	ldr	r2, [sp, #24]
 8006502:	2a47      	cmp	r2, #71	; 0x47
 8006504:	d1be      	bne.n	8006484 <_printf_float+0xfc>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1bc      	bne.n	8006484 <_printf_float+0xfc>
 800650a:	2301      	movs	r3, #1
 800650c:	e7b9      	b.n	8006482 <_printf_float+0xfa>
 800650e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006512:	d118      	bne.n	8006546 <_printf_float+0x1be>
 8006514:	2900      	cmp	r1, #0
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	dd0b      	ble.n	8006532 <_printf_float+0x1aa>
 800651a:	6121      	str	r1, [r4, #16]
 800651c:	b913      	cbnz	r3, 8006524 <_printf_float+0x19c>
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	07d0      	lsls	r0, r2, #31
 8006522:	d502      	bpl.n	800652a <_printf_float+0x1a2>
 8006524:	3301      	adds	r3, #1
 8006526:	440b      	add	r3, r1
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	65a1      	str	r1, [r4, #88]	; 0x58
 800652c:	f04f 0900 	mov.w	r9, #0
 8006530:	e7de      	b.n	80064f0 <_printf_float+0x168>
 8006532:	b913      	cbnz	r3, 800653a <_printf_float+0x1b2>
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	07d2      	lsls	r2, r2, #31
 8006538:	d501      	bpl.n	800653e <_printf_float+0x1b6>
 800653a:	3302      	adds	r3, #2
 800653c:	e7f4      	b.n	8006528 <_printf_float+0x1a0>
 800653e:	2301      	movs	r3, #1
 8006540:	e7f2      	b.n	8006528 <_printf_float+0x1a0>
 8006542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006548:	4299      	cmp	r1, r3
 800654a:	db05      	blt.n	8006558 <_printf_float+0x1d0>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	6121      	str	r1, [r4, #16]
 8006550:	07d8      	lsls	r0, r3, #31
 8006552:	d5ea      	bpl.n	800652a <_printf_float+0x1a2>
 8006554:	1c4b      	adds	r3, r1, #1
 8006556:	e7e7      	b.n	8006528 <_printf_float+0x1a0>
 8006558:	2900      	cmp	r1, #0
 800655a:	bfd4      	ite	le
 800655c:	f1c1 0202 	rsble	r2, r1, #2
 8006560:	2201      	movgt	r2, #1
 8006562:	4413      	add	r3, r2
 8006564:	e7e0      	b.n	8006528 <_printf_float+0x1a0>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	055a      	lsls	r2, r3, #21
 800656a:	d407      	bmi.n	800657c <_printf_float+0x1f4>
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	4642      	mov	r2, r8
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	d12c      	bne.n	80065d4 <_printf_float+0x24c>
 800657a:	e764      	b.n	8006446 <_printf_float+0xbe>
 800657c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006580:	f240 80e0 	bls.w	8006744 <_printf_float+0x3bc>
 8006584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	f7fa fabc 	bl	8000b08 <__aeabi_dcmpeq>
 8006590:	2800      	cmp	r0, #0
 8006592:	d034      	beq.n	80065fe <_printf_float+0x276>
 8006594:	4a37      	ldr	r2, [pc, #220]	; (8006674 <_printf_float+0x2ec>)
 8006596:	2301      	movs	r3, #1
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f af51 	beq.w	8006446 <_printf_float+0xbe>
 80065a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a8:	429a      	cmp	r2, r3
 80065aa:	db02      	blt.n	80065b2 <_printf_float+0x22a>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	07d8      	lsls	r0, r3, #31
 80065b0:	d510      	bpl.n	80065d4 <_printf_float+0x24c>
 80065b2:	ee18 3a10 	vmov	r3, s16
 80065b6:	4652      	mov	r2, sl
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f af41 	beq.w	8006446 <_printf_float+0xbe>
 80065c4:	f04f 0800 	mov.w	r8, #0
 80065c8:	f104 091a 	add.w	r9, r4, #26
 80065cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	4543      	cmp	r3, r8
 80065d2:	dc09      	bgt.n	80065e8 <_printf_float+0x260>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	079b      	lsls	r3, r3, #30
 80065d8:	f100 8107 	bmi.w	80067ea <_printf_float+0x462>
 80065dc:	68e0      	ldr	r0, [r4, #12]
 80065de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e0:	4298      	cmp	r0, r3
 80065e2:	bfb8      	it	lt
 80065e4:	4618      	movlt	r0, r3
 80065e6:	e730      	b.n	800644a <_printf_float+0xc2>
 80065e8:	2301      	movs	r3, #1
 80065ea:	464a      	mov	r2, r9
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af27 	beq.w	8006446 <_printf_float+0xbe>
 80065f8:	f108 0801 	add.w	r8, r8, #1
 80065fc:	e7e6      	b.n	80065cc <_printf_float+0x244>
 80065fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc39      	bgt.n	8006678 <_printf_float+0x2f0>
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <_printf_float+0x2ec>)
 8006606:	2301      	movs	r3, #1
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af19 	beq.w	8006446 <_printf_float+0xbe>
 8006614:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006618:	4313      	orrs	r3, r2
 800661a:	d102      	bne.n	8006622 <_printf_float+0x29a>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	07d9      	lsls	r1, r3, #31
 8006620:	d5d8      	bpl.n	80065d4 <_printf_float+0x24c>
 8006622:	ee18 3a10 	vmov	r3, s16
 8006626:	4652      	mov	r2, sl
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af09 	beq.w	8006446 <_printf_float+0xbe>
 8006634:	f04f 0900 	mov.w	r9, #0
 8006638:	f104 0a1a 	add.w	sl, r4, #26
 800663c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663e:	425b      	negs	r3, r3
 8006640:	454b      	cmp	r3, r9
 8006642:	dc01      	bgt.n	8006648 <_printf_float+0x2c0>
 8006644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006646:	e792      	b.n	800656e <_printf_float+0x1e6>
 8006648:	2301      	movs	r3, #1
 800664a:	4652      	mov	r2, sl
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f aef7 	beq.w	8006446 <_printf_float+0xbe>
 8006658:	f109 0901 	add.w	r9, r9, #1
 800665c:	e7ee      	b.n	800663c <_printf_float+0x2b4>
 800665e:	bf00      	nop
 8006660:	7fefffff 	.word	0x7fefffff
 8006664:	080090e0 	.word	0x080090e0
 8006668:	080090e4 	.word	0x080090e4
 800666c:	080090e8 	.word	0x080090e8
 8006670:	080090ec 	.word	0x080090ec
 8006674:	080090f0 	.word	0x080090f0
 8006678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800667a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800667c:	429a      	cmp	r2, r3
 800667e:	bfa8      	it	ge
 8006680:	461a      	movge	r2, r3
 8006682:	2a00      	cmp	r2, #0
 8006684:	4691      	mov	r9, r2
 8006686:	dc37      	bgt.n	80066f8 <_printf_float+0x370>
 8006688:	f04f 0b00 	mov.w	fp, #0
 800668c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006690:	f104 021a 	add.w	r2, r4, #26
 8006694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006696:	9305      	str	r3, [sp, #20]
 8006698:	eba3 0309 	sub.w	r3, r3, r9
 800669c:	455b      	cmp	r3, fp
 800669e:	dc33      	bgt.n	8006708 <_printf_float+0x380>
 80066a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a4:	429a      	cmp	r2, r3
 80066a6:	db3b      	blt.n	8006720 <_printf_float+0x398>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07da      	lsls	r2, r3, #31
 80066ac:	d438      	bmi.n	8006720 <_printf_float+0x398>
 80066ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066b2:	eba2 0903 	sub.w	r9, r2, r3
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	1ad2      	subs	r2, r2, r3
 80066ba:	4591      	cmp	r9, r2
 80066bc:	bfa8      	it	ge
 80066be:	4691      	movge	r9, r2
 80066c0:	f1b9 0f00 	cmp.w	r9, #0
 80066c4:	dc35      	bgt.n	8006732 <_printf_float+0x3aa>
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ce:	f104 0a1a 	add.w	sl, r4, #26
 80066d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	eba3 0309 	sub.w	r3, r3, r9
 80066dc:	4543      	cmp	r3, r8
 80066de:	f77f af79 	ble.w	80065d4 <_printf_float+0x24c>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f aeaa 	beq.w	8006446 <_printf_float+0xbe>
 80066f2:	f108 0801 	add.w	r8, r8, #1
 80066f6:	e7ec      	b.n	80066d2 <_printf_float+0x34a>
 80066f8:	4613      	mov	r3, r2
 80066fa:	4631      	mov	r1, r6
 80066fc:	4642      	mov	r2, r8
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	d1c0      	bne.n	8006688 <_printf_float+0x300>
 8006706:	e69e      	b.n	8006446 <_printf_float+0xbe>
 8006708:	2301      	movs	r3, #1
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	9205      	str	r2, [sp, #20]
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f ae97 	beq.w	8006446 <_printf_float+0xbe>
 8006718:	9a05      	ldr	r2, [sp, #20]
 800671a:	f10b 0b01 	add.w	fp, fp, #1
 800671e:	e7b9      	b.n	8006694 <_printf_float+0x30c>
 8006720:	ee18 3a10 	vmov	r3, s16
 8006724:	4652      	mov	r2, sl
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	d1be      	bne.n	80066ae <_printf_float+0x326>
 8006730:	e689      	b.n	8006446 <_printf_float+0xbe>
 8006732:	9a05      	ldr	r2, [sp, #20]
 8006734:	464b      	mov	r3, r9
 8006736:	4442      	add	r2, r8
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	d1c1      	bne.n	80066c6 <_printf_float+0x33e>
 8006742:	e680      	b.n	8006446 <_printf_float+0xbe>
 8006744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006746:	2a01      	cmp	r2, #1
 8006748:	dc01      	bgt.n	800674e <_printf_float+0x3c6>
 800674a:	07db      	lsls	r3, r3, #31
 800674c:	d53a      	bpl.n	80067c4 <_printf_float+0x43c>
 800674e:	2301      	movs	r3, #1
 8006750:	4642      	mov	r2, r8
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	f43f ae74 	beq.w	8006446 <_printf_float+0xbe>
 800675e:	ee18 3a10 	vmov	r3, s16
 8006762:	4652      	mov	r2, sl
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f ae6b 	beq.w	8006446 <_printf_float+0xbe>
 8006770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006774:	2200      	movs	r2, #0
 8006776:	2300      	movs	r3, #0
 8006778:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800677c:	f7fa f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 8006780:	b9d8      	cbnz	r0, 80067ba <_printf_float+0x432>
 8006782:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006786:	f108 0201 	add.w	r2, r8, #1
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	d10e      	bne.n	80067b2 <_printf_float+0x42a>
 8006794:	e657      	b.n	8006446 <_printf_float+0xbe>
 8006796:	2301      	movs	r3, #1
 8006798:	4652      	mov	r2, sl
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f ae50 	beq.w	8006446 <_printf_float+0xbe>
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ac:	3b01      	subs	r3, #1
 80067ae:	4543      	cmp	r3, r8
 80067b0:	dcf1      	bgt.n	8006796 <_printf_float+0x40e>
 80067b2:	464b      	mov	r3, r9
 80067b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067b8:	e6da      	b.n	8006570 <_printf_float+0x1e8>
 80067ba:	f04f 0800 	mov.w	r8, #0
 80067be:	f104 0a1a 	add.w	sl, r4, #26
 80067c2:	e7f2      	b.n	80067aa <_printf_float+0x422>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4642      	mov	r2, r8
 80067c8:	e7df      	b.n	800678a <_printf_float+0x402>
 80067ca:	2301      	movs	r3, #1
 80067cc:	464a      	mov	r2, r9
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	f43f ae36 	beq.w	8006446 <_printf_float+0xbe>
 80067da:	f108 0801 	add.w	r8, r8, #1
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067e2:	1a5b      	subs	r3, r3, r1
 80067e4:	4543      	cmp	r3, r8
 80067e6:	dcf0      	bgt.n	80067ca <_printf_float+0x442>
 80067e8:	e6f8      	b.n	80065dc <_printf_float+0x254>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	f104 0919 	add.w	r9, r4, #25
 80067f2:	e7f4      	b.n	80067de <_printf_float+0x456>

080067f4 <_printf_common>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	4616      	mov	r6, r2
 80067fa:	4699      	mov	r9, r3
 80067fc:	688a      	ldr	r2, [r1, #8]
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006804:	4293      	cmp	r3, r2
 8006806:	bfb8      	it	lt
 8006808:	4613      	movlt	r3, r2
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006810:	4607      	mov	r7, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b10a      	cbz	r2, 800681a <_printf_common+0x26>
 8006816:	3301      	adds	r3, #1
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	0699      	lsls	r1, r3, #26
 800681e:	bf42      	ittt	mi
 8006820:	6833      	ldrmi	r3, [r6, #0]
 8006822:	3302      	addmi	r3, #2
 8006824:	6033      	strmi	r3, [r6, #0]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	f015 0506 	ands.w	r5, r5, #6
 800682c:	d106      	bne.n	800683c <_printf_common+0x48>
 800682e:	f104 0a19 	add.w	sl, r4, #25
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	6832      	ldr	r2, [r6, #0]
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	42ab      	cmp	r3, r5
 800683a:	dc26      	bgt.n	800688a <_printf_common+0x96>
 800683c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006840:	1e13      	subs	r3, r2, #0
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	bf18      	it	ne
 8006846:	2301      	movne	r3, #1
 8006848:	0692      	lsls	r2, r2, #26
 800684a:	d42b      	bmi.n	80068a4 <_printf_common+0xb0>
 800684c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006850:	4649      	mov	r1, r9
 8006852:	4638      	mov	r0, r7
 8006854:	47c0      	blx	r8
 8006856:	3001      	adds	r0, #1
 8006858:	d01e      	beq.n	8006898 <_printf_common+0xa4>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	f003 0306 	and.w	r3, r3, #6
 8006862:	2b04      	cmp	r3, #4
 8006864:	bf02      	ittt	eq
 8006866:	68e5      	ldreq	r5, [r4, #12]
 8006868:	6833      	ldreq	r3, [r6, #0]
 800686a:	1aed      	subeq	r5, r5, r3
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	bf0c      	ite	eq
 8006870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006874:	2500      	movne	r5, #0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfc4      	itt	gt
 800687a:	1a9b      	subgt	r3, r3, r2
 800687c:	18ed      	addgt	r5, r5, r3
 800687e:	2600      	movs	r6, #0
 8006880:	341a      	adds	r4, #26
 8006882:	42b5      	cmp	r5, r6
 8006884:	d11a      	bne.n	80068bc <_printf_common+0xc8>
 8006886:	2000      	movs	r0, #0
 8006888:	e008      	b.n	800689c <_printf_common+0xa8>
 800688a:	2301      	movs	r3, #1
 800688c:	4652      	mov	r2, sl
 800688e:	4649      	mov	r1, r9
 8006890:	4638      	mov	r0, r7
 8006892:	47c0      	blx	r8
 8006894:	3001      	adds	r0, #1
 8006896:	d103      	bne.n	80068a0 <_printf_common+0xac>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	3501      	adds	r5, #1
 80068a2:	e7c6      	b.n	8006832 <_printf_common+0x3e>
 80068a4:	18e1      	adds	r1, r4, r3
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	2030      	movs	r0, #48	; 0x30
 80068aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ae:	4422      	add	r2, r4
 80068b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068b8:	3302      	adds	r3, #2
 80068ba:	e7c7      	b.n	800684c <_printf_common+0x58>
 80068bc:	2301      	movs	r3, #1
 80068be:	4622      	mov	r2, r4
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d0e6      	beq.n	8006898 <_printf_common+0xa4>
 80068ca:	3601      	adds	r6, #1
 80068cc:	e7d9      	b.n	8006882 <_printf_common+0x8e>
	...

080068d0 <_printf_i>:
 80068d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	7e0f      	ldrb	r7, [r1, #24]
 80068d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068d8:	2f78      	cmp	r7, #120	; 0x78
 80068da:	4691      	mov	r9, r2
 80068dc:	4680      	mov	r8, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	469a      	mov	sl, r3
 80068e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068e6:	d807      	bhi.n	80068f8 <_printf_i+0x28>
 80068e8:	2f62      	cmp	r7, #98	; 0x62
 80068ea:	d80a      	bhi.n	8006902 <_printf_i+0x32>
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	f000 80d4 	beq.w	8006a9a <_printf_i+0x1ca>
 80068f2:	2f58      	cmp	r7, #88	; 0x58
 80068f4:	f000 80c0 	beq.w	8006a78 <_printf_i+0x1a8>
 80068f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006900:	e03a      	b.n	8006978 <_printf_i+0xa8>
 8006902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006906:	2b15      	cmp	r3, #21
 8006908:	d8f6      	bhi.n	80068f8 <_printf_i+0x28>
 800690a:	a101      	add	r1, pc, #4	; (adr r1, 8006910 <_printf_i+0x40>)
 800690c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006910:	08006969 	.word	0x08006969
 8006914:	0800697d 	.word	0x0800697d
 8006918:	080068f9 	.word	0x080068f9
 800691c:	080068f9 	.word	0x080068f9
 8006920:	080068f9 	.word	0x080068f9
 8006924:	080068f9 	.word	0x080068f9
 8006928:	0800697d 	.word	0x0800697d
 800692c:	080068f9 	.word	0x080068f9
 8006930:	080068f9 	.word	0x080068f9
 8006934:	080068f9 	.word	0x080068f9
 8006938:	080068f9 	.word	0x080068f9
 800693c:	08006a81 	.word	0x08006a81
 8006940:	080069a9 	.word	0x080069a9
 8006944:	08006a3b 	.word	0x08006a3b
 8006948:	080068f9 	.word	0x080068f9
 800694c:	080068f9 	.word	0x080068f9
 8006950:	08006aa3 	.word	0x08006aa3
 8006954:	080068f9 	.word	0x080068f9
 8006958:	080069a9 	.word	0x080069a9
 800695c:	080068f9 	.word	0x080068f9
 8006960:	080068f9 	.word	0x080068f9
 8006964:	08006a43 	.word	0x08006a43
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	602a      	str	r2, [r5, #0]
 8006970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006978:	2301      	movs	r3, #1
 800697a:	e09f      	b.n	8006abc <_printf_i+0x1ec>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	0607      	lsls	r7, r0, #24
 8006982:	f103 0104 	add.w	r1, r3, #4
 8006986:	6029      	str	r1, [r5, #0]
 8006988:	d501      	bpl.n	800698e <_printf_i+0xbe>
 800698a:	681e      	ldr	r6, [r3, #0]
 800698c:	e003      	b.n	8006996 <_printf_i+0xc6>
 800698e:	0646      	lsls	r6, r0, #25
 8006990:	d5fb      	bpl.n	800698a <_printf_i+0xba>
 8006992:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006996:	2e00      	cmp	r6, #0
 8006998:	da03      	bge.n	80069a2 <_printf_i+0xd2>
 800699a:	232d      	movs	r3, #45	; 0x2d
 800699c:	4276      	negs	r6, r6
 800699e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a2:	485a      	ldr	r0, [pc, #360]	; (8006b0c <_printf_i+0x23c>)
 80069a4:	230a      	movs	r3, #10
 80069a6:	e012      	b.n	80069ce <_printf_i+0xfe>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	1d19      	adds	r1, r3, #4
 80069ae:	6029      	str	r1, [r5, #0]
 80069b0:	0605      	lsls	r5, r0, #24
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0xe8>
 80069b4:	681e      	ldr	r6, [r3, #0]
 80069b6:	e002      	b.n	80069be <_printf_i+0xee>
 80069b8:	0641      	lsls	r1, r0, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0xe4>
 80069bc:	881e      	ldrh	r6, [r3, #0]
 80069be:	4853      	ldr	r0, [pc, #332]	; (8006b0c <_printf_i+0x23c>)
 80069c0:	2f6f      	cmp	r7, #111	; 0x6f
 80069c2:	bf0c      	ite	eq
 80069c4:	2308      	moveq	r3, #8
 80069c6:	230a      	movne	r3, #10
 80069c8:	2100      	movs	r1, #0
 80069ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ce:	6865      	ldr	r5, [r4, #4]
 80069d0:	60a5      	str	r5, [r4, #8]
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	bfa2      	ittt	ge
 80069d6:	6821      	ldrge	r1, [r4, #0]
 80069d8:	f021 0104 	bicge.w	r1, r1, #4
 80069dc:	6021      	strge	r1, [r4, #0]
 80069de:	b90e      	cbnz	r6, 80069e4 <_printf_i+0x114>
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	d04b      	beq.n	8006a7c <_printf_i+0x1ac>
 80069e4:	4615      	mov	r5, r2
 80069e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ea:	fb03 6711 	mls	r7, r3, r1, r6
 80069ee:	5dc7      	ldrb	r7, [r0, r7]
 80069f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069f4:	4637      	mov	r7, r6
 80069f6:	42bb      	cmp	r3, r7
 80069f8:	460e      	mov	r6, r1
 80069fa:	d9f4      	bls.n	80069e6 <_printf_i+0x116>
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d10b      	bne.n	8006a18 <_printf_i+0x148>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	07de      	lsls	r6, r3, #31
 8006a04:	d508      	bpl.n	8006a18 <_printf_i+0x148>
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6861      	ldr	r1, [r4, #4]
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	bfde      	ittt	le
 8006a0e:	2330      	movle	r3, #48	; 0x30
 8006a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a18:	1b52      	subs	r2, r2, r5
 8006a1a:	6122      	str	r2, [r4, #16]
 8006a1c:	f8cd a000 	str.w	sl, [sp]
 8006a20:	464b      	mov	r3, r9
 8006a22:	aa03      	add	r2, sp, #12
 8006a24:	4621      	mov	r1, r4
 8006a26:	4640      	mov	r0, r8
 8006a28:	f7ff fee4 	bl	80067f4 <_printf_common>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d14a      	bne.n	8006ac6 <_printf_i+0x1f6>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	b004      	add	sp, #16
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f043 0320 	orr.w	r3, r3, #32
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	4833      	ldr	r0, [pc, #204]	; (8006b10 <_printf_i+0x240>)
 8006a44:	2778      	movs	r7, #120	; 0x78
 8006a46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	6829      	ldr	r1, [r5, #0]
 8006a4e:	061f      	lsls	r7, r3, #24
 8006a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a54:	d402      	bmi.n	8006a5c <_printf_i+0x18c>
 8006a56:	065f      	lsls	r7, r3, #25
 8006a58:	bf48      	it	mi
 8006a5a:	b2b6      	uxthmi	r6, r6
 8006a5c:	07df      	lsls	r7, r3, #31
 8006a5e:	bf48      	it	mi
 8006a60:	f043 0320 	orrmi.w	r3, r3, #32
 8006a64:	6029      	str	r1, [r5, #0]
 8006a66:	bf48      	it	mi
 8006a68:	6023      	strmi	r3, [r4, #0]
 8006a6a:	b91e      	cbnz	r6, 8006a74 <_printf_i+0x1a4>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	f023 0320 	bic.w	r3, r3, #32
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	2310      	movs	r3, #16
 8006a76:	e7a7      	b.n	80069c8 <_printf_i+0xf8>
 8006a78:	4824      	ldr	r0, [pc, #144]	; (8006b0c <_printf_i+0x23c>)
 8006a7a:	e7e4      	b.n	8006a46 <_printf_i+0x176>
 8006a7c:	4615      	mov	r5, r2
 8006a7e:	e7bd      	b.n	80069fc <_printf_i+0x12c>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	6826      	ldr	r6, [r4, #0]
 8006a84:	6961      	ldr	r1, [r4, #20]
 8006a86:	1d18      	adds	r0, r3, #4
 8006a88:	6028      	str	r0, [r5, #0]
 8006a8a:	0635      	lsls	r5, r6, #24
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	d501      	bpl.n	8006a94 <_printf_i+0x1c4>
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <_printf_i+0x1ca>
 8006a94:	0670      	lsls	r0, r6, #25
 8006a96:	d5fb      	bpl.n	8006a90 <_printf_i+0x1c0>
 8006a98:	8019      	strh	r1, [r3, #0]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	4615      	mov	r5, r2
 8006aa0:	e7bc      	b.n	8006a1c <_printf_i+0x14c>
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	1d1a      	adds	r2, r3, #4
 8006aa6:	602a      	str	r2, [r5, #0]
 8006aa8:	681d      	ldr	r5, [r3, #0]
 8006aaa:	6862      	ldr	r2, [r4, #4]
 8006aac:	2100      	movs	r1, #0
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7f9 fbae 	bl	8000210 <memchr>
 8006ab4:	b108      	cbz	r0, 8006aba <_printf_i+0x1ea>
 8006ab6:	1b40      	subs	r0, r0, r5
 8006ab8:	6060      	str	r0, [r4, #4]
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	6123      	str	r3, [r4, #16]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac4:	e7aa      	b.n	8006a1c <_printf_i+0x14c>
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d0ad      	beq.n	8006a30 <_printf_i+0x160>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	079b      	lsls	r3, r3, #30
 8006ad8:	d413      	bmi.n	8006b02 <_printf_i+0x232>
 8006ada:	68e0      	ldr	r0, [r4, #12]
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	4298      	cmp	r0, r3
 8006ae0:	bfb8      	it	lt
 8006ae2:	4618      	movlt	r0, r3
 8006ae4:	e7a6      	b.n	8006a34 <_printf_i+0x164>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4632      	mov	r2, r6
 8006aea:	4649      	mov	r1, r9
 8006aec:	4640      	mov	r0, r8
 8006aee:	47d0      	blx	sl
 8006af0:	3001      	adds	r0, #1
 8006af2:	d09d      	beq.n	8006a30 <_printf_i+0x160>
 8006af4:	3501      	adds	r5, #1
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	9903      	ldr	r1, [sp, #12]
 8006afa:	1a5b      	subs	r3, r3, r1
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	dcf2      	bgt.n	8006ae6 <_printf_i+0x216>
 8006b00:	e7eb      	b.n	8006ada <_printf_i+0x20a>
 8006b02:	2500      	movs	r5, #0
 8006b04:	f104 0619 	add.w	r6, r4, #25
 8006b08:	e7f5      	b.n	8006af6 <_printf_i+0x226>
 8006b0a:	bf00      	nop
 8006b0c:	080090f2 	.word	0x080090f2
 8006b10:	08009103 	.word	0x08009103

08006b14 <std>:
 8006b14:	2300      	movs	r3, #0
 8006b16:	b510      	push	{r4, lr}
 8006b18:	4604      	mov	r4, r0
 8006b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b22:	6083      	str	r3, [r0, #8]
 8006b24:	8181      	strh	r1, [r0, #12]
 8006b26:	6643      	str	r3, [r0, #100]	; 0x64
 8006b28:	81c2      	strh	r2, [r0, #14]
 8006b2a:	6183      	str	r3, [r0, #24]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	2208      	movs	r2, #8
 8006b30:	305c      	adds	r0, #92	; 0x5c
 8006b32:	f000 f906 	bl	8006d42 <memset>
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <std+0x58>)
 8006b38:	6263      	str	r3, [r4, #36]	; 0x24
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <std+0x5c>)
 8006b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <std+0x60>)
 8006b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <std+0x64>)
 8006b44:	6323      	str	r3, [r4, #48]	; 0x30
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <std+0x68>)
 8006b48:	6224      	str	r4, [r4, #32]
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	d006      	beq.n	8006b5c <std+0x48>
 8006b4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b52:	4294      	cmp	r4, r2
 8006b54:	d002      	beq.n	8006b5c <std+0x48>
 8006b56:	33d0      	adds	r3, #208	; 0xd0
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d105      	bne.n	8006b68 <std+0x54>
 8006b5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b64:	f000 b96a 	b.w	8006e3c <__retarget_lock_init_recursive>
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	bf00      	nop
 8006b6c:	08006cbd 	.word	0x08006cbd
 8006b70:	08006cdf 	.word	0x08006cdf
 8006b74:	08006d17 	.word	0x08006d17
 8006b78:	08006d3b 	.word	0x08006d3b
 8006b7c:	20000560 	.word	0x20000560

08006b80 <stdio_exit_handler>:
 8006b80:	4a02      	ldr	r2, [pc, #8]	; (8006b8c <stdio_exit_handler+0xc>)
 8006b82:	4903      	ldr	r1, [pc, #12]	; (8006b90 <stdio_exit_handler+0x10>)
 8006b84:	4803      	ldr	r0, [pc, #12]	; (8006b94 <stdio_exit_handler+0x14>)
 8006b86:	f000 b869 	b.w	8006c5c <_fwalk_sglue>
 8006b8a:	bf00      	nop
 8006b8c:	200000a0 	.word	0x200000a0
 8006b90:	080087c9 	.word	0x080087c9
 8006b94:	200000ac 	.word	0x200000ac

08006b98 <cleanup_stdio>:
 8006b98:	6841      	ldr	r1, [r0, #4]
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <cleanup_stdio+0x34>)
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	d001      	beq.n	8006ba8 <cleanup_stdio+0x10>
 8006ba4:	f001 fe10 	bl	80087c8 <_fflush_r>
 8006ba8:	68a1      	ldr	r1, [r4, #8]
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <cleanup_stdio+0x38>)
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d002      	beq.n	8006bb6 <cleanup_stdio+0x1e>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f001 fe09 	bl	80087c8 <_fflush_r>
 8006bb6:	68e1      	ldr	r1, [r4, #12]
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <cleanup_stdio+0x3c>)
 8006bba:	4299      	cmp	r1, r3
 8006bbc:	d004      	beq.n	8006bc8 <cleanup_stdio+0x30>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc4:	f001 be00 	b.w	80087c8 <_fflush_r>
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000560 	.word	0x20000560
 8006bd0:	200005c8 	.word	0x200005c8
 8006bd4:	20000630 	.word	0x20000630

08006bd8 <global_stdio_init.part.0>:
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <global_stdio_init.part.0+0x30>)
 8006bdc:	4c0b      	ldr	r4, [pc, #44]	; (8006c0c <global_stdio_init.part.0+0x34>)
 8006bde:	4a0c      	ldr	r2, [pc, #48]	; (8006c10 <global_stdio_init.part.0+0x38>)
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	4620      	mov	r0, r4
 8006be4:	2200      	movs	r2, #0
 8006be6:	2104      	movs	r1, #4
 8006be8:	f7ff ff94 	bl	8006b14 <std>
 8006bec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	2109      	movs	r1, #9
 8006bf4:	f7ff ff8e 	bl	8006b14 <std>
 8006bf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c02:	2112      	movs	r1, #18
 8006c04:	f7ff bf86 	b.w	8006b14 <std>
 8006c08:	20000698 	.word	0x20000698
 8006c0c:	20000560 	.word	0x20000560
 8006c10:	08006b81 	.word	0x08006b81

08006c14 <__sfp_lock_acquire>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sfp_lock_acquire+0x8>)
 8006c16:	f000 b912 	b.w	8006e3e <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	200006a1 	.word	0x200006a1

08006c20 <__sfp_lock_release>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_release+0x8>)
 8006c22:	f000 b90d 	b.w	8006e40 <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	200006a1 	.word	0x200006a1

08006c2c <__sinit>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f7ff fff0 	bl	8006c14 <__sfp_lock_acquire>
 8006c34:	6a23      	ldr	r3, [r4, #32]
 8006c36:	b11b      	cbz	r3, 8006c40 <__sinit+0x14>
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3c:	f7ff bff0 	b.w	8006c20 <__sfp_lock_release>
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <__sinit+0x28>)
 8006c42:	6223      	str	r3, [r4, #32]
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <__sinit+0x2c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f5      	bne.n	8006c38 <__sinit+0xc>
 8006c4c:	f7ff ffc4 	bl	8006bd8 <global_stdio_init.part.0>
 8006c50:	e7f2      	b.n	8006c38 <__sinit+0xc>
 8006c52:	bf00      	nop
 8006c54:	08006b99 	.word	0x08006b99
 8006c58:	20000698 	.word	0x20000698

08006c5c <_fwalk_sglue>:
 8006c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c60:	4607      	mov	r7, r0
 8006c62:	4688      	mov	r8, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	2600      	movs	r6, #0
 8006c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c70:	d505      	bpl.n	8006c7e <_fwalk_sglue+0x22>
 8006c72:	6824      	ldr	r4, [r4, #0]
 8006c74:	2c00      	cmp	r4, #0
 8006c76:	d1f7      	bne.n	8006c68 <_fwalk_sglue+0xc>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d907      	bls.n	8006c94 <_fwalk_sglue+0x38>
 8006c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	d003      	beq.n	8006c94 <_fwalk_sglue+0x38>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c0      	blx	r8
 8006c92:	4306      	orrs	r6, r0
 8006c94:	3568      	adds	r5, #104	; 0x68
 8006c96:	e7e9      	b.n	8006c6c <_fwalk_sglue+0x10>

08006c98 <iprintf>:
 8006c98:	b40f      	push	{r0, r1, r2, r3}
 8006c9a:	b507      	push	{r0, r1, r2, lr}
 8006c9c:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <iprintf+0x20>)
 8006c9e:	ab04      	add	r3, sp, #16
 8006ca0:	6808      	ldr	r0, [r1, #0]
 8006ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca6:	6881      	ldr	r1, [r0, #8]
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	f001 fbed 	bl	8008488 <_vfiprintf_r>
 8006cae:	b003      	add	sp, #12
 8006cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb4:	b004      	add	sp, #16
 8006cb6:	4770      	bx	lr
 8006cb8:	200000f8 	.word	0x200000f8

08006cbc <__sread>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	f000 f86c 	bl	8006da0 <_read_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	bfab      	itete	ge
 8006ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cce:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd0:	181b      	addge	r3, r3, r0
 8006cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cd6:	bfac      	ite	ge
 8006cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cda:	81a3      	strhlt	r3, [r4, #12]
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <__swrite>:
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	05db      	lsls	r3, r3, #23
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4616      	mov	r6, r2
 8006cee:	d505      	bpl.n	8006cfc <__swrite+0x1e>
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f000 f840 	bl	8006d7c <_lseek_r>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	f000 b857 	b.w	8006dc4 <_write_r>

08006d16 <__sseek>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 f82d 	bl	8006d7c <_lseek_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	bf15      	itete	ne
 8006d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d32:	81a3      	strheq	r3, [r4, #12]
 8006d34:	bf18      	it	ne
 8006d36:	81a3      	strhne	r3, [r4, #12]
 8006d38:	bd10      	pop	{r4, pc}

08006d3a <__sclose>:
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 b80d 	b.w	8006d5c <_close_r>

08006d42 <memset>:
 8006d42:	4402      	add	r2, r0
 8006d44:	4603      	mov	r3, r0
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d100      	bne.n	8006d4c <memset+0xa>
 8006d4a:	4770      	bx	lr
 8006d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d50:	e7f9      	b.n	8006d46 <memset+0x4>
	...

08006d54 <_localeconv_r>:
 8006d54:	4800      	ldr	r0, [pc, #0]	; (8006d58 <_localeconv_r+0x4>)
 8006d56:	4770      	bx	lr
 8006d58:	200001ec 	.word	0x200001ec

08006d5c <_close_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d06      	ldr	r5, [pc, #24]	; (8006d78 <_close_r+0x1c>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7fa ffc3 	bl	8001cf2 <_close>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_close_r+0x1a>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_close_r+0x1a>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	2000069c 	.word	0x2000069c

08006d7c <_lseek_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	; (8006d9c <_lseek_r+0x20>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f7fa ffd8 	bl	8001d40 <_lseek>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_lseek_r+0x1e>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_lseek_r+0x1e>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	2000069c 	.word	0x2000069c

08006da0 <_read_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d07      	ldr	r5, [pc, #28]	; (8006dc0 <_read_r+0x20>)
 8006da4:	4604      	mov	r4, r0
 8006da6:	4608      	mov	r0, r1
 8006da8:	4611      	mov	r1, r2
 8006daa:	2200      	movs	r2, #0
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f7fa ff82 	bl	8001cb8 <_read>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_read_r+0x1e>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_read_r+0x1e>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	2000069c 	.word	0x2000069c

08006dc4 <_write_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d07      	ldr	r5, [pc, #28]	; (8006de4 <_write_r+0x20>)
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	602a      	str	r2, [r5, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fa f8d6 	bl	8000f84 <_write>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_write_r+0x1e>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_write_r+0x1e>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	2000069c 	.word	0x2000069c

08006de8 <__errno>:
 8006de8:	4b01      	ldr	r3, [pc, #4]	; (8006df0 <__errno+0x8>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	200000f8 	.word	0x200000f8

08006df4 <__libc_init_array>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4d0d      	ldr	r5, [pc, #52]	; (8006e2c <__libc_init_array+0x38>)
 8006df8:	4c0d      	ldr	r4, [pc, #52]	; (8006e30 <__libc_init_array+0x3c>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	d109      	bne.n	8006e18 <__libc_init_array+0x24>
 8006e04:	4d0b      	ldr	r5, [pc, #44]	; (8006e34 <__libc_init_array+0x40>)
 8006e06:	4c0c      	ldr	r4, [pc, #48]	; (8006e38 <__libc_init_array+0x44>)
 8006e08:	f002 f940 	bl	800908c <_init>
 8006e0c:	1b64      	subs	r4, r4, r5
 8006e0e:	10a4      	asrs	r4, r4, #2
 8006e10:	2600      	movs	r6, #0
 8006e12:	42a6      	cmp	r6, r4
 8006e14:	d105      	bne.n	8006e22 <__libc_init_array+0x2e>
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1c:	4798      	blx	r3
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7ee      	b.n	8006e00 <__libc_init_array+0xc>
 8006e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e26:	4798      	blx	r3
 8006e28:	3601      	adds	r6, #1
 8006e2a:	e7f2      	b.n	8006e12 <__libc_init_array+0x1e>
 8006e2c:	08009490 	.word	0x08009490
 8006e30:	08009490 	.word	0x08009490
 8006e34:	08009490 	.word	0x08009490
 8006e38:	08009494 	.word	0x08009494

08006e3c <__retarget_lock_init_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <__retarget_lock_acquire_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <__retarget_lock_release_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <quorem>:
 8006e42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e46:	6903      	ldr	r3, [r0, #16]
 8006e48:	690c      	ldr	r4, [r1, #16]
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	db7e      	blt.n	8006f4e <quorem+0x10c>
 8006e50:	3c01      	subs	r4, #1
 8006e52:	f101 0814 	add.w	r8, r1, #20
 8006e56:	f100 0514 	add.w	r5, r0, #20
 8006e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e78:	d331      	bcc.n	8006ede <quorem+0x9c>
 8006e7a:	f04f 0e00 	mov.w	lr, #0
 8006e7e:	4640      	mov	r0, r8
 8006e80:	46ac      	mov	ip, r5
 8006e82:	46f2      	mov	sl, lr
 8006e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e88:	b293      	uxth	r3, r2
 8006e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8006e8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e92:	0c1a      	lsrs	r2, r3, #16
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ebaa 0303 	sub.w	r3, sl, r3
 8006e9a:	f8dc a000 	ldr.w	sl, [ip]
 8006e9e:	fa13 f38a 	uxtah	r3, r3, sl
 8006ea2:	fb06 220e 	mla	r2, r6, lr, r2
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	9b00      	ldr	r3, [sp, #0]
 8006eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eae:	b292      	uxth	r2, r2
 8006eb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006eb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ebc:	4581      	cmp	r9, r0
 8006ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8006ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006eca:	d2db      	bcs.n	8006e84 <quorem+0x42>
 8006ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ed0:	b92b      	cbnz	r3, 8006ede <quorem+0x9c>
 8006ed2:	9b01      	ldr	r3, [sp, #4]
 8006ed4:	3b04      	subs	r3, #4
 8006ed6:	429d      	cmp	r5, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	d32c      	bcc.n	8006f36 <quorem+0xf4>
 8006edc:	613c      	str	r4, [r7, #16]
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f001 f9a8 	bl	8008234 <__mcmp>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	db22      	blt.n	8006f2e <quorem+0xec>
 8006ee8:	3601      	adds	r6, #1
 8006eea:	4629      	mov	r1, r5
 8006eec:	2000      	movs	r0, #0
 8006eee:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ef2:	f8d1 c000 	ldr.w	ip, [r1]
 8006ef6:	b293      	uxth	r3, r2
 8006ef8:	1ac3      	subs	r3, r0, r3
 8006efa:	0c12      	lsrs	r2, r2, #16
 8006efc:	fa13 f38c 	uxtah	r3, r3, ip
 8006f00:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0e:	45c1      	cmp	r9, r8
 8006f10:	f841 3b04 	str.w	r3, [r1], #4
 8006f14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f18:	d2e9      	bcs.n	8006eee <quorem+0xac>
 8006f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f22:	b922      	cbnz	r2, 8006f2e <quorem+0xec>
 8006f24:	3b04      	subs	r3, #4
 8006f26:	429d      	cmp	r5, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	d30a      	bcc.n	8006f42 <quorem+0x100>
 8006f2c:	613c      	str	r4, [r7, #16]
 8006f2e:	4630      	mov	r0, r6
 8006f30:	b003      	add	sp, #12
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d1ce      	bne.n	8006edc <quorem+0x9a>
 8006f3e:	3c01      	subs	r4, #1
 8006f40:	e7c9      	b.n	8006ed6 <quorem+0x94>
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	3b04      	subs	r3, #4
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	d1f0      	bne.n	8006f2c <quorem+0xea>
 8006f4a:	3c01      	subs	r4, #1
 8006f4c:	e7eb      	b.n	8006f26 <quorem+0xe4>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e7ee      	b.n	8006f30 <quorem+0xee>
 8006f52:	0000      	movs	r0, r0
 8006f54:	0000      	movs	r0, r0
	...

08006f58 <_dtoa_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	ed2d 8b04 	vpush	{d8-d9}
 8006f60:	69c5      	ldr	r5, [r0, #28]
 8006f62:	b093      	sub	sp, #76	; 0x4c
 8006f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f68:	ec57 6b10 	vmov	r6, r7, d0
 8006f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f70:	9107      	str	r1, [sp, #28]
 8006f72:	4604      	mov	r4, r0
 8006f74:	920a      	str	r2, [sp, #40]	; 0x28
 8006f76:	930d      	str	r3, [sp, #52]	; 0x34
 8006f78:	b975      	cbnz	r5, 8006f98 <_dtoa_r+0x40>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f000 fe2a 	bl	8007bd4 <malloc>
 8006f80:	4602      	mov	r2, r0
 8006f82:	61e0      	str	r0, [r4, #28]
 8006f84:	b920      	cbnz	r0, 8006f90 <_dtoa_r+0x38>
 8006f86:	4bae      	ldr	r3, [pc, #696]	; (8007240 <_dtoa_r+0x2e8>)
 8006f88:	21ef      	movs	r1, #239	; 0xef
 8006f8a:	48ae      	ldr	r0, [pc, #696]	; (8007244 <_dtoa_r+0x2ec>)
 8006f8c:	f001 fcf8 	bl	8008980 <__assert_func>
 8006f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f94:	6005      	str	r5, [r0, #0]
 8006f96:	60c5      	str	r5, [r0, #12]
 8006f98:	69e3      	ldr	r3, [r4, #28]
 8006f9a:	6819      	ldr	r1, [r3, #0]
 8006f9c:	b151      	cbz	r1, 8006fb4 <_dtoa_r+0x5c>
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	604a      	str	r2, [r1, #4]
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4093      	lsls	r3, r2
 8006fa6:	608b      	str	r3, [r1, #8]
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 ff07 	bl	8007dbc <_Bfree>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	1e3b      	subs	r3, r7, #0
 8006fb6:	bfbb      	ittet	lt
 8006fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	9303      	strlt	r3, [sp, #12]
 8006fbe:	2300      	movge	r3, #0
 8006fc0:	2201      	movlt	r2, #1
 8006fc2:	bfac      	ite	ge
 8006fc4:	f8c8 3000 	strge.w	r3, [r8]
 8006fc8:	f8c8 2000 	strlt.w	r2, [r8]
 8006fcc:	4b9e      	ldr	r3, [pc, #632]	; (8007248 <_dtoa_r+0x2f0>)
 8006fce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006fd2:	ea33 0308 	bics.w	r3, r3, r8
 8006fd6:	d11b      	bne.n	8007010 <_dtoa_r+0xb8>
 8006fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006fe4:	4333      	orrs	r3, r6
 8006fe6:	f000 8593 	beq.w	8007b10 <_dtoa_r+0xbb8>
 8006fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fec:	b963      	cbnz	r3, 8007008 <_dtoa_r+0xb0>
 8006fee:	4b97      	ldr	r3, [pc, #604]	; (800724c <_dtoa_r+0x2f4>)
 8006ff0:	e027      	b.n	8007042 <_dtoa_r+0xea>
 8006ff2:	4b97      	ldr	r3, [pc, #604]	; (8007250 <_dtoa_r+0x2f8>)
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	9800      	ldr	r0, [sp, #0]
 8006ffe:	b013      	add	sp, #76	; 0x4c
 8007000:	ecbd 8b04 	vpop	{d8-d9}
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	4b90      	ldr	r3, [pc, #576]	; (800724c <_dtoa_r+0x2f4>)
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	3303      	adds	r3, #3
 800700e:	e7f3      	b.n	8006ff8 <_dtoa_r+0xa0>
 8007010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	ec51 0b17 	vmov	r0, r1, d7
 800701a:	eeb0 8a47 	vmov.f32	s16, s14
 800701e:	eef0 8a67 	vmov.f32	s17, s15
 8007022:	2300      	movs	r3, #0
 8007024:	f7f9 fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8007028:	4681      	mov	r9, r0
 800702a:	b160      	cbz	r0, 8007046 <_dtoa_r+0xee>
 800702c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800702e:	2301      	movs	r3, #1
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8568 	beq.w	8007b0a <_dtoa_r+0xbb2>
 800703a:	4b86      	ldr	r3, [pc, #536]	; (8007254 <_dtoa_r+0x2fc>)
 800703c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	e7da      	b.n	8006ffc <_dtoa_r+0xa4>
 8007046:	aa10      	add	r2, sp, #64	; 0x40
 8007048:	a911      	add	r1, sp, #68	; 0x44
 800704a:	4620      	mov	r0, r4
 800704c:	eeb0 0a48 	vmov.f32	s0, s16
 8007050:	eef0 0a68 	vmov.f32	s1, s17
 8007054:	f001 f994 	bl	8008380 <__d2b>
 8007058:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800705c:	4682      	mov	sl, r0
 800705e:	2d00      	cmp	r5, #0
 8007060:	d07f      	beq.n	8007162 <_dtoa_r+0x20a>
 8007062:	ee18 3a90 	vmov	r3, s17
 8007066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800706a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800706e:	ec51 0b18 	vmov	r0, r1, d8
 8007072:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800707a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800707e:	4619      	mov	r1, r3
 8007080:	2200      	movs	r2, #0
 8007082:	4b75      	ldr	r3, [pc, #468]	; (8007258 <_dtoa_r+0x300>)
 8007084:	f7f9 f920 	bl	80002c8 <__aeabi_dsub>
 8007088:	a367      	add	r3, pc, #412	; (adr r3, 8007228 <_dtoa_r+0x2d0>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 fad3 	bl	8000638 <__aeabi_dmul>
 8007092:	a367      	add	r3, pc, #412	; (adr r3, 8007230 <_dtoa_r+0x2d8>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 f918 	bl	80002cc <__adddf3>
 800709c:	4606      	mov	r6, r0
 800709e:	4628      	mov	r0, r5
 80070a0:	460f      	mov	r7, r1
 80070a2:	f7f9 fa5f 	bl	8000564 <__aeabi_i2d>
 80070a6:	a364      	add	r3, pc, #400	; (adr r3, 8007238 <_dtoa_r+0x2e0>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 fac4 	bl	8000638 <__aeabi_dmul>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 f908 	bl	80002cc <__adddf3>
 80070bc:	4606      	mov	r6, r0
 80070be:	460f      	mov	r7, r1
 80070c0:	f7f9 fd6a 	bl	8000b98 <__aeabi_d2iz>
 80070c4:	2200      	movs	r2, #0
 80070c6:	4683      	mov	fp, r0
 80070c8:	2300      	movs	r3, #0
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	f7f9 fd25 	bl	8000b1c <__aeabi_dcmplt>
 80070d2:	b148      	cbz	r0, 80070e8 <_dtoa_r+0x190>
 80070d4:	4658      	mov	r0, fp
 80070d6:	f7f9 fa45 	bl	8000564 <__aeabi_i2d>
 80070da:	4632      	mov	r2, r6
 80070dc:	463b      	mov	r3, r7
 80070de:	f7f9 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80070e2:	b908      	cbnz	r0, 80070e8 <_dtoa_r+0x190>
 80070e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070e8:	f1bb 0f16 	cmp.w	fp, #22
 80070ec:	d857      	bhi.n	800719e <_dtoa_r+0x246>
 80070ee:	4b5b      	ldr	r3, [pc, #364]	; (800725c <_dtoa_r+0x304>)
 80070f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	ec51 0b18 	vmov	r0, r1, d8
 80070fc:	f7f9 fd0e 	bl	8000b1c <__aeabi_dcmplt>
 8007100:	2800      	cmp	r0, #0
 8007102:	d04e      	beq.n	80071a2 <_dtoa_r+0x24a>
 8007104:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007108:	2300      	movs	r3, #0
 800710a:	930c      	str	r3, [sp, #48]	; 0x30
 800710c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800710e:	1b5b      	subs	r3, r3, r5
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	bf45      	ittet	mi
 8007114:	f1c3 0301 	rsbmi	r3, r3, #1
 8007118:	9305      	strmi	r3, [sp, #20]
 800711a:	2300      	movpl	r3, #0
 800711c:	2300      	movmi	r3, #0
 800711e:	9206      	str	r2, [sp, #24]
 8007120:	bf54      	ite	pl
 8007122:	9305      	strpl	r3, [sp, #20]
 8007124:	9306      	strmi	r3, [sp, #24]
 8007126:	f1bb 0f00 	cmp.w	fp, #0
 800712a:	db3c      	blt.n	80071a6 <_dtoa_r+0x24e>
 800712c:	9b06      	ldr	r3, [sp, #24]
 800712e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007132:	445b      	add	r3, fp
 8007134:	9306      	str	r3, [sp, #24]
 8007136:	2300      	movs	r3, #0
 8007138:	9308      	str	r3, [sp, #32]
 800713a:	9b07      	ldr	r3, [sp, #28]
 800713c:	2b09      	cmp	r3, #9
 800713e:	d868      	bhi.n	8007212 <_dtoa_r+0x2ba>
 8007140:	2b05      	cmp	r3, #5
 8007142:	bfc4      	itt	gt
 8007144:	3b04      	subgt	r3, #4
 8007146:	9307      	strgt	r3, [sp, #28]
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	f1a3 0302 	sub.w	r3, r3, #2
 800714e:	bfcc      	ite	gt
 8007150:	2500      	movgt	r5, #0
 8007152:	2501      	movle	r5, #1
 8007154:	2b03      	cmp	r3, #3
 8007156:	f200 8085 	bhi.w	8007264 <_dtoa_r+0x30c>
 800715a:	e8df f003 	tbb	[pc, r3]
 800715e:	3b2e      	.short	0x3b2e
 8007160:	5839      	.short	0x5839
 8007162:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007166:	441d      	add	r5, r3
 8007168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800716c:	2b20      	cmp	r3, #32
 800716e:	bfc1      	itttt	gt
 8007170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007174:	fa08 f803 	lslgt.w	r8, r8, r3
 8007178:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800717c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007180:	bfd6      	itet	le
 8007182:	f1c3 0320 	rsble	r3, r3, #32
 8007186:	ea48 0003 	orrgt.w	r0, r8, r3
 800718a:	fa06 f003 	lslle.w	r0, r6, r3
 800718e:	f7f9 f9d9 	bl	8000544 <__aeabi_ui2d>
 8007192:	2201      	movs	r2, #1
 8007194:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007198:	3d01      	subs	r5, #1
 800719a:	920e      	str	r2, [sp, #56]	; 0x38
 800719c:	e76f      	b.n	800707e <_dtoa_r+0x126>
 800719e:	2301      	movs	r3, #1
 80071a0:	e7b3      	b.n	800710a <_dtoa_r+0x1b2>
 80071a2:	900c      	str	r0, [sp, #48]	; 0x30
 80071a4:	e7b2      	b.n	800710c <_dtoa_r+0x1b4>
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	eba3 030b 	sub.w	r3, r3, fp
 80071ac:	9305      	str	r3, [sp, #20]
 80071ae:	f1cb 0300 	rsb	r3, fp, #0
 80071b2:	9308      	str	r3, [sp, #32]
 80071b4:	2300      	movs	r3, #0
 80071b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b8:	e7bf      	b.n	800713a <_dtoa_r+0x1e2>
 80071ba:	2300      	movs	r3, #0
 80071bc:	9309      	str	r3, [sp, #36]	; 0x24
 80071be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc52      	bgt.n	800726a <_dtoa_r+0x312>
 80071c4:	2301      	movs	r3, #1
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	461a      	mov	r2, r3
 80071cc:	920a      	str	r2, [sp, #40]	; 0x28
 80071ce:	e00b      	b.n	80071e8 <_dtoa_r+0x290>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e7f3      	b.n	80071bc <_dtoa_r+0x264>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9309      	str	r3, [sp, #36]	; 0x24
 80071d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071da:	445b      	add	r3, fp
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	bfb8      	it	lt
 80071e6:	2301      	movlt	r3, #1
 80071e8:	69e0      	ldr	r0, [r4, #28]
 80071ea:	2100      	movs	r1, #0
 80071ec:	2204      	movs	r2, #4
 80071ee:	f102 0614 	add.w	r6, r2, #20
 80071f2:	429e      	cmp	r6, r3
 80071f4:	d93d      	bls.n	8007272 <_dtoa_r+0x31a>
 80071f6:	6041      	str	r1, [r0, #4]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fd9f 	bl	8007d3c <_Balloc>
 80071fe:	9000      	str	r0, [sp, #0]
 8007200:	2800      	cmp	r0, #0
 8007202:	d139      	bne.n	8007278 <_dtoa_r+0x320>
 8007204:	4b16      	ldr	r3, [pc, #88]	; (8007260 <_dtoa_r+0x308>)
 8007206:	4602      	mov	r2, r0
 8007208:	f240 11af 	movw	r1, #431	; 0x1af
 800720c:	e6bd      	b.n	8006f8a <_dtoa_r+0x32>
 800720e:	2301      	movs	r3, #1
 8007210:	e7e1      	b.n	80071d6 <_dtoa_r+0x27e>
 8007212:	2501      	movs	r5, #1
 8007214:	2300      	movs	r3, #0
 8007216:	9307      	str	r3, [sp, #28]
 8007218:	9509      	str	r5, [sp, #36]	; 0x24
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	2200      	movs	r2, #0
 8007224:	2312      	movs	r3, #18
 8007226:	e7d1      	b.n	80071cc <_dtoa_r+0x274>
 8007228:	636f4361 	.word	0x636f4361
 800722c:	3fd287a7 	.word	0x3fd287a7
 8007230:	8b60c8b3 	.word	0x8b60c8b3
 8007234:	3fc68a28 	.word	0x3fc68a28
 8007238:	509f79fb 	.word	0x509f79fb
 800723c:	3fd34413 	.word	0x3fd34413
 8007240:	08009121 	.word	0x08009121
 8007244:	08009138 	.word	0x08009138
 8007248:	7ff00000 	.word	0x7ff00000
 800724c:	0800911d 	.word	0x0800911d
 8007250:	08009114 	.word	0x08009114
 8007254:	080090f1 	.word	0x080090f1
 8007258:	3ff80000 	.word	0x3ff80000
 800725c:	08009228 	.word	0x08009228
 8007260:	08009190 	.word	0x08009190
 8007264:	2301      	movs	r3, #1
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	e7d7      	b.n	800721a <_dtoa_r+0x2c2>
 800726a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	e7ba      	b.n	80071e8 <_dtoa_r+0x290>
 8007272:	3101      	adds	r1, #1
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	e7ba      	b.n	80071ee <_dtoa_r+0x296>
 8007278:	69e3      	ldr	r3, [r4, #28]
 800727a:	9a00      	ldr	r2, [sp, #0]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	2b0e      	cmp	r3, #14
 8007282:	f200 80a8 	bhi.w	80073d6 <_dtoa_r+0x47e>
 8007286:	2d00      	cmp	r5, #0
 8007288:	f000 80a5 	beq.w	80073d6 <_dtoa_r+0x47e>
 800728c:	f1bb 0f00 	cmp.w	fp, #0
 8007290:	dd38      	ble.n	8007304 <_dtoa_r+0x3ac>
 8007292:	4bc0      	ldr	r3, [pc, #768]	; (8007594 <_dtoa_r+0x63c>)
 8007294:	f00b 020f 	and.w	r2, fp, #15
 8007298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80072a8:	d019      	beq.n	80072de <_dtoa_r+0x386>
 80072aa:	4bbb      	ldr	r3, [pc, #748]	; (8007598 <_dtoa_r+0x640>)
 80072ac:	ec51 0b18 	vmov	r0, r1, d8
 80072b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072b4:	f7f9 faea 	bl	800088c <__aeabi_ddiv>
 80072b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072bc:	f008 080f 	and.w	r8, r8, #15
 80072c0:	2503      	movs	r5, #3
 80072c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007598 <_dtoa_r+0x640>
 80072c6:	f1b8 0f00 	cmp.w	r8, #0
 80072ca:	d10a      	bne.n	80072e2 <_dtoa_r+0x38a>
 80072cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	f7f9 fada 	bl	800088c <__aeabi_ddiv>
 80072d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072dc:	e02b      	b.n	8007336 <_dtoa_r+0x3de>
 80072de:	2502      	movs	r5, #2
 80072e0:	e7ef      	b.n	80072c2 <_dtoa_r+0x36a>
 80072e2:	f018 0f01 	tst.w	r8, #1
 80072e6:	d008      	beq.n	80072fa <_dtoa_r+0x3a2>
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072f0:	f7f9 f9a2 	bl	8000638 <__aeabi_dmul>
 80072f4:	3501      	adds	r5, #1
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80072fe:	f109 0908 	add.w	r9, r9, #8
 8007302:	e7e0      	b.n	80072c6 <_dtoa_r+0x36e>
 8007304:	f000 809f 	beq.w	8007446 <_dtoa_r+0x4ee>
 8007308:	f1cb 0600 	rsb	r6, fp, #0
 800730c:	4ba1      	ldr	r3, [pc, #644]	; (8007594 <_dtoa_r+0x63c>)
 800730e:	4fa2      	ldr	r7, [pc, #648]	; (8007598 <_dtoa_r+0x640>)
 8007310:	f006 020f 	and.w	r2, r6, #15
 8007314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	ec51 0b18 	vmov	r0, r1, d8
 8007320:	f7f9 f98a 	bl	8000638 <__aeabi_dmul>
 8007324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007328:	1136      	asrs	r6, r6, #4
 800732a:	2300      	movs	r3, #0
 800732c:	2502      	movs	r5, #2
 800732e:	2e00      	cmp	r6, #0
 8007330:	d17e      	bne.n	8007430 <_dtoa_r+0x4d8>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1d0      	bne.n	80072d8 <_dtoa_r+0x380>
 8007336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007338:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8084 	beq.w	800744a <_dtoa_r+0x4f2>
 8007342:	4b96      	ldr	r3, [pc, #600]	; (800759c <_dtoa_r+0x644>)
 8007344:	2200      	movs	r2, #0
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f7f9 fbe7 	bl	8000b1c <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d07b      	beq.n	800744a <_dtoa_r+0x4f2>
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d078      	beq.n	800744a <_dtoa_r+0x4f2>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dd39      	ble.n	80073d2 <_dtoa_r+0x47a>
 800735e:	4b90      	ldr	r3, [pc, #576]	; (80075a0 <_dtoa_r+0x648>)
 8007360:	2200      	movs	r2, #0
 8007362:	4640      	mov	r0, r8
 8007364:	4649      	mov	r1, r9
 8007366:	f7f9 f967 	bl	8000638 <__aeabi_dmul>
 800736a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736e:	9e01      	ldr	r6, [sp, #4]
 8007370:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007374:	3501      	adds	r5, #1
 8007376:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800737a:	4628      	mov	r0, r5
 800737c:	f7f9 f8f2 	bl	8000564 <__aeabi_i2d>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f9 f958 	bl	8000638 <__aeabi_dmul>
 8007388:	4b86      	ldr	r3, [pc, #536]	; (80075a4 <_dtoa_r+0x64c>)
 800738a:	2200      	movs	r2, #0
 800738c:	f7f8 ff9e 	bl	80002cc <__adddf3>
 8007390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	2e00      	cmp	r6, #0
 800739c:	d158      	bne.n	8007450 <_dtoa_r+0x4f8>
 800739e:	4b82      	ldr	r3, [pc, #520]	; (80075a8 <_dtoa_r+0x650>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f8 ff8f 	bl	80002c8 <__aeabi_dsub>
 80073aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ae:	4680      	mov	r8, r0
 80073b0:	4689      	mov	r9, r1
 80073b2:	f7f9 fbd1 	bl	8000b58 <__aeabi_dcmpgt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f040 8296 	bne.w	80078e8 <_dtoa_r+0x990>
 80073bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80073c0:	4640      	mov	r0, r8
 80073c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fba8 	bl	8000b1c <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 8289 	bne.w	80078e4 <_dtoa_r+0x98c>
 80073d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f2c0 814e 	blt.w	800767a <_dtoa_r+0x722>
 80073de:	f1bb 0f0e 	cmp.w	fp, #14
 80073e2:	f300 814a 	bgt.w	800767a <_dtoa_r+0x722>
 80073e6:	4b6b      	ldr	r3, [pc, #428]	; (8007594 <_dtoa_r+0x63c>)
 80073e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f280 80dc 	bge.w	80075b0 <_dtoa_r+0x658>
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f300 80d8 	bgt.w	80075b0 <_dtoa_r+0x658>
 8007400:	f040 826f 	bne.w	80078e2 <_dtoa_r+0x98a>
 8007404:	4b68      	ldr	r3, [pc, #416]	; (80075a8 <_dtoa_r+0x650>)
 8007406:	2200      	movs	r2, #0
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f9 f914 	bl	8000638 <__aeabi_dmul>
 8007410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007414:	f7f9 fb96 	bl	8000b44 <__aeabi_dcmpge>
 8007418:	9e04      	ldr	r6, [sp, #16]
 800741a:	4637      	mov	r7, r6
 800741c:	2800      	cmp	r0, #0
 800741e:	f040 8245 	bne.w	80078ac <_dtoa_r+0x954>
 8007422:	9d00      	ldr	r5, [sp, #0]
 8007424:	2331      	movs	r3, #49	; 0x31
 8007426:	f805 3b01 	strb.w	r3, [r5], #1
 800742a:	f10b 0b01 	add.w	fp, fp, #1
 800742e:	e241      	b.n	80078b4 <_dtoa_r+0x95c>
 8007430:	07f2      	lsls	r2, r6, #31
 8007432:	d505      	bpl.n	8007440 <_dtoa_r+0x4e8>
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	f7f9 f8fe 	bl	8000638 <__aeabi_dmul>
 800743c:	3501      	adds	r5, #1
 800743e:	2301      	movs	r3, #1
 8007440:	1076      	asrs	r6, r6, #1
 8007442:	3708      	adds	r7, #8
 8007444:	e773      	b.n	800732e <_dtoa_r+0x3d6>
 8007446:	2502      	movs	r5, #2
 8007448:	e775      	b.n	8007336 <_dtoa_r+0x3de>
 800744a:	9e04      	ldr	r6, [sp, #16]
 800744c:	465f      	mov	r7, fp
 800744e:	e792      	b.n	8007376 <_dtoa_r+0x41e>
 8007450:	9900      	ldr	r1, [sp, #0]
 8007452:	4b50      	ldr	r3, [pc, #320]	; (8007594 <_dtoa_r+0x63c>)
 8007454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007458:	4431      	add	r1, r6
 800745a:	9102      	str	r1, [sp, #8]
 800745c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745e:	eeb0 9a47 	vmov.f32	s18, s14
 8007462:	eef0 9a67 	vmov.f32	s19, s15
 8007466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800746a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800746e:	2900      	cmp	r1, #0
 8007470:	d044      	beq.n	80074fc <_dtoa_r+0x5a4>
 8007472:	494e      	ldr	r1, [pc, #312]	; (80075ac <_dtoa_r+0x654>)
 8007474:	2000      	movs	r0, #0
 8007476:	f7f9 fa09 	bl	800088c <__aeabi_ddiv>
 800747a:	ec53 2b19 	vmov	r2, r3, d9
 800747e:	f7f8 ff23 	bl	80002c8 <__aeabi_dsub>
 8007482:	9d00      	ldr	r5, [sp, #0]
 8007484:	ec41 0b19 	vmov	d9, r0, r1
 8007488:	4649      	mov	r1, r9
 800748a:	4640      	mov	r0, r8
 800748c:	f7f9 fb84 	bl	8000b98 <__aeabi_d2iz>
 8007490:	4606      	mov	r6, r0
 8007492:	f7f9 f867 	bl	8000564 <__aeabi_i2d>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f8 ff13 	bl	80002c8 <__aeabi_dsub>
 80074a2:	3630      	adds	r6, #48	; 0x30
 80074a4:	f805 6b01 	strb.w	r6, [r5], #1
 80074a8:	ec53 2b19 	vmov	r2, r3, d9
 80074ac:	4680      	mov	r8, r0
 80074ae:	4689      	mov	r9, r1
 80074b0:	f7f9 fb34 	bl	8000b1c <__aeabi_dcmplt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d164      	bne.n	8007582 <_dtoa_r+0x62a>
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	4937      	ldr	r1, [pc, #220]	; (800759c <_dtoa_r+0x644>)
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f8 ff02 	bl	80002c8 <__aeabi_dsub>
 80074c4:	ec53 2b19 	vmov	r2, r3, d9
 80074c8:	f7f9 fb28 	bl	8000b1c <__aeabi_dcmplt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f040 80b6 	bne.w	800763e <_dtoa_r+0x6e6>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	429d      	cmp	r5, r3
 80074d6:	f43f af7c 	beq.w	80073d2 <_dtoa_r+0x47a>
 80074da:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <_dtoa_r+0x648>)
 80074dc:	ec51 0b19 	vmov	r0, r1, d9
 80074e0:	2200      	movs	r2, #0
 80074e2:	f7f9 f8a9 	bl	8000638 <__aeabi_dmul>
 80074e6:	4b2e      	ldr	r3, [pc, #184]	; (80075a0 <_dtoa_r+0x648>)
 80074e8:	ec41 0b19 	vmov	d9, r0, r1
 80074ec:	2200      	movs	r2, #0
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f9 f8a1 	bl	8000638 <__aeabi_dmul>
 80074f6:	4680      	mov	r8, r0
 80074f8:	4689      	mov	r9, r1
 80074fa:	e7c5      	b.n	8007488 <_dtoa_r+0x530>
 80074fc:	ec51 0b17 	vmov	r0, r1, d7
 8007500:	f7f9 f89a 	bl	8000638 <__aeabi_dmul>
 8007504:	9b02      	ldr	r3, [sp, #8]
 8007506:	9d00      	ldr	r5, [sp, #0]
 8007508:	930f      	str	r3, [sp, #60]	; 0x3c
 800750a:	ec41 0b19 	vmov	d9, r0, r1
 800750e:	4649      	mov	r1, r9
 8007510:	4640      	mov	r0, r8
 8007512:	f7f9 fb41 	bl	8000b98 <__aeabi_d2iz>
 8007516:	4606      	mov	r6, r0
 8007518:	f7f9 f824 	bl	8000564 <__aeabi_i2d>
 800751c:	3630      	adds	r6, #48	; 0x30
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 fecf 	bl	80002c8 <__aeabi_dsub>
 800752a:	f805 6b01 	strb.w	r6, [r5], #1
 800752e:	9b02      	ldr	r3, [sp, #8]
 8007530:	429d      	cmp	r5, r3
 8007532:	4680      	mov	r8, r0
 8007534:	4689      	mov	r9, r1
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	d124      	bne.n	8007586 <_dtoa_r+0x62e>
 800753c:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <_dtoa_r+0x654>)
 800753e:	ec51 0b19 	vmov	r0, r1, d9
 8007542:	f7f8 fec3 	bl	80002cc <__adddf3>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f9 fb03 	bl	8000b58 <__aeabi_dcmpgt>
 8007552:	2800      	cmp	r0, #0
 8007554:	d173      	bne.n	800763e <_dtoa_r+0x6e6>
 8007556:	ec53 2b19 	vmov	r2, r3, d9
 800755a:	4914      	ldr	r1, [pc, #80]	; (80075ac <_dtoa_r+0x654>)
 800755c:	2000      	movs	r0, #0
 800755e:	f7f8 feb3 	bl	80002c8 <__aeabi_dsub>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f af2f 	beq.w	80073d2 <_dtoa_r+0x47a>
 8007574:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007576:	1e6b      	subs	r3, r5, #1
 8007578:	930f      	str	r3, [sp, #60]	; 0x3c
 800757a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800757e:	2b30      	cmp	r3, #48	; 0x30
 8007580:	d0f8      	beq.n	8007574 <_dtoa_r+0x61c>
 8007582:	46bb      	mov	fp, r7
 8007584:	e04a      	b.n	800761c <_dtoa_r+0x6c4>
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <_dtoa_r+0x648>)
 8007588:	f7f9 f856 	bl	8000638 <__aeabi_dmul>
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	e7bd      	b.n	800750e <_dtoa_r+0x5b6>
 8007592:	bf00      	nop
 8007594:	08009228 	.word	0x08009228
 8007598:	08009200 	.word	0x08009200
 800759c:	3ff00000 	.word	0x3ff00000
 80075a0:	40240000 	.word	0x40240000
 80075a4:	401c0000 	.word	0x401c0000
 80075a8:	40140000 	.word	0x40140000
 80075ac:	3fe00000 	.word	0x3fe00000
 80075b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075b4:	9d00      	ldr	r5, [sp, #0]
 80075b6:	4642      	mov	r2, r8
 80075b8:	464b      	mov	r3, r9
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 f965 	bl	800088c <__aeabi_ddiv>
 80075c2:	f7f9 fae9 	bl	8000b98 <__aeabi_d2iz>
 80075c6:	9001      	str	r0, [sp, #4]
 80075c8:	f7f8 ffcc 	bl	8000564 <__aeabi_i2d>
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	f7f9 f832 	bl	8000638 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4630      	mov	r0, r6
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f8 fe74 	bl	80002c8 <__aeabi_dsub>
 80075e0:	9e01      	ldr	r6, [sp, #4]
 80075e2:	9f04      	ldr	r7, [sp, #16]
 80075e4:	3630      	adds	r6, #48	; 0x30
 80075e6:	f805 6b01 	strb.w	r6, [r5], #1
 80075ea:	9e00      	ldr	r6, [sp, #0]
 80075ec:	1bae      	subs	r6, r5, r6
 80075ee:	42b7      	cmp	r7, r6
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	d134      	bne.n	8007660 <_dtoa_r+0x708>
 80075f6:	f7f8 fe69 	bl	80002cc <__adddf3>
 80075fa:	4642      	mov	r2, r8
 80075fc:	464b      	mov	r3, r9
 80075fe:	4606      	mov	r6, r0
 8007600:	460f      	mov	r7, r1
 8007602:	f7f9 faa9 	bl	8000b58 <__aeabi_dcmpgt>
 8007606:	b9c8      	cbnz	r0, 800763c <_dtoa_r+0x6e4>
 8007608:	4642      	mov	r2, r8
 800760a:	464b      	mov	r3, r9
 800760c:	4630      	mov	r0, r6
 800760e:	4639      	mov	r1, r7
 8007610:	f7f9 fa7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007614:	b110      	cbz	r0, 800761c <_dtoa_r+0x6c4>
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	07db      	lsls	r3, r3, #31
 800761a:	d40f      	bmi.n	800763c <_dtoa_r+0x6e4>
 800761c:	4651      	mov	r1, sl
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fbcc 	bl	8007dbc <_Bfree>
 8007624:	2300      	movs	r3, #0
 8007626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007628:	702b      	strb	r3, [r5, #0]
 800762a:	f10b 0301 	add.w	r3, fp, #1
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007632:	2b00      	cmp	r3, #0
 8007634:	f43f ace2 	beq.w	8006ffc <_dtoa_r+0xa4>
 8007638:	601d      	str	r5, [r3, #0]
 800763a:	e4df      	b.n	8006ffc <_dtoa_r+0xa4>
 800763c:	465f      	mov	r7, fp
 800763e:	462b      	mov	r3, r5
 8007640:	461d      	mov	r5, r3
 8007642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007646:	2a39      	cmp	r2, #57	; 0x39
 8007648:	d106      	bne.n	8007658 <_dtoa_r+0x700>
 800764a:	9a00      	ldr	r2, [sp, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d1f7      	bne.n	8007640 <_dtoa_r+0x6e8>
 8007650:	9900      	ldr	r1, [sp, #0]
 8007652:	2230      	movs	r2, #48	; 0x30
 8007654:	3701      	adds	r7, #1
 8007656:	700a      	strb	r2, [r1, #0]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	3201      	adds	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e790      	b.n	8007582 <_dtoa_r+0x62a>
 8007660:	4ba3      	ldr	r3, [pc, #652]	; (80078f0 <_dtoa_r+0x998>)
 8007662:	2200      	movs	r2, #0
 8007664:	f7f8 ffe8 	bl	8000638 <__aeabi_dmul>
 8007668:	2200      	movs	r2, #0
 800766a:	2300      	movs	r3, #0
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	f7f9 fa4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007674:	2800      	cmp	r0, #0
 8007676:	d09e      	beq.n	80075b6 <_dtoa_r+0x65e>
 8007678:	e7d0      	b.n	800761c <_dtoa_r+0x6c4>
 800767a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767c:	2a00      	cmp	r2, #0
 800767e:	f000 80ca 	beq.w	8007816 <_dtoa_r+0x8be>
 8007682:	9a07      	ldr	r2, [sp, #28]
 8007684:	2a01      	cmp	r2, #1
 8007686:	f300 80ad 	bgt.w	80077e4 <_dtoa_r+0x88c>
 800768a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800768c:	2a00      	cmp	r2, #0
 800768e:	f000 80a5 	beq.w	80077dc <_dtoa_r+0x884>
 8007692:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007696:	9e08      	ldr	r6, [sp, #32]
 8007698:	9d05      	ldr	r5, [sp, #20]
 800769a:	9a05      	ldr	r2, [sp, #20]
 800769c:	441a      	add	r2, r3
 800769e:	9205      	str	r2, [sp, #20]
 80076a0:	9a06      	ldr	r2, [sp, #24]
 80076a2:	2101      	movs	r1, #1
 80076a4:	441a      	add	r2, r3
 80076a6:	4620      	mov	r0, r4
 80076a8:	9206      	str	r2, [sp, #24]
 80076aa:	f000 fc3d 	bl	8007f28 <__i2b>
 80076ae:	4607      	mov	r7, r0
 80076b0:	b165      	cbz	r5, 80076cc <_dtoa_r+0x774>
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd09      	ble.n	80076cc <_dtoa_r+0x774>
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	9a05      	ldr	r2, [sp, #20]
 80076bc:	bfa8      	it	ge
 80076be:	462b      	movge	r3, r5
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	9205      	str	r2, [sp, #20]
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	1aed      	subs	r5, r5, r3
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	9306      	str	r3, [sp, #24]
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	b1f3      	cbz	r3, 800770e <_dtoa_r+0x7b6>
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 80a3 	beq.w	800781e <_dtoa_r+0x8c6>
 80076d8:	2e00      	cmp	r6, #0
 80076da:	dd10      	ble.n	80076fe <_dtoa_r+0x7a6>
 80076dc:	4639      	mov	r1, r7
 80076de:	4632      	mov	r2, r6
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fce1 	bl	80080a8 <__pow5mult>
 80076e6:	4652      	mov	r2, sl
 80076e8:	4601      	mov	r1, r0
 80076ea:	4607      	mov	r7, r0
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fc31 	bl	8007f54 <__multiply>
 80076f2:	4651      	mov	r1, sl
 80076f4:	4680      	mov	r8, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fb60 	bl	8007dbc <_Bfree>
 80076fc:	46c2      	mov	sl, r8
 80076fe:	9b08      	ldr	r3, [sp, #32]
 8007700:	1b9a      	subs	r2, r3, r6
 8007702:	d004      	beq.n	800770e <_dtoa_r+0x7b6>
 8007704:	4651      	mov	r1, sl
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fcce 	bl	80080a8 <__pow5mult>
 800770c:	4682      	mov	sl, r0
 800770e:	2101      	movs	r1, #1
 8007710:	4620      	mov	r0, r4
 8007712:	f000 fc09 	bl	8007f28 <__i2b>
 8007716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	4606      	mov	r6, r0
 800771c:	f340 8081 	ble.w	8007822 <_dtoa_r+0x8ca>
 8007720:	461a      	mov	r2, r3
 8007722:	4601      	mov	r1, r0
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fcbf 	bl	80080a8 <__pow5mult>
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	2b01      	cmp	r3, #1
 800772e:	4606      	mov	r6, r0
 8007730:	dd7a      	ble.n	8007828 <_dtoa_r+0x8d0>
 8007732:	f04f 0800 	mov.w	r8, #0
 8007736:	6933      	ldr	r3, [r6, #16]
 8007738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800773c:	6918      	ldr	r0, [r3, #16]
 800773e:	f000 fba5 	bl	8007e8c <__hi0bits>
 8007742:	f1c0 0020 	rsb	r0, r0, #32
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	4418      	add	r0, r3
 800774a:	f010 001f 	ands.w	r0, r0, #31
 800774e:	f000 8094 	beq.w	800787a <_dtoa_r+0x922>
 8007752:	f1c0 0320 	rsb	r3, r0, #32
 8007756:	2b04      	cmp	r3, #4
 8007758:	f340 8085 	ble.w	8007866 <_dtoa_r+0x90e>
 800775c:	9b05      	ldr	r3, [sp, #20]
 800775e:	f1c0 001c 	rsb	r0, r0, #28
 8007762:	4403      	add	r3, r0
 8007764:	9305      	str	r3, [sp, #20]
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	4403      	add	r3, r0
 800776a:	4405      	add	r5, r0
 800776c:	9306      	str	r3, [sp, #24]
 800776e:	9b05      	ldr	r3, [sp, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	dd05      	ble.n	8007780 <_dtoa_r+0x828>
 8007774:	4651      	mov	r1, sl
 8007776:	461a      	mov	r2, r3
 8007778:	4620      	mov	r0, r4
 800777a:	f000 fcef 	bl	800815c <__lshift>
 800777e:	4682      	mov	sl, r0
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dd05      	ble.n	8007792 <_dtoa_r+0x83a>
 8007786:	4631      	mov	r1, r6
 8007788:	461a      	mov	r2, r3
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fce6 	bl	800815c <__lshift>
 8007790:	4606      	mov	r6, r0
 8007792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007794:	2b00      	cmp	r3, #0
 8007796:	d072      	beq.n	800787e <_dtoa_r+0x926>
 8007798:	4631      	mov	r1, r6
 800779a:	4650      	mov	r0, sl
 800779c:	f000 fd4a 	bl	8008234 <__mcmp>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	da6c      	bge.n	800787e <_dtoa_r+0x926>
 80077a4:	2300      	movs	r3, #0
 80077a6:	4651      	mov	r1, sl
 80077a8:	220a      	movs	r2, #10
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fb28 	bl	8007e00 <__multadd>
 80077b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077b6:	4682      	mov	sl, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 81b0 	beq.w	8007b1e <_dtoa_r+0xbc6>
 80077be:	2300      	movs	r3, #0
 80077c0:	4639      	mov	r1, r7
 80077c2:	220a      	movs	r2, #10
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fb1b 	bl	8007e00 <__multadd>
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	4607      	mov	r7, r0
 80077d0:	f300 8096 	bgt.w	8007900 <_dtoa_r+0x9a8>
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	dc59      	bgt.n	800788e <_dtoa_r+0x936>
 80077da:	e091      	b.n	8007900 <_dtoa_r+0x9a8>
 80077dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077e2:	e758      	b.n	8007696 <_dtoa_r+0x73e>
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	1e5e      	subs	r6, r3, #1
 80077e8:	9b08      	ldr	r3, [sp, #32]
 80077ea:	42b3      	cmp	r3, r6
 80077ec:	bfbf      	itttt	lt
 80077ee:	9b08      	ldrlt	r3, [sp, #32]
 80077f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80077f2:	9608      	strlt	r6, [sp, #32]
 80077f4:	1af3      	sublt	r3, r6, r3
 80077f6:	bfb4      	ite	lt
 80077f8:	18d2      	addlt	r2, r2, r3
 80077fa:	1b9e      	subge	r6, r3, r6
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	bfbc      	itt	lt
 8007800:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007802:	2600      	movlt	r6, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfb7      	itett	lt
 8007808:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800780c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007810:	1a9d      	sublt	r5, r3, r2
 8007812:	2300      	movlt	r3, #0
 8007814:	e741      	b.n	800769a <_dtoa_r+0x742>
 8007816:	9e08      	ldr	r6, [sp, #32]
 8007818:	9d05      	ldr	r5, [sp, #20]
 800781a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800781c:	e748      	b.n	80076b0 <_dtoa_r+0x758>
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	e770      	b.n	8007704 <_dtoa_r+0x7ac>
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	2b01      	cmp	r3, #1
 8007826:	dc19      	bgt.n	800785c <_dtoa_r+0x904>
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	b9bb      	cbnz	r3, 800785c <_dtoa_r+0x904>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007832:	b99b      	cbnz	r3, 800785c <_dtoa_r+0x904>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800783a:	0d1b      	lsrs	r3, r3, #20
 800783c:	051b      	lsls	r3, r3, #20
 800783e:	b183      	cbz	r3, 8007862 <_dtoa_r+0x90a>
 8007840:	9b05      	ldr	r3, [sp, #20]
 8007842:	3301      	adds	r3, #1
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	3301      	adds	r3, #1
 800784a:	9306      	str	r3, [sp, #24]
 800784c:	f04f 0801 	mov.w	r8, #1
 8007850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	f47f af6f 	bne.w	8007736 <_dtoa_r+0x7de>
 8007858:	2001      	movs	r0, #1
 800785a:	e774      	b.n	8007746 <_dtoa_r+0x7ee>
 800785c:	f04f 0800 	mov.w	r8, #0
 8007860:	e7f6      	b.n	8007850 <_dtoa_r+0x8f8>
 8007862:	4698      	mov	r8, r3
 8007864:	e7f4      	b.n	8007850 <_dtoa_r+0x8f8>
 8007866:	d082      	beq.n	800776e <_dtoa_r+0x816>
 8007868:	9a05      	ldr	r2, [sp, #20]
 800786a:	331c      	adds	r3, #28
 800786c:	441a      	add	r2, r3
 800786e:	9205      	str	r2, [sp, #20]
 8007870:	9a06      	ldr	r2, [sp, #24]
 8007872:	441a      	add	r2, r3
 8007874:	441d      	add	r5, r3
 8007876:	9206      	str	r2, [sp, #24]
 8007878:	e779      	b.n	800776e <_dtoa_r+0x816>
 800787a:	4603      	mov	r3, r0
 800787c:	e7f4      	b.n	8007868 <_dtoa_r+0x910>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	dc37      	bgt.n	80078f4 <_dtoa_r+0x99c>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	2b02      	cmp	r3, #2
 8007888:	dd34      	ble.n	80078f4 <_dtoa_r+0x99c>
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	b963      	cbnz	r3, 80078ac <_dtoa_r+0x954>
 8007892:	4631      	mov	r1, r6
 8007894:	2205      	movs	r2, #5
 8007896:	4620      	mov	r0, r4
 8007898:	f000 fab2 	bl	8007e00 <__multadd>
 800789c:	4601      	mov	r1, r0
 800789e:	4606      	mov	r6, r0
 80078a0:	4650      	mov	r0, sl
 80078a2:	f000 fcc7 	bl	8008234 <__mcmp>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f73f adbb 	bgt.w	8007422 <_dtoa_r+0x4ca>
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	9d00      	ldr	r5, [sp, #0]
 80078b0:	ea6f 0b03 	mvn.w	fp, r3
 80078b4:	f04f 0800 	mov.w	r8, #0
 80078b8:	4631      	mov	r1, r6
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 fa7e 	bl	8007dbc <_Bfree>
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	f43f aeab 	beq.w	800761c <_dtoa_r+0x6c4>
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	d005      	beq.n	80078d8 <_dtoa_r+0x980>
 80078cc:	45b8      	cmp	r8, r7
 80078ce:	d003      	beq.n	80078d8 <_dtoa_r+0x980>
 80078d0:	4641      	mov	r1, r8
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fa72 	bl	8007dbc <_Bfree>
 80078d8:	4639      	mov	r1, r7
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fa6e 	bl	8007dbc <_Bfree>
 80078e0:	e69c      	b.n	800761c <_dtoa_r+0x6c4>
 80078e2:	2600      	movs	r6, #0
 80078e4:	4637      	mov	r7, r6
 80078e6:	e7e1      	b.n	80078ac <_dtoa_r+0x954>
 80078e8:	46bb      	mov	fp, r7
 80078ea:	4637      	mov	r7, r6
 80078ec:	e599      	b.n	8007422 <_dtoa_r+0x4ca>
 80078ee:	bf00      	nop
 80078f0:	40240000 	.word	0x40240000
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80c8 	beq.w	8007a8c <_dtoa_r+0xb34>
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	2d00      	cmp	r5, #0
 8007902:	dd05      	ble.n	8007910 <_dtoa_r+0x9b8>
 8007904:	4639      	mov	r1, r7
 8007906:	462a      	mov	r2, r5
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fc27 	bl	800815c <__lshift>
 800790e:	4607      	mov	r7, r0
 8007910:	f1b8 0f00 	cmp.w	r8, #0
 8007914:	d05b      	beq.n	80079ce <_dtoa_r+0xa76>
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fa0f 	bl	8007d3c <_Balloc>
 800791e:	4605      	mov	r5, r0
 8007920:	b928      	cbnz	r0, 800792e <_dtoa_r+0x9d6>
 8007922:	4b83      	ldr	r3, [pc, #524]	; (8007b30 <_dtoa_r+0xbd8>)
 8007924:	4602      	mov	r2, r0
 8007926:	f240 21ef 	movw	r1, #751	; 0x2ef
 800792a:	f7ff bb2e 	b.w	8006f8a <_dtoa_r+0x32>
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	3202      	adds	r2, #2
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	f107 010c 	add.w	r1, r7, #12
 8007938:	300c      	adds	r0, #12
 800793a:	f001 f813 	bl	8008964 <memcpy>
 800793e:	2201      	movs	r2, #1
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fc0a 	bl	800815c <__lshift>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007952:	4413      	add	r3, r2
 8007954:	9308      	str	r3, [sp, #32]
 8007956:	9b02      	ldr	r3, [sp, #8]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	46b8      	mov	r8, r7
 800795e:	9306      	str	r3, [sp, #24]
 8007960:	4607      	mov	r7, r0
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	4631      	mov	r1, r6
 8007966:	3b01      	subs	r3, #1
 8007968:	4650      	mov	r0, sl
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	f7ff fa69 	bl	8006e42 <quorem>
 8007970:	4641      	mov	r1, r8
 8007972:	9002      	str	r0, [sp, #8]
 8007974:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007978:	4650      	mov	r0, sl
 800797a:	f000 fc5b 	bl	8008234 <__mcmp>
 800797e:	463a      	mov	r2, r7
 8007980:	9005      	str	r0, [sp, #20]
 8007982:	4631      	mov	r1, r6
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fc71 	bl	800826c <__mdiff>
 800798a:	68c2      	ldr	r2, [r0, #12]
 800798c:	4605      	mov	r5, r0
 800798e:	bb02      	cbnz	r2, 80079d2 <_dtoa_r+0xa7a>
 8007990:	4601      	mov	r1, r0
 8007992:	4650      	mov	r0, sl
 8007994:	f000 fc4e 	bl	8008234 <__mcmp>
 8007998:	4602      	mov	r2, r0
 800799a:	4629      	mov	r1, r5
 800799c:	4620      	mov	r0, r4
 800799e:	9209      	str	r2, [sp, #36]	; 0x24
 80079a0:	f000 fa0c 	bl	8007dbc <_Bfree>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a8:	9d04      	ldr	r5, [sp, #16]
 80079aa:	ea43 0102 	orr.w	r1, r3, r2
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	4319      	orrs	r1, r3
 80079b2:	d110      	bne.n	80079d6 <_dtoa_r+0xa7e>
 80079b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80079b8:	d029      	beq.n	8007a0e <_dtoa_r+0xab6>
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd02      	ble.n	80079c6 <_dtoa_r+0xa6e>
 80079c0:	9b02      	ldr	r3, [sp, #8]
 80079c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	f883 9000 	strb.w	r9, [r3]
 80079cc:	e774      	b.n	80078b8 <_dtoa_r+0x960>
 80079ce:	4638      	mov	r0, r7
 80079d0:	e7ba      	b.n	8007948 <_dtoa_r+0x9f0>
 80079d2:	2201      	movs	r2, #1
 80079d4:	e7e1      	b.n	800799a <_dtoa_r+0xa42>
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db04      	blt.n	80079e6 <_dtoa_r+0xa8e>
 80079dc:	9907      	ldr	r1, [sp, #28]
 80079de:	430b      	orrs	r3, r1
 80079e0:	9906      	ldr	r1, [sp, #24]
 80079e2:	430b      	orrs	r3, r1
 80079e4:	d120      	bne.n	8007a28 <_dtoa_r+0xad0>
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	dded      	ble.n	80079c6 <_dtoa_r+0xa6e>
 80079ea:	4651      	mov	r1, sl
 80079ec:	2201      	movs	r2, #1
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 fbb4 	bl	800815c <__lshift>
 80079f4:	4631      	mov	r1, r6
 80079f6:	4682      	mov	sl, r0
 80079f8:	f000 fc1c 	bl	8008234 <__mcmp>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dc03      	bgt.n	8007a08 <_dtoa_r+0xab0>
 8007a00:	d1e1      	bne.n	80079c6 <_dtoa_r+0xa6e>
 8007a02:	f019 0f01 	tst.w	r9, #1
 8007a06:	d0de      	beq.n	80079c6 <_dtoa_r+0xa6e>
 8007a08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a0c:	d1d8      	bne.n	80079c0 <_dtoa_r+0xa68>
 8007a0e:	9a01      	ldr	r2, [sp, #4]
 8007a10:	2339      	movs	r3, #57	; 0x39
 8007a12:	7013      	strb	r3, [r2, #0]
 8007a14:	462b      	mov	r3, r5
 8007a16:	461d      	mov	r5, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a1e:	2a39      	cmp	r2, #57	; 0x39
 8007a20:	d06c      	beq.n	8007afc <_dtoa_r+0xba4>
 8007a22:	3201      	adds	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e747      	b.n	80078b8 <_dtoa_r+0x960>
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	dd07      	ble.n	8007a3c <_dtoa_r+0xae4>
 8007a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a30:	d0ed      	beq.n	8007a0e <_dtoa_r+0xab6>
 8007a32:	9a01      	ldr	r2, [sp, #4]
 8007a34:	f109 0301 	add.w	r3, r9, #1
 8007a38:	7013      	strb	r3, [r2, #0]
 8007a3a:	e73d      	b.n	80078b8 <_dtoa_r+0x960>
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	9a08      	ldr	r2, [sp, #32]
 8007a40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d043      	beq.n	8007ad0 <_dtoa_r+0xb78>
 8007a48:	4651      	mov	r1, sl
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	220a      	movs	r2, #10
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 f9d6 	bl	8007e00 <__multadd>
 8007a54:	45b8      	cmp	r8, r7
 8007a56:	4682      	mov	sl, r0
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	f04f 020a 	mov.w	r2, #10
 8007a60:	4641      	mov	r1, r8
 8007a62:	4620      	mov	r0, r4
 8007a64:	d107      	bne.n	8007a76 <_dtoa_r+0xb1e>
 8007a66:	f000 f9cb 	bl	8007e00 <__multadd>
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	3301      	adds	r3, #1
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	e775      	b.n	8007962 <_dtoa_r+0xa0a>
 8007a76:	f000 f9c3 	bl	8007e00 <__multadd>
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	220a      	movs	r2, #10
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f9bc 	bl	8007e00 <__multadd>
 8007a88:	4607      	mov	r7, r0
 8007a8a:	e7f0      	b.n	8007a6e <_dtoa_r+0xb16>
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	9d00      	ldr	r5, [sp, #0]
 8007a92:	4631      	mov	r1, r6
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7ff f9d4 	bl	8006e42 <quorem>
 8007a9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	f805 9b01 	strb.w	r9, [r5], #1
 8007aa4:	1aea      	subs	r2, r5, r3
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	dd07      	ble.n	8007abc <_dtoa_r+0xb64>
 8007aac:	4651      	mov	r1, sl
 8007aae:	2300      	movs	r3, #0
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f9a4 	bl	8007e00 <__multadd>
 8007ab8:	4682      	mov	sl, r0
 8007aba:	e7ea      	b.n	8007a92 <_dtoa_r+0xb3a>
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfc8      	it	gt
 8007ac2:	461d      	movgt	r5, r3
 8007ac4:	9b00      	ldr	r3, [sp, #0]
 8007ac6:	bfd8      	it	le
 8007ac8:	2501      	movle	r5, #1
 8007aca:	441d      	add	r5, r3
 8007acc:	f04f 0800 	mov.w	r8, #0
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fb41 	bl	800815c <__lshift>
 8007ada:	4631      	mov	r1, r6
 8007adc:	4682      	mov	sl, r0
 8007ade:	f000 fba9 	bl	8008234 <__mcmp>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dc96      	bgt.n	8007a14 <_dtoa_r+0xabc>
 8007ae6:	d102      	bne.n	8007aee <_dtoa_r+0xb96>
 8007ae8:	f019 0f01 	tst.w	r9, #1
 8007aec:	d192      	bne.n	8007a14 <_dtoa_r+0xabc>
 8007aee:	462b      	mov	r3, r5
 8007af0:	461d      	mov	r5, r3
 8007af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007af6:	2a30      	cmp	r2, #48	; 0x30
 8007af8:	d0fa      	beq.n	8007af0 <_dtoa_r+0xb98>
 8007afa:	e6dd      	b.n	80078b8 <_dtoa_r+0x960>
 8007afc:	9a00      	ldr	r2, [sp, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d189      	bne.n	8007a16 <_dtoa_r+0xabe>
 8007b02:	f10b 0b01 	add.w	fp, fp, #1
 8007b06:	2331      	movs	r3, #49	; 0x31
 8007b08:	e796      	b.n	8007a38 <_dtoa_r+0xae0>
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <_dtoa_r+0xbdc>)
 8007b0c:	f7ff ba99 	b.w	8007042 <_dtoa_r+0xea>
 8007b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f aa6d 	bne.w	8006ff2 <_dtoa_r+0x9a>
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <_dtoa_r+0xbe0>)
 8007b1a:	f7ff ba92 	b.w	8007042 <_dtoa_r+0xea>
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dcb5      	bgt.n	8007a90 <_dtoa_r+0xb38>
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f73f aeb1 	bgt.w	800788e <_dtoa_r+0x936>
 8007b2c:	e7b0      	b.n	8007a90 <_dtoa_r+0xb38>
 8007b2e:	bf00      	nop
 8007b30:	08009190 	.word	0x08009190
 8007b34:	080090f0 	.word	0x080090f0
 8007b38:	08009114 	.word	0x08009114

08007b3c <_free_r>:
 8007b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	d044      	beq.n	8007bcc <_free_r+0x90>
 8007b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b46:	9001      	str	r0, [sp, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b4e:	bfb8      	it	lt
 8007b50:	18e4      	addlt	r4, r4, r3
 8007b52:	f000 f8e7 	bl	8007d24 <__malloc_lock>
 8007b56:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <_free_r+0x94>)
 8007b58:	9801      	ldr	r0, [sp, #4]
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	b933      	cbnz	r3, 8007b6c <_free_r+0x30>
 8007b5e:	6063      	str	r3, [r4, #4]
 8007b60:	6014      	str	r4, [r2, #0]
 8007b62:	b003      	add	sp, #12
 8007b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b68:	f000 b8e2 	b.w	8007d30 <__malloc_unlock>
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d908      	bls.n	8007b82 <_free_r+0x46>
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	1961      	adds	r1, r4, r5
 8007b74:	428b      	cmp	r3, r1
 8007b76:	bf01      	itttt	eq
 8007b78:	6819      	ldreq	r1, [r3, #0]
 8007b7a:	685b      	ldreq	r3, [r3, #4]
 8007b7c:	1949      	addeq	r1, r1, r5
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	e7ed      	b.n	8007b5e <_free_r+0x22>
 8007b82:	461a      	mov	r2, r3
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b10b      	cbz	r3, 8007b8c <_free_r+0x50>
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d9fa      	bls.n	8007b82 <_free_r+0x46>
 8007b8c:	6811      	ldr	r1, [r2, #0]
 8007b8e:	1855      	adds	r5, r2, r1
 8007b90:	42a5      	cmp	r5, r4
 8007b92:	d10b      	bne.n	8007bac <_free_r+0x70>
 8007b94:	6824      	ldr	r4, [r4, #0]
 8007b96:	4421      	add	r1, r4
 8007b98:	1854      	adds	r4, r2, r1
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	6011      	str	r1, [r2, #0]
 8007b9e:	d1e0      	bne.n	8007b62 <_free_r+0x26>
 8007ba0:	681c      	ldr	r4, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	6053      	str	r3, [r2, #4]
 8007ba6:	440c      	add	r4, r1
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	e7da      	b.n	8007b62 <_free_r+0x26>
 8007bac:	d902      	bls.n	8007bb4 <_free_r+0x78>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	6003      	str	r3, [r0, #0]
 8007bb2:	e7d6      	b.n	8007b62 <_free_r+0x26>
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	1961      	adds	r1, r4, r5
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	bf04      	itt	eq
 8007bbc:	6819      	ldreq	r1, [r3, #0]
 8007bbe:	685b      	ldreq	r3, [r3, #4]
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	bf04      	itt	eq
 8007bc4:	1949      	addeq	r1, r1, r5
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	6054      	str	r4, [r2, #4]
 8007bca:	e7ca      	b.n	8007b62 <_free_r+0x26>
 8007bcc:	b003      	add	sp, #12
 8007bce:	bd30      	pop	{r4, r5, pc}
 8007bd0:	200006a4 	.word	0x200006a4

08007bd4 <malloc>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <malloc+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f000 b823 	b.w	8007c24 <_malloc_r>
 8007bde:	bf00      	nop
 8007be0:	200000f8 	.word	0x200000f8

08007be4 <sbrk_aligned>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0e      	ldr	r6, [pc, #56]	; (8007c20 <sbrk_aligned+0x3c>)
 8007be8:	460c      	mov	r4, r1
 8007bea:	6831      	ldr	r1, [r6, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	b911      	cbnz	r1, 8007bf6 <sbrk_aligned+0x12>
 8007bf0:	f000 fea8 	bl	8008944 <_sbrk_r>
 8007bf4:	6030      	str	r0, [r6, #0]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fea3 	bl	8008944 <_sbrk_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d00a      	beq.n	8007c18 <sbrk_aligned+0x34>
 8007c02:	1cc4      	adds	r4, r0, #3
 8007c04:	f024 0403 	bic.w	r4, r4, #3
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d007      	beq.n	8007c1c <sbrk_aligned+0x38>
 8007c0c:	1a21      	subs	r1, r4, r0
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 fe98 	bl	8008944 <_sbrk_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d101      	bne.n	8007c1c <sbrk_aligned+0x38>
 8007c18:	f04f 34ff 	mov.w	r4, #4294967295
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	200006a8 	.word	0x200006a8

08007c24 <_malloc_r>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	1ccd      	adds	r5, r1, #3
 8007c2a:	f025 0503 	bic.w	r5, r5, #3
 8007c2e:	3508      	adds	r5, #8
 8007c30:	2d0c      	cmp	r5, #12
 8007c32:	bf38      	it	cc
 8007c34:	250c      	movcc	r5, #12
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	4607      	mov	r7, r0
 8007c3a:	db01      	blt.n	8007c40 <_malloc_r+0x1c>
 8007c3c:	42a9      	cmp	r1, r5
 8007c3e:	d905      	bls.n	8007c4c <_malloc_r+0x28>
 8007c40:	230c      	movs	r3, #12
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	2600      	movs	r6, #0
 8007c46:	4630      	mov	r0, r6
 8007c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d20 <_malloc_r+0xfc>
 8007c50:	f000 f868 	bl	8007d24 <__malloc_lock>
 8007c54:	f8d8 3000 	ldr.w	r3, [r8]
 8007c58:	461c      	mov	r4, r3
 8007c5a:	bb5c      	cbnz	r4, 8007cb4 <_malloc_r+0x90>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4638      	mov	r0, r7
 8007c60:	f7ff ffc0 	bl	8007be4 <sbrk_aligned>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	4604      	mov	r4, r0
 8007c68:	d155      	bne.n	8007d16 <_malloc_r+0xf2>
 8007c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8007c6e:	4626      	mov	r6, r4
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d145      	bne.n	8007d00 <_malloc_r+0xdc>
 8007c74:	2c00      	cmp	r4, #0
 8007c76:	d048      	beq.n	8007d0a <_malloc_r+0xe6>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	eb04 0903 	add.w	r9, r4, r3
 8007c82:	f000 fe5f 	bl	8008944 <_sbrk_r>
 8007c86:	4581      	cmp	r9, r0
 8007c88:	d13f      	bne.n	8007d0a <_malloc_r+0xe6>
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	1a6d      	subs	r5, r5, r1
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ffa7 	bl	8007be4 <sbrk_aligned>
 8007c96:	3001      	adds	r0, #1
 8007c98:	d037      	beq.n	8007d0a <_malloc_r+0xe6>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	442b      	add	r3, r5
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d038      	beq.n	8007d1a <_malloc_r+0xf6>
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	42a2      	cmp	r2, r4
 8007cac:	d12b      	bne.n	8007d06 <_malloc_r+0xe2>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	e00f      	b.n	8007cd4 <_malloc_r+0xb0>
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	1b52      	subs	r2, r2, r5
 8007cb8:	d41f      	bmi.n	8007cfa <_malloc_r+0xd6>
 8007cba:	2a0b      	cmp	r2, #11
 8007cbc:	d917      	bls.n	8007cee <_malloc_r+0xca>
 8007cbe:	1961      	adds	r1, r4, r5
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	6025      	str	r5, [r4, #0]
 8007cc4:	bf18      	it	ne
 8007cc6:	6059      	strne	r1, [r3, #4]
 8007cc8:	6863      	ldr	r3, [r4, #4]
 8007cca:	bf08      	it	eq
 8007ccc:	f8c8 1000 	streq.w	r1, [r8]
 8007cd0:	5162      	str	r2, [r4, r5]
 8007cd2:	604b      	str	r3, [r1, #4]
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f104 060b 	add.w	r6, r4, #11
 8007cda:	f000 f829 	bl	8007d30 <__malloc_unlock>
 8007cde:	f026 0607 	bic.w	r6, r6, #7
 8007ce2:	1d23      	adds	r3, r4, #4
 8007ce4:	1af2      	subs	r2, r6, r3
 8007ce6:	d0ae      	beq.n	8007c46 <_malloc_r+0x22>
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	50a3      	str	r3, [r4, r2]
 8007cec:	e7ab      	b.n	8007c46 <_malloc_r+0x22>
 8007cee:	42a3      	cmp	r3, r4
 8007cf0:	6862      	ldr	r2, [r4, #4]
 8007cf2:	d1dd      	bne.n	8007cb0 <_malloc_r+0x8c>
 8007cf4:	f8c8 2000 	str.w	r2, [r8]
 8007cf8:	e7ec      	b.n	8007cd4 <_malloc_r+0xb0>
 8007cfa:	4623      	mov	r3, r4
 8007cfc:	6864      	ldr	r4, [r4, #4]
 8007cfe:	e7ac      	b.n	8007c5a <_malloc_r+0x36>
 8007d00:	4634      	mov	r4, r6
 8007d02:	6876      	ldr	r6, [r6, #4]
 8007d04:	e7b4      	b.n	8007c70 <_malloc_r+0x4c>
 8007d06:	4613      	mov	r3, r2
 8007d08:	e7cc      	b.n	8007ca4 <_malloc_r+0x80>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f000 f80e 	bl	8007d30 <__malloc_unlock>
 8007d14:	e797      	b.n	8007c46 <_malloc_r+0x22>
 8007d16:	6025      	str	r5, [r4, #0]
 8007d18:	e7dc      	b.n	8007cd4 <_malloc_r+0xb0>
 8007d1a:	605b      	str	r3, [r3, #4]
 8007d1c:	deff      	udf	#255	; 0xff
 8007d1e:	bf00      	nop
 8007d20:	200006a4 	.word	0x200006a4

08007d24 <__malloc_lock>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__malloc_lock+0x8>)
 8007d26:	f7ff b88a 	b.w	8006e3e <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	200006a0 	.word	0x200006a0

08007d30 <__malloc_unlock>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__malloc_unlock+0x8>)
 8007d32:	f7ff b885 	b.w	8006e40 <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	200006a0 	.word	0x200006a0

08007d3c <_Balloc>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	69c6      	ldr	r6, [r0, #28]
 8007d40:	4604      	mov	r4, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	b976      	cbnz	r6, 8007d64 <_Balloc+0x28>
 8007d46:	2010      	movs	r0, #16
 8007d48:	f7ff ff44 	bl	8007bd4 <malloc>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	61e0      	str	r0, [r4, #28]
 8007d50:	b920      	cbnz	r0, 8007d5c <_Balloc+0x20>
 8007d52:	4b18      	ldr	r3, [pc, #96]	; (8007db4 <_Balloc+0x78>)
 8007d54:	4818      	ldr	r0, [pc, #96]	; (8007db8 <_Balloc+0x7c>)
 8007d56:	216b      	movs	r1, #107	; 0x6b
 8007d58:	f000 fe12 	bl	8008980 <__assert_func>
 8007d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d60:	6006      	str	r6, [r0, #0]
 8007d62:	60c6      	str	r6, [r0, #12]
 8007d64:	69e6      	ldr	r6, [r4, #28]
 8007d66:	68f3      	ldr	r3, [r6, #12]
 8007d68:	b183      	cbz	r3, 8007d8c <_Balloc+0x50>
 8007d6a:	69e3      	ldr	r3, [r4, #28]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d72:	b9b8      	cbnz	r0, 8007da4 <_Balloc+0x68>
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f605 	lsl.w	r6, r1, r5
 8007d7a:	1d72      	adds	r2, r6, #5
 8007d7c:	0092      	lsls	r2, r2, #2
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fe1c 	bl	80089bc <_calloc_r>
 8007d84:	b160      	cbz	r0, 8007da0 <_Balloc+0x64>
 8007d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d8a:	e00e      	b.n	8007daa <_Balloc+0x6e>
 8007d8c:	2221      	movs	r2, #33	; 0x21
 8007d8e:	2104      	movs	r1, #4
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fe13 	bl	80089bc <_calloc_r>
 8007d96:	69e3      	ldr	r3, [r4, #28]
 8007d98:	60f0      	str	r0, [r6, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e4      	bne.n	8007d6a <_Balloc+0x2e>
 8007da0:	2000      	movs	r0, #0
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	6802      	ldr	r2, [r0, #0]
 8007da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007daa:	2300      	movs	r3, #0
 8007dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007db0:	e7f7      	b.n	8007da2 <_Balloc+0x66>
 8007db2:	bf00      	nop
 8007db4:	08009121 	.word	0x08009121
 8007db8:	080091a1 	.word	0x080091a1

08007dbc <_Bfree>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	69c6      	ldr	r6, [r0, #28]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	b976      	cbnz	r6, 8007de4 <_Bfree+0x28>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f7ff ff04 	bl	8007bd4 <malloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	61e8      	str	r0, [r5, #28]
 8007dd0:	b920      	cbnz	r0, 8007ddc <_Bfree+0x20>
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <_Bfree+0x3c>)
 8007dd4:	4809      	ldr	r0, [pc, #36]	; (8007dfc <_Bfree+0x40>)
 8007dd6:	218f      	movs	r1, #143	; 0x8f
 8007dd8:	f000 fdd2 	bl	8008980 <__assert_func>
 8007ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007de0:	6006      	str	r6, [r0, #0]
 8007de2:	60c6      	str	r6, [r0, #12]
 8007de4:	b13c      	cbz	r4, 8007df6 <_Bfree+0x3a>
 8007de6:	69eb      	ldr	r3, [r5, #28]
 8007de8:	6862      	ldr	r2, [r4, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007df0:	6021      	str	r1, [r4, #0]
 8007df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	08009121 	.word	0x08009121
 8007dfc:	080091a1 	.word	0x080091a1

08007e00 <__multadd>:
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	690d      	ldr	r5, [r1, #16]
 8007e06:	4607      	mov	r7, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	f101 0c14 	add.w	ip, r1, #20
 8007e10:	2000      	movs	r0, #0
 8007e12:	f8dc 3000 	ldr.w	r3, [ip]
 8007e16:	b299      	uxth	r1, r3
 8007e18:	fb02 6101 	mla	r1, r2, r1, r6
 8007e1c:	0c1e      	lsrs	r6, r3, #16
 8007e1e:	0c0b      	lsrs	r3, r1, #16
 8007e20:	fb02 3306 	mla	r3, r2, r6, r3
 8007e24:	b289      	uxth	r1, r1
 8007e26:	3001      	adds	r0, #1
 8007e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e2c:	4285      	cmp	r5, r0
 8007e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e36:	dcec      	bgt.n	8007e12 <__multadd+0x12>
 8007e38:	b30e      	cbz	r6, 8007e7e <__multadd+0x7e>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dc19      	bgt.n	8007e74 <__multadd+0x74>
 8007e40:	6861      	ldr	r1, [r4, #4]
 8007e42:	4638      	mov	r0, r7
 8007e44:	3101      	adds	r1, #1
 8007e46:	f7ff ff79 	bl	8007d3c <_Balloc>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__multadd+0x5a>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <__multadd+0x84>)
 8007e52:	480d      	ldr	r0, [pc, #52]	; (8007e88 <__multadd+0x88>)
 8007e54:	21ba      	movs	r1, #186	; 0xba
 8007e56:	f000 fd93 	bl	8008980 <__assert_func>
 8007e5a:	6922      	ldr	r2, [r4, #16]
 8007e5c:	3202      	adds	r2, #2
 8007e5e:	f104 010c 	add.w	r1, r4, #12
 8007e62:	0092      	lsls	r2, r2, #2
 8007e64:	300c      	adds	r0, #12
 8007e66:	f000 fd7d 	bl	8008964 <memcpy>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff ffa5 	bl	8007dbc <_Bfree>
 8007e72:	4644      	mov	r4, r8
 8007e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e78:	3501      	adds	r5, #1
 8007e7a:	615e      	str	r6, [r3, #20]
 8007e7c:	6125      	str	r5, [r4, #16]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	08009190 	.word	0x08009190
 8007e88:	080091a1 	.word	0x080091a1

08007e8c <__hi0bits>:
 8007e8c:	0c03      	lsrs	r3, r0, #16
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	b9d3      	cbnz	r3, 8007ec8 <__hi0bits+0x3c>
 8007e92:	0400      	lsls	r0, r0, #16
 8007e94:	2310      	movs	r3, #16
 8007e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e9a:	bf04      	itt	eq
 8007e9c:	0200      	lsleq	r0, r0, #8
 8007e9e:	3308      	addeq	r3, #8
 8007ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ea4:	bf04      	itt	eq
 8007ea6:	0100      	lsleq	r0, r0, #4
 8007ea8:	3304      	addeq	r3, #4
 8007eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007eae:	bf04      	itt	eq
 8007eb0:	0080      	lsleq	r0, r0, #2
 8007eb2:	3302      	addeq	r3, #2
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	db05      	blt.n	8007ec4 <__hi0bits+0x38>
 8007eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ebc:	f103 0301 	add.w	r3, r3, #1
 8007ec0:	bf08      	it	eq
 8007ec2:	2320      	moveq	r3, #32
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4770      	bx	lr
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e7e4      	b.n	8007e96 <__hi0bits+0xa>

08007ecc <__lo0bits>:
 8007ecc:	6803      	ldr	r3, [r0, #0]
 8007ece:	f013 0207 	ands.w	r2, r3, #7
 8007ed2:	d00c      	beq.n	8007eee <__lo0bits+0x22>
 8007ed4:	07d9      	lsls	r1, r3, #31
 8007ed6:	d422      	bmi.n	8007f1e <__lo0bits+0x52>
 8007ed8:	079a      	lsls	r2, r3, #30
 8007eda:	bf49      	itett	mi
 8007edc:	085b      	lsrmi	r3, r3, #1
 8007ede:	089b      	lsrpl	r3, r3, #2
 8007ee0:	6003      	strmi	r3, [r0, #0]
 8007ee2:	2201      	movmi	r2, #1
 8007ee4:	bf5c      	itt	pl
 8007ee6:	6003      	strpl	r3, [r0, #0]
 8007ee8:	2202      	movpl	r2, #2
 8007eea:	4610      	mov	r0, r2
 8007eec:	4770      	bx	lr
 8007eee:	b299      	uxth	r1, r3
 8007ef0:	b909      	cbnz	r1, 8007ef6 <__lo0bits+0x2a>
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	b2d9      	uxtb	r1, r3
 8007ef8:	b909      	cbnz	r1, 8007efe <__lo0bits+0x32>
 8007efa:	3208      	adds	r2, #8
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	0719      	lsls	r1, r3, #28
 8007f00:	bf04      	itt	eq
 8007f02:	091b      	lsreq	r3, r3, #4
 8007f04:	3204      	addeq	r2, #4
 8007f06:	0799      	lsls	r1, r3, #30
 8007f08:	bf04      	itt	eq
 8007f0a:	089b      	lsreq	r3, r3, #2
 8007f0c:	3202      	addeq	r2, #2
 8007f0e:	07d9      	lsls	r1, r3, #31
 8007f10:	d403      	bmi.n	8007f1a <__lo0bits+0x4e>
 8007f12:	085b      	lsrs	r3, r3, #1
 8007f14:	f102 0201 	add.w	r2, r2, #1
 8007f18:	d003      	beq.n	8007f22 <__lo0bits+0x56>
 8007f1a:	6003      	str	r3, [r0, #0]
 8007f1c:	e7e5      	b.n	8007eea <__lo0bits+0x1e>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	e7e3      	b.n	8007eea <__lo0bits+0x1e>
 8007f22:	2220      	movs	r2, #32
 8007f24:	e7e1      	b.n	8007eea <__lo0bits+0x1e>
	...

08007f28 <__i2b>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	f7ff ff05 	bl	8007d3c <_Balloc>
 8007f32:	4602      	mov	r2, r0
 8007f34:	b928      	cbnz	r0, 8007f42 <__i2b+0x1a>
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <__i2b+0x24>)
 8007f38:	4805      	ldr	r0, [pc, #20]	; (8007f50 <__i2b+0x28>)
 8007f3a:	f240 1145 	movw	r1, #325	; 0x145
 8007f3e:	f000 fd1f 	bl	8008980 <__assert_func>
 8007f42:	2301      	movs	r3, #1
 8007f44:	6144      	str	r4, [r0, #20]
 8007f46:	6103      	str	r3, [r0, #16]
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08009190 	.word	0x08009190
 8007f50:	080091a1 	.word	0x080091a1

08007f54 <__multiply>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	4691      	mov	r9, r2
 8007f5a:	690a      	ldr	r2, [r1, #16]
 8007f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	bfb8      	it	lt
 8007f64:	460b      	movlt	r3, r1
 8007f66:	460c      	mov	r4, r1
 8007f68:	bfbc      	itt	lt
 8007f6a:	464c      	movlt	r4, r9
 8007f6c:	4699      	movlt	r9, r3
 8007f6e:	6927      	ldr	r7, [r4, #16]
 8007f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f74:	68a3      	ldr	r3, [r4, #8]
 8007f76:	6861      	ldr	r1, [r4, #4]
 8007f78:	eb07 060a 	add.w	r6, r7, sl
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	b085      	sub	sp, #20
 8007f80:	bfb8      	it	lt
 8007f82:	3101      	addlt	r1, #1
 8007f84:	f7ff feda 	bl	8007d3c <_Balloc>
 8007f88:	b930      	cbnz	r0, 8007f98 <__multiply+0x44>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b44      	ldr	r3, [pc, #272]	; (80080a0 <__multiply+0x14c>)
 8007f8e:	4845      	ldr	r0, [pc, #276]	; (80080a4 <__multiply+0x150>)
 8007f90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f94:	f000 fcf4 	bl	8008980 <__assert_func>
 8007f98:	f100 0514 	add.w	r5, r0, #20
 8007f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4543      	cmp	r3, r8
 8007fa6:	d321      	bcc.n	8007fec <__multiply+0x98>
 8007fa8:	f104 0314 	add.w	r3, r4, #20
 8007fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007fb0:	f109 0314 	add.w	r3, r9, #20
 8007fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007fb8:	9202      	str	r2, [sp, #8]
 8007fba:	1b3a      	subs	r2, r7, r4
 8007fbc:	3a15      	subs	r2, #21
 8007fbe:	f022 0203 	bic.w	r2, r2, #3
 8007fc2:	3204      	adds	r2, #4
 8007fc4:	f104 0115 	add.w	r1, r4, #21
 8007fc8:	428f      	cmp	r7, r1
 8007fca:	bf38      	it	cc
 8007fcc:	2204      	movcc	r2, #4
 8007fce:	9201      	str	r2, [sp, #4]
 8007fd0:	9a02      	ldr	r2, [sp, #8]
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d80c      	bhi.n	8007ff2 <__multiply+0x9e>
 8007fd8:	2e00      	cmp	r6, #0
 8007fda:	dd03      	ble.n	8007fe4 <__multiply+0x90>
 8007fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d05b      	beq.n	800809c <__multiply+0x148>
 8007fe4:	6106      	str	r6, [r0, #16]
 8007fe6:	b005      	add	sp, #20
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	f843 2b04 	str.w	r2, [r3], #4
 8007ff0:	e7d8      	b.n	8007fa4 <__multiply+0x50>
 8007ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ff6:	f1ba 0f00 	cmp.w	sl, #0
 8007ffa:	d024      	beq.n	8008046 <__multiply+0xf2>
 8007ffc:	f104 0e14 	add.w	lr, r4, #20
 8008000:	46a9      	mov	r9, r5
 8008002:	f04f 0c00 	mov.w	ip, #0
 8008006:	f85e 2b04 	ldr.w	r2, [lr], #4
 800800a:	f8d9 1000 	ldr.w	r1, [r9]
 800800e:	fa1f fb82 	uxth.w	fp, r2
 8008012:	b289      	uxth	r1, r1
 8008014:	fb0a 110b 	mla	r1, sl, fp, r1
 8008018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800801c:	f8d9 2000 	ldr.w	r2, [r9]
 8008020:	4461      	add	r1, ip
 8008022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008026:	fb0a c20b 	mla	r2, sl, fp, ip
 800802a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800802e:	b289      	uxth	r1, r1
 8008030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008034:	4577      	cmp	r7, lr
 8008036:	f849 1b04 	str.w	r1, [r9], #4
 800803a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800803e:	d8e2      	bhi.n	8008006 <__multiply+0xb2>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	f845 c002 	str.w	ip, [r5, r2]
 8008046:	9a03      	ldr	r2, [sp, #12]
 8008048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800804c:	3304      	adds	r3, #4
 800804e:	f1b9 0f00 	cmp.w	r9, #0
 8008052:	d021      	beq.n	8008098 <__multiply+0x144>
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	f104 0c14 	add.w	ip, r4, #20
 800805a:	46ae      	mov	lr, r5
 800805c:	f04f 0a00 	mov.w	sl, #0
 8008060:	f8bc b000 	ldrh.w	fp, [ip]
 8008064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008068:	fb09 220b 	mla	r2, r9, fp, r2
 800806c:	4452      	add	r2, sl
 800806e:	b289      	uxth	r1, r1
 8008070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008074:	f84e 1b04 	str.w	r1, [lr], #4
 8008078:	f85c 1b04 	ldr.w	r1, [ip], #4
 800807c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008080:	f8be 1000 	ldrh.w	r1, [lr]
 8008084:	fb09 110a 	mla	r1, r9, sl, r1
 8008088:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800808c:	4567      	cmp	r7, ip
 800808e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008092:	d8e5      	bhi.n	8008060 <__multiply+0x10c>
 8008094:	9a01      	ldr	r2, [sp, #4]
 8008096:	50a9      	str	r1, [r5, r2]
 8008098:	3504      	adds	r5, #4
 800809a:	e799      	b.n	8007fd0 <__multiply+0x7c>
 800809c:	3e01      	subs	r6, #1
 800809e:	e79b      	b.n	8007fd8 <__multiply+0x84>
 80080a0:	08009190 	.word	0x08009190
 80080a4:	080091a1 	.word	0x080091a1

080080a8 <__pow5mult>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	4615      	mov	r5, r2
 80080ae:	f012 0203 	ands.w	r2, r2, #3
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	d007      	beq.n	80080c8 <__pow5mult+0x20>
 80080b8:	4c25      	ldr	r4, [pc, #148]	; (8008150 <__pow5mult+0xa8>)
 80080ba:	3a01      	subs	r2, #1
 80080bc:	2300      	movs	r3, #0
 80080be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080c2:	f7ff fe9d 	bl	8007e00 <__multadd>
 80080c6:	4607      	mov	r7, r0
 80080c8:	10ad      	asrs	r5, r5, #2
 80080ca:	d03d      	beq.n	8008148 <__pow5mult+0xa0>
 80080cc:	69f4      	ldr	r4, [r6, #28]
 80080ce:	b97c      	cbnz	r4, 80080f0 <__pow5mult+0x48>
 80080d0:	2010      	movs	r0, #16
 80080d2:	f7ff fd7f 	bl	8007bd4 <malloc>
 80080d6:	4602      	mov	r2, r0
 80080d8:	61f0      	str	r0, [r6, #28]
 80080da:	b928      	cbnz	r0, 80080e8 <__pow5mult+0x40>
 80080dc:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <__pow5mult+0xac>)
 80080de:	481e      	ldr	r0, [pc, #120]	; (8008158 <__pow5mult+0xb0>)
 80080e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80080e4:	f000 fc4c 	bl	8008980 <__assert_func>
 80080e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080ec:	6004      	str	r4, [r0, #0]
 80080ee:	60c4      	str	r4, [r0, #12]
 80080f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80080f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080f8:	b94c      	cbnz	r4, 800810e <__pow5mult+0x66>
 80080fa:	f240 2171 	movw	r1, #625	; 0x271
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff ff12 	bl	8007f28 <__i2b>
 8008104:	2300      	movs	r3, #0
 8008106:	f8c8 0008 	str.w	r0, [r8, #8]
 800810a:	4604      	mov	r4, r0
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	f04f 0900 	mov.w	r9, #0
 8008112:	07eb      	lsls	r3, r5, #31
 8008114:	d50a      	bpl.n	800812c <__pow5mult+0x84>
 8008116:	4639      	mov	r1, r7
 8008118:	4622      	mov	r2, r4
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ff1a 	bl	8007f54 <__multiply>
 8008120:	4639      	mov	r1, r7
 8008122:	4680      	mov	r8, r0
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff fe49 	bl	8007dbc <_Bfree>
 800812a:	4647      	mov	r7, r8
 800812c:	106d      	asrs	r5, r5, #1
 800812e:	d00b      	beq.n	8008148 <__pow5mult+0xa0>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	b938      	cbnz	r0, 8008144 <__pow5mult+0x9c>
 8008134:	4622      	mov	r2, r4
 8008136:	4621      	mov	r1, r4
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff ff0b 	bl	8007f54 <__multiply>
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	f8c0 9000 	str.w	r9, [r0]
 8008144:	4604      	mov	r4, r0
 8008146:	e7e4      	b.n	8008112 <__pow5mult+0x6a>
 8008148:	4638      	mov	r0, r7
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	bf00      	nop
 8008150:	080092f0 	.word	0x080092f0
 8008154:	08009121 	.word	0x08009121
 8008158:	080091a1 	.word	0x080091a1

0800815c <__lshift>:
 800815c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	460c      	mov	r4, r1
 8008162:	6849      	ldr	r1, [r1, #4]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	4607      	mov	r7, r0
 800816e:	4691      	mov	r9, r2
 8008170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008174:	f108 0601 	add.w	r6, r8, #1
 8008178:	42b3      	cmp	r3, r6
 800817a:	db0b      	blt.n	8008194 <__lshift+0x38>
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff fddd 	bl	8007d3c <_Balloc>
 8008182:	4605      	mov	r5, r0
 8008184:	b948      	cbnz	r0, 800819a <__lshift+0x3e>
 8008186:	4602      	mov	r2, r0
 8008188:	4b28      	ldr	r3, [pc, #160]	; (800822c <__lshift+0xd0>)
 800818a:	4829      	ldr	r0, [pc, #164]	; (8008230 <__lshift+0xd4>)
 800818c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008190:	f000 fbf6 	bl	8008980 <__assert_func>
 8008194:	3101      	adds	r1, #1
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	e7ee      	b.n	8008178 <__lshift+0x1c>
 800819a:	2300      	movs	r3, #0
 800819c:	f100 0114 	add.w	r1, r0, #20
 80081a0:	f100 0210 	add.w	r2, r0, #16
 80081a4:	4618      	mov	r0, r3
 80081a6:	4553      	cmp	r3, sl
 80081a8:	db33      	blt.n	8008212 <__lshift+0xb6>
 80081aa:	6920      	ldr	r0, [r4, #16]
 80081ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081b0:	f104 0314 	add.w	r3, r4, #20
 80081b4:	f019 091f 	ands.w	r9, r9, #31
 80081b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081c0:	d02b      	beq.n	800821a <__lshift+0xbe>
 80081c2:	f1c9 0e20 	rsb	lr, r9, #32
 80081c6:	468a      	mov	sl, r1
 80081c8:	2200      	movs	r2, #0
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	fa00 f009 	lsl.w	r0, r0, r9
 80081d0:	4310      	orrs	r0, r2
 80081d2:	f84a 0b04 	str.w	r0, [sl], #4
 80081d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081da:	459c      	cmp	ip, r3
 80081dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80081e0:	d8f3      	bhi.n	80081ca <__lshift+0x6e>
 80081e2:	ebac 0304 	sub.w	r3, ip, r4
 80081e6:	3b15      	subs	r3, #21
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	3304      	adds	r3, #4
 80081ee:	f104 0015 	add.w	r0, r4, #21
 80081f2:	4584      	cmp	ip, r0
 80081f4:	bf38      	it	cc
 80081f6:	2304      	movcc	r3, #4
 80081f8:	50ca      	str	r2, [r1, r3]
 80081fa:	b10a      	cbz	r2, 8008200 <__lshift+0xa4>
 80081fc:	f108 0602 	add.w	r6, r8, #2
 8008200:	3e01      	subs	r6, #1
 8008202:	4638      	mov	r0, r7
 8008204:	612e      	str	r6, [r5, #16]
 8008206:	4621      	mov	r1, r4
 8008208:	f7ff fdd8 	bl	8007dbc <_Bfree>
 800820c:	4628      	mov	r0, r5
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	f842 0f04 	str.w	r0, [r2, #4]!
 8008216:	3301      	adds	r3, #1
 8008218:	e7c5      	b.n	80081a6 <__lshift+0x4a>
 800821a:	3904      	subs	r1, #4
 800821c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008220:	f841 2f04 	str.w	r2, [r1, #4]!
 8008224:	459c      	cmp	ip, r3
 8008226:	d8f9      	bhi.n	800821c <__lshift+0xc0>
 8008228:	e7ea      	b.n	8008200 <__lshift+0xa4>
 800822a:	bf00      	nop
 800822c:	08009190 	.word	0x08009190
 8008230:	080091a1 	.word	0x080091a1

08008234 <__mcmp>:
 8008234:	b530      	push	{r4, r5, lr}
 8008236:	6902      	ldr	r2, [r0, #16]
 8008238:	690c      	ldr	r4, [r1, #16]
 800823a:	1b12      	subs	r2, r2, r4
 800823c:	d10e      	bne.n	800825c <__mcmp+0x28>
 800823e:	f100 0314 	add.w	r3, r0, #20
 8008242:	3114      	adds	r1, #20
 8008244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800824c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008254:	42a5      	cmp	r5, r4
 8008256:	d003      	beq.n	8008260 <__mcmp+0x2c>
 8008258:	d305      	bcc.n	8008266 <__mcmp+0x32>
 800825a:	2201      	movs	r2, #1
 800825c:	4610      	mov	r0, r2
 800825e:	bd30      	pop	{r4, r5, pc}
 8008260:	4283      	cmp	r3, r0
 8008262:	d3f3      	bcc.n	800824c <__mcmp+0x18>
 8008264:	e7fa      	b.n	800825c <__mcmp+0x28>
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	e7f7      	b.n	800825c <__mcmp+0x28>

0800826c <__mdiff>:
 800826c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	460c      	mov	r4, r1
 8008272:	4606      	mov	r6, r0
 8008274:	4611      	mov	r1, r2
 8008276:	4620      	mov	r0, r4
 8008278:	4690      	mov	r8, r2
 800827a:	f7ff ffdb 	bl	8008234 <__mcmp>
 800827e:	1e05      	subs	r5, r0, #0
 8008280:	d110      	bne.n	80082a4 <__mdiff+0x38>
 8008282:	4629      	mov	r1, r5
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff fd59 	bl	8007d3c <_Balloc>
 800828a:	b930      	cbnz	r0, 800829a <__mdiff+0x2e>
 800828c:	4b3a      	ldr	r3, [pc, #232]	; (8008378 <__mdiff+0x10c>)
 800828e:	4602      	mov	r2, r0
 8008290:	f240 2137 	movw	r1, #567	; 0x237
 8008294:	4839      	ldr	r0, [pc, #228]	; (800837c <__mdiff+0x110>)
 8008296:	f000 fb73 	bl	8008980 <__assert_func>
 800829a:	2301      	movs	r3, #1
 800829c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a4:	bfa4      	itt	ge
 80082a6:	4643      	movge	r3, r8
 80082a8:	46a0      	movge	r8, r4
 80082aa:	4630      	mov	r0, r6
 80082ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082b0:	bfa6      	itte	ge
 80082b2:	461c      	movge	r4, r3
 80082b4:	2500      	movge	r5, #0
 80082b6:	2501      	movlt	r5, #1
 80082b8:	f7ff fd40 	bl	8007d3c <_Balloc>
 80082bc:	b920      	cbnz	r0, 80082c8 <__mdiff+0x5c>
 80082be:	4b2e      	ldr	r3, [pc, #184]	; (8008378 <__mdiff+0x10c>)
 80082c0:	4602      	mov	r2, r0
 80082c2:	f240 2145 	movw	r1, #581	; 0x245
 80082c6:	e7e5      	b.n	8008294 <__mdiff+0x28>
 80082c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80082cc:	6926      	ldr	r6, [r4, #16]
 80082ce:	60c5      	str	r5, [r0, #12]
 80082d0:	f104 0914 	add.w	r9, r4, #20
 80082d4:	f108 0514 	add.w	r5, r8, #20
 80082d8:	f100 0e14 	add.w	lr, r0, #20
 80082dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80082e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082e4:	f108 0210 	add.w	r2, r8, #16
 80082e8:	46f2      	mov	sl, lr
 80082ea:	2100      	movs	r1, #0
 80082ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80082f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80082f4:	fa11 f88b 	uxtah	r8, r1, fp
 80082f8:	b299      	uxth	r1, r3
 80082fa:	0c1b      	lsrs	r3, r3, #16
 80082fc:	eba8 0801 	sub.w	r8, r8, r1
 8008300:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008304:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008308:	fa1f f888 	uxth.w	r8, r8
 800830c:	1419      	asrs	r1, r3, #16
 800830e:	454e      	cmp	r6, r9
 8008310:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008314:	f84a 3b04 	str.w	r3, [sl], #4
 8008318:	d8e8      	bhi.n	80082ec <__mdiff+0x80>
 800831a:	1b33      	subs	r3, r6, r4
 800831c:	3b15      	subs	r3, #21
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	3304      	adds	r3, #4
 8008324:	3415      	adds	r4, #21
 8008326:	42a6      	cmp	r6, r4
 8008328:	bf38      	it	cc
 800832a:	2304      	movcc	r3, #4
 800832c:	441d      	add	r5, r3
 800832e:	4473      	add	r3, lr
 8008330:	469e      	mov	lr, r3
 8008332:	462e      	mov	r6, r5
 8008334:	4566      	cmp	r6, ip
 8008336:	d30e      	bcc.n	8008356 <__mdiff+0xea>
 8008338:	f10c 0203 	add.w	r2, ip, #3
 800833c:	1b52      	subs	r2, r2, r5
 800833e:	f022 0203 	bic.w	r2, r2, #3
 8008342:	3d03      	subs	r5, #3
 8008344:	45ac      	cmp	ip, r5
 8008346:	bf38      	it	cc
 8008348:	2200      	movcc	r2, #0
 800834a:	4413      	add	r3, r2
 800834c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008350:	b17a      	cbz	r2, 8008372 <__mdiff+0x106>
 8008352:	6107      	str	r7, [r0, #16]
 8008354:	e7a4      	b.n	80082a0 <__mdiff+0x34>
 8008356:	f856 8b04 	ldr.w	r8, [r6], #4
 800835a:	fa11 f288 	uxtah	r2, r1, r8
 800835e:	1414      	asrs	r4, r2, #16
 8008360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008364:	b292      	uxth	r2, r2
 8008366:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800836a:	f84e 2b04 	str.w	r2, [lr], #4
 800836e:	1421      	asrs	r1, r4, #16
 8008370:	e7e0      	b.n	8008334 <__mdiff+0xc8>
 8008372:	3f01      	subs	r7, #1
 8008374:	e7ea      	b.n	800834c <__mdiff+0xe0>
 8008376:	bf00      	nop
 8008378:	08009190 	.word	0x08009190
 800837c:	080091a1 	.word	0x080091a1

08008380 <__d2b>:
 8008380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008384:	460f      	mov	r7, r1
 8008386:	2101      	movs	r1, #1
 8008388:	ec59 8b10 	vmov	r8, r9, d0
 800838c:	4616      	mov	r6, r2
 800838e:	f7ff fcd5 	bl	8007d3c <_Balloc>
 8008392:	4604      	mov	r4, r0
 8008394:	b930      	cbnz	r0, 80083a4 <__d2b+0x24>
 8008396:	4602      	mov	r2, r0
 8008398:	4b24      	ldr	r3, [pc, #144]	; (800842c <__d2b+0xac>)
 800839a:	4825      	ldr	r0, [pc, #148]	; (8008430 <__d2b+0xb0>)
 800839c:	f240 310f 	movw	r1, #783	; 0x30f
 80083a0:	f000 faee 	bl	8008980 <__assert_func>
 80083a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ac:	bb2d      	cbnz	r5, 80083fa <__d2b+0x7a>
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	f1b8 0300 	subs.w	r3, r8, #0
 80083b4:	d026      	beq.n	8008404 <__d2b+0x84>
 80083b6:	4668      	mov	r0, sp
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	f7ff fd87 	bl	8007ecc <__lo0bits>
 80083be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083c2:	b1e8      	cbz	r0, 8008400 <__d2b+0x80>
 80083c4:	f1c0 0320 	rsb	r3, r0, #32
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	430b      	orrs	r3, r1
 80083ce:	40c2      	lsrs	r2, r0
 80083d0:	6163      	str	r3, [r4, #20]
 80083d2:	9201      	str	r2, [sp, #4]
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	61a3      	str	r3, [r4, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bf14      	ite	ne
 80083dc:	2202      	movne	r2, #2
 80083de:	2201      	moveq	r2, #1
 80083e0:	6122      	str	r2, [r4, #16]
 80083e2:	b1bd      	cbz	r5, 8008414 <__d2b+0x94>
 80083e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083e8:	4405      	add	r5, r0
 80083ea:	603d      	str	r5, [r7, #0]
 80083ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083f0:	6030      	str	r0, [r6, #0]
 80083f2:	4620      	mov	r0, r4
 80083f4:	b003      	add	sp, #12
 80083f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083fe:	e7d6      	b.n	80083ae <__d2b+0x2e>
 8008400:	6161      	str	r1, [r4, #20]
 8008402:	e7e7      	b.n	80083d4 <__d2b+0x54>
 8008404:	a801      	add	r0, sp, #4
 8008406:	f7ff fd61 	bl	8007ecc <__lo0bits>
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	6163      	str	r3, [r4, #20]
 800840e:	3020      	adds	r0, #32
 8008410:	2201      	movs	r2, #1
 8008412:	e7e5      	b.n	80083e0 <__d2b+0x60>
 8008414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800841c:	6038      	str	r0, [r7, #0]
 800841e:	6918      	ldr	r0, [r3, #16]
 8008420:	f7ff fd34 	bl	8007e8c <__hi0bits>
 8008424:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008428:	e7e2      	b.n	80083f0 <__d2b+0x70>
 800842a:	bf00      	nop
 800842c:	08009190 	.word	0x08009190
 8008430:	080091a1 	.word	0x080091a1

08008434 <__sfputc_r>:
 8008434:	6893      	ldr	r3, [r2, #8]
 8008436:	3b01      	subs	r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	b410      	push	{r4}
 800843c:	6093      	str	r3, [r2, #8]
 800843e:	da08      	bge.n	8008452 <__sfputc_r+0x1e>
 8008440:	6994      	ldr	r4, [r2, #24]
 8008442:	42a3      	cmp	r3, r4
 8008444:	db01      	blt.n	800844a <__sfputc_r+0x16>
 8008446:	290a      	cmp	r1, #10
 8008448:	d103      	bne.n	8008452 <__sfputc_r+0x1e>
 800844a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800844e:	f000 b9e3 	b.w	8008818 <__swbuf_r>
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	1c58      	adds	r0, r3, #1
 8008456:	6010      	str	r0, [r2, #0]
 8008458:	7019      	strb	r1, [r3, #0]
 800845a:	4608      	mov	r0, r1
 800845c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008460:	4770      	bx	lr

08008462 <__sfputs_r>:
 8008462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	4614      	mov	r4, r2
 800846a:	18d5      	adds	r5, r2, r3
 800846c:	42ac      	cmp	r4, r5
 800846e:	d101      	bne.n	8008474 <__sfputs_r+0x12>
 8008470:	2000      	movs	r0, #0
 8008472:	e007      	b.n	8008484 <__sfputs_r+0x22>
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	463a      	mov	r2, r7
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ffda 	bl	8008434 <__sfputc_r>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d1f3      	bne.n	800846c <__sfputs_r+0xa>
 8008484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008488 <_vfiprintf_r>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	460d      	mov	r5, r1
 800848e:	b09d      	sub	sp, #116	; 0x74
 8008490:	4614      	mov	r4, r2
 8008492:	4698      	mov	r8, r3
 8008494:	4606      	mov	r6, r0
 8008496:	b118      	cbz	r0, 80084a0 <_vfiprintf_r+0x18>
 8008498:	6a03      	ldr	r3, [r0, #32]
 800849a:	b90b      	cbnz	r3, 80084a0 <_vfiprintf_r+0x18>
 800849c:	f7fe fbc6 	bl	8006c2c <__sinit>
 80084a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a2:	07d9      	lsls	r1, r3, #31
 80084a4:	d405      	bmi.n	80084b2 <_vfiprintf_r+0x2a>
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	059a      	lsls	r2, r3, #22
 80084aa:	d402      	bmi.n	80084b2 <_vfiprintf_r+0x2a>
 80084ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ae:	f7fe fcc6 	bl	8006e3e <__retarget_lock_acquire_recursive>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	071b      	lsls	r3, r3, #28
 80084b6:	d501      	bpl.n	80084bc <_vfiprintf_r+0x34>
 80084b8:	692b      	ldr	r3, [r5, #16]
 80084ba:	b99b      	cbnz	r3, 80084e4 <_vfiprintf_r+0x5c>
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f9e8 	bl	8008894 <__swsetup_r>
 80084c4:	b170      	cbz	r0, 80084e4 <_vfiprintf_r+0x5c>
 80084c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c8:	07dc      	lsls	r4, r3, #31
 80084ca:	d504      	bpl.n	80084d6 <_vfiprintf_r+0x4e>
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	b01d      	add	sp, #116	; 0x74
 80084d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	0598      	lsls	r0, r3, #22
 80084da:	d4f7      	bmi.n	80084cc <_vfiprintf_r+0x44>
 80084dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084de:	f7fe fcaf 	bl	8006e40 <__retarget_lock_release_recursive>
 80084e2:	e7f3      	b.n	80084cc <_vfiprintf_r+0x44>
 80084e4:	2300      	movs	r3, #0
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	2320      	movs	r3, #32
 80084ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f2:	2330      	movs	r3, #48	; 0x30
 80084f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086a8 <_vfiprintf_r+0x220>
 80084f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fc:	f04f 0901 	mov.w	r9, #1
 8008500:	4623      	mov	r3, r4
 8008502:	469a      	mov	sl, r3
 8008504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008508:	b10a      	cbz	r2, 800850e <_vfiprintf_r+0x86>
 800850a:	2a25      	cmp	r2, #37	; 0x25
 800850c:	d1f9      	bne.n	8008502 <_vfiprintf_r+0x7a>
 800850e:	ebba 0b04 	subs.w	fp, sl, r4
 8008512:	d00b      	beq.n	800852c <_vfiprintf_r+0xa4>
 8008514:	465b      	mov	r3, fp
 8008516:	4622      	mov	r2, r4
 8008518:	4629      	mov	r1, r5
 800851a:	4630      	mov	r0, r6
 800851c:	f7ff ffa1 	bl	8008462 <__sfputs_r>
 8008520:	3001      	adds	r0, #1
 8008522:	f000 80a9 	beq.w	8008678 <_vfiprintf_r+0x1f0>
 8008526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008528:	445a      	add	r2, fp
 800852a:	9209      	str	r2, [sp, #36]	; 0x24
 800852c:	f89a 3000 	ldrb.w	r3, [sl]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80a1 	beq.w	8008678 <_vfiprintf_r+0x1f0>
 8008536:	2300      	movs	r3, #0
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008540:	f10a 0a01 	add.w	sl, sl, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854c:	931a      	str	r3, [sp, #104]	; 0x68
 800854e:	4654      	mov	r4, sl
 8008550:	2205      	movs	r2, #5
 8008552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008556:	4854      	ldr	r0, [pc, #336]	; (80086a8 <_vfiprintf_r+0x220>)
 8008558:	f7f7 fe5a 	bl	8000210 <memchr>
 800855c:	9a04      	ldr	r2, [sp, #16]
 800855e:	b9d8      	cbnz	r0, 8008598 <_vfiprintf_r+0x110>
 8008560:	06d1      	lsls	r1, r2, #27
 8008562:	bf44      	itt	mi
 8008564:	2320      	movmi	r3, #32
 8008566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856a:	0713      	lsls	r3, r2, #28
 800856c:	bf44      	itt	mi
 800856e:	232b      	movmi	r3, #43	; 0x2b
 8008570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008574:	f89a 3000 	ldrb.w	r3, [sl]
 8008578:	2b2a      	cmp	r3, #42	; 0x2a
 800857a:	d015      	beq.n	80085a8 <_vfiprintf_r+0x120>
 800857c:	9a07      	ldr	r2, [sp, #28]
 800857e:	4654      	mov	r4, sl
 8008580:	2000      	movs	r0, #0
 8008582:	f04f 0c0a 	mov.w	ip, #10
 8008586:	4621      	mov	r1, r4
 8008588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858c:	3b30      	subs	r3, #48	; 0x30
 800858e:	2b09      	cmp	r3, #9
 8008590:	d94d      	bls.n	800862e <_vfiprintf_r+0x1a6>
 8008592:	b1b0      	cbz	r0, 80085c2 <_vfiprintf_r+0x13a>
 8008594:	9207      	str	r2, [sp, #28]
 8008596:	e014      	b.n	80085c2 <_vfiprintf_r+0x13a>
 8008598:	eba0 0308 	sub.w	r3, r0, r8
 800859c:	fa09 f303 	lsl.w	r3, r9, r3
 80085a0:	4313      	orrs	r3, r2
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	46a2      	mov	sl, r4
 80085a6:	e7d2      	b.n	800854e <_vfiprintf_r+0xc6>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	1d19      	adds	r1, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	9103      	str	r1, [sp, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfbb      	ittet	lt
 80085b4:	425b      	neglt	r3, r3
 80085b6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ba:	9307      	strge	r3, [sp, #28]
 80085bc:	9307      	strlt	r3, [sp, #28]
 80085be:	bfb8      	it	lt
 80085c0:	9204      	strlt	r2, [sp, #16]
 80085c2:	7823      	ldrb	r3, [r4, #0]
 80085c4:	2b2e      	cmp	r3, #46	; 0x2e
 80085c6:	d10c      	bne.n	80085e2 <_vfiprintf_r+0x15a>
 80085c8:	7863      	ldrb	r3, [r4, #1]
 80085ca:	2b2a      	cmp	r3, #42	; 0x2a
 80085cc:	d134      	bne.n	8008638 <_vfiprintf_r+0x1b0>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9203      	str	r2, [sp, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfb8      	it	lt
 80085da:	f04f 33ff 	movlt.w	r3, #4294967295
 80085de:	3402      	adds	r4, #2
 80085e0:	9305      	str	r3, [sp, #20]
 80085e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086b8 <_vfiprintf_r+0x230>
 80085e6:	7821      	ldrb	r1, [r4, #0]
 80085e8:	2203      	movs	r2, #3
 80085ea:	4650      	mov	r0, sl
 80085ec:	f7f7 fe10 	bl	8000210 <memchr>
 80085f0:	b138      	cbz	r0, 8008602 <_vfiprintf_r+0x17a>
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	eba0 000a 	sub.w	r0, r0, sl
 80085f8:	2240      	movs	r2, #64	; 0x40
 80085fa:	4082      	lsls	r2, r0
 80085fc:	4313      	orrs	r3, r2
 80085fe:	3401      	adds	r4, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4829      	ldr	r0, [pc, #164]	; (80086ac <_vfiprintf_r+0x224>)
 8008608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860c:	2206      	movs	r2, #6
 800860e:	f7f7 fdff 	bl	8000210 <memchr>
 8008612:	2800      	cmp	r0, #0
 8008614:	d03f      	beq.n	8008696 <_vfiprintf_r+0x20e>
 8008616:	4b26      	ldr	r3, [pc, #152]	; (80086b0 <_vfiprintf_r+0x228>)
 8008618:	bb1b      	cbnz	r3, 8008662 <_vfiprintf_r+0x1da>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	f023 0307 	bic.w	r3, r3, #7
 8008622:	3308      	adds	r3, #8
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	443b      	add	r3, r7
 800862a:	9309      	str	r3, [sp, #36]	; 0x24
 800862c:	e768      	b.n	8008500 <_vfiprintf_r+0x78>
 800862e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008632:	460c      	mov	r4, r1
 8008634:	2001      	movs	r0, #1
 8008636:	e7a6      	b.n	8008586 <_vfiprintf_r+0xfe>
 8008638:	2300      	movs	r3, #0
 800863a:	3401      	adds	r4, #1
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	4619      	mov	r1, r3
 8008640:	f04f 0c0a 	mov.w	ip, #10
 8008644:	4620      	mov	r0, r4
 8008646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864a:	3a30      	subs	r2, #48	; 0x30
 800864c:	2a09      	cmp	r2, #9
 800864e:	d903      	bls.n	8008658 <_vfiprintf_r+0x1d0>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0c6      	beq.n	80085e2 <_vfiprintf_r+0x15a>
 8008654:	9105      	str	r1, [sp, #20]
 8008656:	e7c4      	b.n	80085e2 <_vfiprintf_r+0x15a>
 8008658:	fb0c 2101 	mla	r1, ip, r1, r2
 800865c:	4604      	mov	r4, r0
 800865e:	2301      	movs	r3, #1
 8008660:	e7f0      	b.n	8008644 <_vfiprintf_r+0x1bc>
 8008662:	ab03      	add	r3, sp, #12
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	462a      	mov	r2, r5
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <_vfiprintf_r+0x22c>)
 800866a:	a904      	add	r1, sp, #16
 800866c:	4630      	mov	r0, r6
 800866e:	f7fd fe8b 	bl	8006388 <_printf_float>
 8008672:	4607      	mov	r7, r0
 8008674:	1c78      	adds	r0, r7, #1
 8008676:	d1d6      	bne.n	8008626 <_vfiprintf_r+0x19e>
 8008678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867a:	07d9      	lsls	r1, r3, #31
 800867c:	d405      	bmi.n	800868a <_vfiprintf_r+0x202>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	059a      	lsls	r2, r3, #22
 8008682:	d402      	bmi.n	800868a <_vfiprintf_r+0x202>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7fe fbdb 	bl	8006e40 <__retarget_lock_release_recursive>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	065b      	lsls	r3, r3, #25
 800868e:	f53f af1d 	bmi.w	80084cc <_vfiprintf_r+0x44>
 8008692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008694:	e71c      	b.n	80084d0 <_vfiprintf_r+0x48>
 8008696:	ab03      	add	r3, sp, #12
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	462a      	mov	r2, r5
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <_vfiprintf_r+0x22c>)
 800869e:	a904      	add	r1, sp, #16
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7fe f915 	bl	80068d0 <_printf_i>
 80086a6:	e7e4      	b.n	8008672 <_vfiprintf_r+0x1ea>
 80086a8:	080092fc 	.word	0x080092fc
 80086ac:	08009306 	.word	0x08009306
 80086b0:	08006389 	.word	0x08006389
 80086b4:	08008463 	.word	0x08008463
 80086b8:	08009302 	.word	0x08009302

080086bc <__sflush_r>:
 80086bc:	898a      	ldrh	r2, [r1, #12]
 80086be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	0710      	lsls	r0, r2, #28
 80086c6:	460c      	mov	r4, r1
 80086c8:	d458      	bmi.n	800877c <__sflush_r+0xc0>
 80086ca:	684b      	ldr	r3, [r1, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dc05      	bgt.n	80086dc <__sflush_r+0x20>
 80086d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dc02      	bgt.n	80086dc <__sflush_r+0x20>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086de:	2e00      	cmp	r6, #0
 80086e0:	d0f9      	beq.n	80086d6 <__sflush_r+0x1a>
 80086e2:	2300      	movs	r3, #0
 80086e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086e8:	682f      	ldr	r7, [r5, #0]
 80086ea:	6a21      	ldr	r1, [r4, #32]
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	d032      	beq.n	8008756 <__sflush_r+0x9a>
 80086f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	075a      	lsls	r2, r3, #29
 80086f6:	d505      	bpl.n	8008704 <__sflush_r+0x48>
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	1ac0      	subs	r0, r0, r3
 80086fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086fe:	b10b      	cbz	r3, 8008704 <__sflush_r+0x48>
 8008700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008702:	1ac0      	subs	r0, r0, r3
 8008704:	2300      	movs	r3, #0
 8008706:	4602      	mov	r2, r0
 8008708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800870a:	6a21      	ldr	r1, [r4, #32]
 800870c:	4628      	mov	r0, r5
 800870e:	47b0      	blx	r6
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	d106      	bne.n	8008724 <__sflush_r+0x68>
 8008716:	6829      	ldr	r1, [r5, #0]
 8008718:	291d      	cmp	r1, #29
 800871a:	d82b      	bhi.n	8008774 <__sflush_r+0xb8>
 800871c:	4a29      	ldr	r2, [pc, #164]	; (80087c4 <__sflush_r+0x108>)
 800871e:	410a      	asrs	r2, r1
 8008720:	07d6      	lsls	r6, r2, #31
 8008722:	d427      	bmi.n	8008774 <__sflush_r+0xb8>
 8008724:	2200      	movs	r2, #0
 8008726:	6062      	str	r2, [r4, #4]
 8008728:	04d9      	lsls	r1, r3, #19
 800872a:	6922      	ldr	r2, [r4, #16]
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	d504      	bpl.n	800873a <__sflush_r+0x7e>
 8008730:	1c42      	adds	r2, r0, #1
 8008732:	d101      	bne.n	8008738 <__sflush_r+0x7c>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b903      	cbnz	r3, 800873a <__sflush_r+0x7e>
 8008738:	6560      	str	r0, [r4, #84]	; 0x54
 800873a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873c:	602f      	str	r7, [r5, #0]
 800873e:	2900      	cmp	r1, #0
 8008740:	d0c9      	beq.n	80086d6 <__sflush_r+0x1a>
 8008742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008746:	4299      	cmp	r1, r3
 8008748:	d002      	beq.n	8008750 <__sflush_r+0x94>
 800874a:	4628      	mov	r0, r5
 800874c:	f7ff f9f6 	bl	8007b3c <_free_r>
 8008750:	2000      	movs	r0, #0
 8008752:	6360      	str	r0, [r4, #52]	; 0x34
 8008754:	e7c0      	b.n	80086d8 <__sflush_r+0x1c>
 8008756:	2301      	movs	r3, #1
 8008758:	4628      	mov	r0, r5
 800875a:	47b0      	blx	r6
 800875c:	1c41      	adds	r1, r0, #1
 800875e:	d1c8      	bne.n	80086f2 <__sflush_r+0x36>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c5      	beq.n	80086f2 <__sflush_r+0x36>
 8008766:	2b1d      	cmp	r3, #29
 8008768:	d001      	beq.n	800876e <__sflush_r+0xb2>
 800876a:	2b16      	cmp	r3, #22
 800876c:	d101      	bne.n	8008772 <__sflush_r+0xb6>
 800876e:	602f      	str	r7, [r5, #0]
 8008770:	e7b1      	b.n	80086d6 <__sflush_r+0x1a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	e7ad      	b.n	80086d8 <__sflush_r+0x1c>
 800877c:	690f      	ldr	r7, [r1, #16]
 800877e:	2f00      	cmp	r7, #0
 8008780:	d0a9      	beq.n	80086d6 <__sflush_r+0x1a>
 8008782:	0793      	lsls	r3, r2, #30
 8008784:	680e      	ldr	r6, [r1, #0]
 8008786:	bf08      	it	eq
 8008788:	694b      	ldreq	r3, [r1, #20]
 800878a:	600f      	str	r7, [r1, #0]
 800878c:	bf18      	it	ne
 800878e:	2300      	movne	r3, #0
 8008790:	eba6 0807 	sub.w	r8, r6, r7
 8008794:	608b      	str	r3, [r1, #8]
 8008796:	f1b8 0f00 	cmp.w	r8, #0
 800879a:	dd9c      	ble.n	80086d6 <__sflush_r+0x1a>
 800879c:	6a21      	ldr	r1, [r4, #32]
 800879e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087a0:	4643      	mov	r3, r8
 80087a2:	463a      	mov	r2, r7
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b0      	blx	r6
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dc06      	bgt.n	80087ba <__sflush_r+0xfe>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e78e      	b.n	80086d8 <__sflush_r+0x1c>
 80087ba:	4407      	add	r7, r0
 80087bc:	eba8 0800 	sub.w	r8, r8, r0
 80087c0:	e7e9      	b.n	8008796 <__sflush_r+0xda>
 80087c2:	bf00      	nop
 80087c4:	dfbffffe 	.word	0xdfbffffe

080087c8 <_fflush_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b913      	cbnz	r3, 80087d8 <_fflush_r+0x10>
 80087d2:	2500      	movs	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	b118      	cbz	r0, 80087e2 <_fflush_r+0x1a>
 80087da:	6a03      	ldr	r3, [r0, #32]
 80087dc:	b90b      	cbnz	r3, 80087e2 <_fflush_r+0x1a>
 80087de:	f7fe fa25 	bl	8006c2c <__sinit>
 80087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f3      	beq.n	80087d2 <_fflush_r+0xa>
 80087ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087ec:	07d0      	lsls	r0, r2, #31
 80087ee:	d404      	bmi.n	80087fa <_fflush_r+0x32>
 80087f0:	0599      	lsls	r1, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_fflush_r+0x32>
 80087f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087f6:	f7fe fb22 	bl	8006e3e <__retarget_lock_acquire_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7ff ff5d 	bl	80086bc <__sflush_r>
 8008802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008804:	07da      	lsls	r2, r3, #31
 8008806:	4605      	mov	r5, r0
 8008808:	d4e4      	bmi.n	80087d4 <_fflush_r+0xc>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d4e1      	bmi.n	80087d4 <_fflush_r+0xc>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f7fe fb15 	bl	8006e40 <__retarget_lock_release_recursive>
 8008816:	e7dd      	b.n	80087d4 <_fflush_r+0xc>

08008818 <__swbuf_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	460e      	mov	r6, r1
 800881c:	4614      	mov	r4, r2
 800881e:	4605      	mov	r5, r0
 8008820:	b118      	cbz	r0, 800882a <__swbuf_r+0x12>
 8008822:	6a03      	ldr	r3, [r0, #32]
 8008824:	b90b      	cbnz	r3, 800882a <__swbuf_r+0x12>
 8008826:	f7fe fa01 	bl	8006c2c <__sinit>
 800882a:	69a3      	ldr	r3, [r4, #24]
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	071a      	lsls	r2, r3, #28
 8008832:	d525      	bpl.n	8008880 <__swbuf_r+0x68>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	b31b      	cbz	r3, 8008880 <__swbuf_r+0x68>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	6922      	ldr	r2, [r4, #16]
 800883c:	1a98      	subs	r0, r3, r2
 800883e:	6963      	ldr	r3, [r4, #20]
 8008840:	b2f6      	uxtb	r6, r6
 8008842:	4283      	cmp	r3, r0
 8008844:	4637      	mov	r7, r6
 8008846:	dc04      	bgt.n	8008852 <__swbuf_r+0x3a>
 8008848:	4621      	mov	r1, r4
 800884a:	4628      	mov	r0, r5
 800884c:	f7ff ffbc 	bl	80087c8 <_fflush_r>
 8008850:	b9e0      	cbnz	r0, 800888c <__swbuf_r+0x74>
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	3b01      	subs	r3, #1
 8008856:	60a3      	str	r3, [r4, #8]
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	701e      	strb	r6, [r3, #0]
 8008860:	6962      	ldr	r2, [r4, #20]
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	429a      	cmp	r2, r3
 8008866:	d004      	beq.n	8008872 <__swbuf_r+0x5a>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	07db      	lsls	r3, r3, #31
 800886c:	d506      	bpl.n	800887c <__swbuf_r+0x64>
 800886e:	2e0a      	cmp	r6, #10
 8008870:	d104      	bne.n	800887c <__swbuf_r+0x64>
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f7ff ffa7 	bl	80087c8 <_fflush_r>
 800887a:	b938      	cbnz	r0, 800888c <__swbuf_r+0x74>
 800887c:	4638      	mov	r0, r7
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008880:	4621      	mov	r1, r4
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f806 	bl	8008894 <__swsetup_r>
 8008888:	2800      	cmp	r0, #0
 800888a:	d0d5      	beq.n	8008838 <__swbuf_r+0x20>
 800888c:	f04f 37ff 	mov.w	r7, #4294967295
 8008890:	e7f4      	b.n	800887c <__swbuf_r+0x64>
	...

08008894 <__swsetup_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <__swsetup_r+0xac>)
 8008898:	4605      	mov	r5, r0
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	460c      	mov	r4, r1
 800889e:	b118      	cbz	r0, 80088a8 <__swsetup_r+0x14>
 80088a0:	6a03      	ldr	r3, [r0, #32]
 80088a2:	b90b      	cbnz	r3, 80088a8 <__swsetup_r+0x14>
 80088a4:	f7fe f9c2 	bl	8006c2c <__sinit>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088ae:	0718      	lsls	r0, r3, #28
 80088b0:	d422      	bmi.n	80088f8 <__swsetup_r+0x64>
 80088b2:	06d9      	lsls	r1, r3, #27
 80088b4:	d407      	bmi.n	80088c6 <__swsetup_r+0x32>
 80088b6:	2309      	movs	r3, #9
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e034      	b.n	8008930 <__swsetup_r+0x9c>
 80088c6:	0758      	lsls	r0, r3, #29
 80088c8:	d512      	bpl.n	80088f0 <__swsetup_r+0x5c>
 80088ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088cc:	b141      	cbz	r1, 80088e0 <__swsetup_r+0x4c>
 80088ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d2:	4299      	cmp	r1, r3
 80088d4:	d002      	beq.n	80088dc <__swsetup_r+0x48>
 80088d6:	4628      	mov	r0, r5
 80088d8:	f7ff f930 	bl	8007b3c <_free_r>
 80088dc:	2300      	movs	r3, #0
 80088de:	6363      	str	r3, [r4, #52]	; 0x34
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	2300      	movs	r3, #0
 80088ea:	6063      	str	r3, [r4, #4]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f043 0308 	orr.w	r3, r3, #8
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	b94b      	cbnz	r3, 8008910 <__swsetup_r+0x7c>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008906:	d003      	beq.n	8008910 <__swsetup_r+0x7c>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f8c4 	bl	8008a98 <__smakebuf_r>
 8008910:	89a0      	ldrh	r0, [r4, #12]
 8008912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008916:	f010 0301 	ands.w	r3, r0, #1
 800891a:	d00a      	beq.n	8008932 <__swsetup_r+0x9e>
 800891c:	2300      	movs	r3, #0
 800891e:	60a3      	str	r3, [r4, #8]
 8008920:	6963      	ldr	r3, [r4, #20]
 8008922:	425b      	negs	r3, r3
 8008924:	61a3      	str	r3, [r4, #24]
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	b943      	cbnz	r3, 800893c <__swsetup_r+0xa8>
 800892a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800892e:	d1c4      	bne.n	80088ba <__swsetup_r+0x26>
 8008930:	bd38      	pop	{r3, r4, r5, pc}
 8008932:	0781      	lsls	r1, r0, #30
 8008934:	bf58      	it	pl
 8008936:	6963      	ldrpl	r3, [r4, #20]
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	e7f4      	b.n	8008926 <__swsetup_r+0x92>
 800893c:	2000      	movs	r0, #0
 800893e:	e7f7      	b.n	8008930 <__swsetup_r+0x9c>
 8008940:	200000f8 	.word	0x200000f8

08008944 <_sbrk_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_sbrk_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7f9 fa04 	bl	8001d5c <_sbrk>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_sbrk_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_sbrk_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	2000069c 	.word	0x2000069c

08008964 <memcpy>:
 8008964:	440a      	add	r2, r1
 8008966:	4291      	cmp	r1, r2
 8008968:	f100 33ff 	add.w	r3, r0, #4294967295
 800896c:	d100      	bne.n	8008970 <memcpy+0xc>
 800896e:	4770      	bx	lr
 8008970:	b510      	push	{r4, lr}
 8008972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897a:	4291      	cmp	r1, r2
 800897c:	d1f9      	bne.n	8008972 <memcpy+0xe>
 800897e:	bd10      	pop	{r4, pc}

08008980 <__assert_func>:
 8008980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008982:	4614      	mov	r4, r2
 8008984:	461a      	mov	r2, r3
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <__assert_func+0x2c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4605      	mov	r5, r0
 800898c:	68d8      	ldr	r0, [r3, #12]
 800898e:	b14c      	cbz	r4, 80089a4 <__assert_func+0x24>
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <__assert_func+0x30>)
 8008992:	9100      	str	r1, [sp, #0]
 8008994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008998:	4906      	ldr	r1, [pc, #24]	; (80089b4 <__assert_func+0x34>)
 800899a:	462b      	mov	r3, r5
 800899c:	f000 f844 	bl	8008a28 <fiprintf>
 80089a0:	f000 f8d8 	bl	8008b54 <abort>
 80089a4:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <__assert_func+0x38>)
 80089a6:	461c      	mov	r4, r3
 80089a8:	e7f3      	b.n	8008992 <__assert_func+0x12>
 80089aa:	bf00      	nop
 80089ac:	200000f8 	.word	0x200000f8
 80089b0:	08009317 	.word	0x08009317
 80089b4:	08009324 	.word	0x08009324
 80089b8:	08009352 	.word	0x08009352

080089bc <_calloc_r>:
 80089bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089be:	fba1 2402 	umull	r2, r4, r1, r2
 80089c2:	b94c      	cbnz	r4, 80089d8 <_calloc_r+0x1c>
 80089c4:	4611      	mov	r1, r2
 80089c6:	9201      	str	r2, [sp, #4]
 80089c8:	f7ff f92c 	bl	8007c24 <_malloc_r>
 80089cc:	9a01      	ldr	r2, [sp, #4]
 80089ce:	4605      	mov	r5, r0
 80089d0:	b930      	cbnz	r0, 80089e0 <_calloc_r+0x24>
 80089d2:	4628      	mov	r0, r5
 80089d4:	b003      	add	sp, #12
 80089d6:	bd30      	pop	{r4, r5, pc}
 80089d8:	220c      	movs	r2, #12
 80089da:	6002      	str	r2, [r0, #0]
 80089dc:	2500      	movs	r5, #0
 80089de:	e7f8      	b.n	80089d2 <_calloc_r+0x16>
 80089e0:	4621      	mov	r1, r4
 80089e2:	f7fe f9ae 	bl	8006d42 <memset>
 80089e6:	e7f4      	b.n	80089d2 <_calloc_r+0x16>

080089e8 <__ascii_mbtowc>:
 80089e8:	b082      	sub	sp, #8
 80089ea:	b901      	cbnz	r1, 80089ee <__ascii_mbtowc+0x6>
 80089ec:	a901      	add	r1, sp, #4
 80089ee:	b142      	cbz	r2, 8008a02 <__ascii_mbtowc+0x1a>
 80089f0:	b14b      	cbz	r3, 8008a06 <__ascii_mbtowc+0x1e>
 80089f2:	7813      	ldrb	r3, [r2, #0]
 80089f4:	600b      	str	r3, [r1, #0]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	1e10      	subs	r0, r2, #0
 80089fa:	bf18      	it	ne
 80089fc:	2001      	movne	r0, #1
 80089fe:	b002      	add	sp, #8
 8008a00:	4770      	bx	lr
 8008a02:	4610      	mov	r0, r2
 8008a04:	e7fb      	b.n	80089fe <__ascii_mbtowc+0x16>
 8008a06:	f06f 0001 	mvn.w	r0, #1
 8008a0a:	e7f8      	b.n	80089fe <__ascii_mbtowc+0x16>

08008a0c <__ascii_wctomb>:
 8008a0c:	b149      	cbz	r1, 8008a22 <__ascii_wctomb+0x16>
 8008a0e:	2aff      	cmp	r2, #255	; 0xff
 8008a10:	bf85      	ittet	hi
 8008a12:	238a      	movhi	r3, #138	; 0x8a
 8008a14:	6003      	strhi	r3, [r0, #0]
 8008a16:	700a      	strbls	r2, [r1, #0]
 8008a18:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a1c:	bf98      	it	ls
 8008a1e:	2001      	movls	r0, #1
 8008a20:	4770      	bx	lr
 8008a22:	4608      	mov	r0, r1
 8008a24:	4770      	bx	lr
	...

08008a28 <fiprintf>:
 8008a28:	b40e      	push	{r1, r2, r3}
 8008a2a:	b503      	push	{r0, r1, lr}
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	ab03      	add	r3, sp, #12
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <fiprintf+0x20>)
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f7ff fd25 	bl	8008488 <_vfiprintf_r>
 8008a3e:	b002      	add	sp, #8
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b003      	add	sp, #12
 8008a46:	4770      	bx	lr
 8008a48:	200000f8 	.word	0x200000f8

08008a4c <__swhatbuf_r>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	460c      	mov	r4, r1
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	2900      	cmp	r1, #0
 8008a56:	b096      	sub	sp, #88	; 0x58
 8008a58:	4615      	mov	r5, r2
 8008a5a:	461e      	mov	r6, r3
 8008a5c:	da0d      	bge.n	8008a7a <__swhatbuf_r+0x2e>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	bf0c      	ite	eq
 8008a6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a6e:	2340      	movne	r3, #64	; 0x40
 8008a70:	2000      	movs	r0, #0
 8008a72:	6031      	str	r1, [r6, #0]
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	b016      	add	sp, #88	; 0x58
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	466a      	mov	r2, sp
 8008a7c:	f000 f848 	bl	8008b10 <_fstat_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	dbec      	blt.n	8008a5e <__swhatbuf_r+0x12>
 8008a84:	9901      	ldr	r1, [sp, #4]
 8008a86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a8e:	4259      	negs	r1, r3
 8008a90:	4159      	adcs	r1, r3
 8008a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a96:	e7eb      	b.n	8008a70 <__swhatbuf_r+0x24>

08008a98 <__smakebuf_r>:
 8008a98:	898b      	ldrh	r3, [r1, #12]
 8008a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a9c:	079d      	lsls	r5, r3, #30
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	d507      	bpl.n	8008ab4 <__smakebuf_r+0x1c>
 8008aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	6123      	str	r3, [r4, #16]
 8008aac:	2301      	movs	r3, #1
 8008aae:	6163      	str	r3, [r4, #20]
 8008ab0:	b002      	add	sp, #8
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	ab01      	add	r3, sp, #4
 8008ab6:	466a      	mov	r2, sp
 8008ab8:	f7ff ffc8 	bl	8008a4c <__swhatbuf_r>
 8008abc:	9900      	ldr	r1, [sp, #0]
 8008abe:	4605      	mov	r5, r0
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff f8af 	bl	8007c24 <_malloc_r>
 8008ac6:	b948      	cbnz	r0, 8008adc <__smakebuf_r+0x44>
 8008ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008acc:	059a      	lsls	r2, r3, #22
 8008ace:	d4ef      	bmi.n	8008ab0 <__smakebuf_r+0x18>
 8008ad0:	f023 0303 	bic.w	r3, r3, #3
 8008ad4:	f043 0302 	orr.w	r3, r3, #2
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7e3      	b.n	8008aa4 <__smakebuf_r+0xc>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	6163      	str	r3, [r4, #20]
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	6120      	str	r0, [r4, #16]
 8008aee:	b15b      	cbz	r3, 8008b08 <__smakebuf_r+0x70>
 8008af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af4:	4630      	mov	r0, r6
 8008af6:	f000 f81d 	bl	8008b34 <_isatty_r>
 8008afa:	b128      	cbz	r0, 8008b08 <__smakebuf_r+0x70>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	431d      	orrs	r5, r3
 8008b0c:	81a5      	strh	r5, [r4, #12]
 8008b0e:	e7cf      	b.n	8008ab0 <__smakebuf_r+0x18>

08008b10 <_fstat_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	; (8008b30 <_fstat_r+0x20>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	f7f9 f8f4 	bl	8001d0a <_fstat>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d102      	bne.n	8008b2c <_fstat_r+0x1c>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	b103      	cbz	r3, 8008b2c <_fstat_r+0x1c>
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000069c 	.word	0x2000069c

08008b34 <_isatty_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d06      	ldr	r5, [pc, #24]	; (8008b50 <_isatty_r+0x1c>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	f7f9 f8f3 	bl	8001d2a <_isatty>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_isatty_r+0x1a>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_isatty_r+0x1a>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	2000069c 	.word	0x2000069c

08008b54 <abort>:
 8008b54:	b508      	push	{r3, lr}
 8008b56:	2006      	movs	r0, #6
 8008b58:	f000 f82c 	bl	8008bb4 <raise>
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	f7f9 f8a1 	bl	8001ca4 <_exit>

08008b62 <_raise_r>:
 8008b62:	291f      	cmp	r1, #31
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
 8008b6a:	d904      	bls.n	8008b76 <_raise_r+0x14>
 8008b6c:	2316      	movs	r3, #22
 8008b6e:	6003      	str	r3, [r0, #0]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b78:	b112      	cbz	r2, 8008b80 <_raise_r+0x1e>
 8008b7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b7e:	b94b      	cbnz	r3, 8008b94 <_raise_r+0x32>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f831 	bl	8008be8 <_getpid_r>
 8008b86:	462a      	mov	r2, r5
 8008b88:	4601      	mov	r1, r0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f000 b818 	b.w	8008bc4 <_kill_r>
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d00a      	beq.n	8008bae <_raise_r+0x4c>
 8008b98:	1c59      	adds	r1, r3, #1
 8008b9a:	d103      	bne.n	8008ba4 <_raise_r+0x42>
 8008b9c:	2316      	movs	r3, #22
 8008b9e:	6003      	str	r3, [r0, #0]
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	e7e7      	b.n	8008b74 <_raise_r+0x12>
 8008ba4:	2400      	movs	r4, #0
 8008ba6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008baa:	4628      	mov	r0, r5
 8008bac:	4798      	blx	r3
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e7e0      	b.n	8008b74 <_raise_r+0x12>
	...

08008bb4 <raise>:
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <raise+0xc>)
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f7ff bfd2 	b.w	8008b62 <_raise_r>
 8008bbe:	bf00      	nop
 8008bc0:	200000f8 	.word	0x200000f8

08008bc4 <_kill_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d07      	ldr	r5, [pc, #28]	; (8008be4 <_kill_r+0x20>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	4611      	mov	r1, r2
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	f7f9 f857 	bl	8001c84 <_kill>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	d102      	bne.n	8008be0 <_kill_r+0x1c>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	b103      	cbz	r3, 8008be0 <_kill_r+0x1c>
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	bf00      	nop
 8008be4:	2000069c 	.word	0x2000069c

08008be8 <_getpid_r>:
 8008be8:	f7f9 b844 	b.w	8001c74 <_getpid>
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <exp>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	ed2d 8b02 	vpush	{d8}
 8008bf6:	ec55 4b10 	vmov	r4, r5, d0
 8008bfa:	f000 f895 	bl	8008d28 <__ieee754_exp>
 8008bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8008c02:	eef0 8a60 	vmov.f32	s17, s1
 8008c06:	ec45 4b10 	vmov	d0, r4, r5
 8008c0a:	f000 f839 	bl	8008c80 <finite>
 8008c0e:	b168      	cbz	r0, 8008c2c <exp+0x3c>
 8008c10:	a317      	add	r3, pc, #92	; (adr r3, 8008c70 <exp+0x80>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 ff9d 	bl	8000b58 <__aeabi_dcmpgt>
 8008c1e:	b160      	cbz	r0, 8008c3a <exp+0x4a>
 8008c20:	f7fe f8e2 	bl	8006de8 <__errno>
 8008c24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008c60 <exp+0x70>
 8008c28:	2322      	movs	r3, #34	; 0x22
 8008c2a:	6003      	str	r3, [r0, #0]
 8008c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c30:	eef0 0a68 	vmov.f32	s1, s17
 8008c34:	ecbd 8b02 	vpop	{d8}
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	a30f      	add	r3, pc, #60	; (adr r3, 8008c78 <exp+0x88>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d0ef      	beq.n	8008c2c <exp+0x3c>
 8008c4c:	f7fe f8cc 	bl	8006de8 <__errno>
 8008c50:	2322      	movs	r3, #34	; 0x22
 8008c52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008c68 <exp+0x78>
 8008c56:	6003      	str	r3, [r0, #0]
 8008c58:	e7e8      	b.n	8008c2c <exp+0x3c>
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w
 8008c60:	00000000 	.word	0x00000000
 8008c64:	7ff00000 	.word	0x7ff00000
	...
 8008c70:	fefa39ef 	.word	0xfefa39ef
 8008c74:	40862e42 	.word	0x40862e42
 8008c78:	d52d3051 	.word	0xd52d3051
 8008c7c:	c0874910 	.word	0xc0874910

08008c80 <finite>:
 8008c80:	b082      	sub	sp, #8
 8008c82:	ed8d 0b00 	vstr	d0, [sp]
 8008c86:	9801      	ldr	r0, [sp, #4]
 8008c88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008c8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c90:	0fc0      	lsrs	r0, r0, #31
 8008c92:	b002      	add	sp, #8
 8008c94:	4770      	bx	lr
	...

08008c98 <round>:
 8008c98:	ec53 2b10 	vmov	r2, r3, d0
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8008ca2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8008ca6:	2813      	cmp	r0, #19
 8008ca8:	ee10 5a10 	vmov	r5, s0
 8008cac:	4619      	mov	r1, r3
 8008cae:	dc18      	bgt.n	8008ce2 <round+0x4a>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	da09      	bge.n	8008cc8 <round+0x30>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8008cba:	d103      	bne.n	8008cc4 <round+0x2c>
 8008cbc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008cc0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e02a      	b.n	8008d1e <round+0x86>
 8008cc8:	4c16      	ldr	r4, [pc, #88]	; (8008d24 <round+0x8c>)
 8008cca:	4104      	asrs	r4, r0
 8008ccc:	ea03 0604 	and.w	r6, r3, r4
 8008cd0:	4316      	orrs	r6, r2
 8008cd2:	d011      	beq.n	8008cf8 <round+0x60>
 8008cd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cd8:	4103      	asrs	r3, r0
 8008cda:	440b      	add	r3, r1
 8008cdc:	ea23 0104 	bic.w	r1, r3, r4
 8008ce0:	e7f0      	b.n	8008cc4 <round+0x2c>
 8008ce2:	2833      	cmp	r0, #51	; 0x33
 8008ce4:	dd0b      	ble.n	8008cfe <round+0x66>
 8008ce6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008cea:	d105      	bne.n	8008cf8 <round+0x60>
 8008cec:	ee10 0a10 	vmov	r0, s0
 8008cf0:	f7f7 faec 	bl	80002cc <__adddf3>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	ec43 2b10 	vmov	d0, r2, r3
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
 8008cfe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008d02:	f04f 34ff 	mov.w	r4, #4294967295
 8008d06:	40f4      	lsrs	r4, r6
 8008d08:	4214      	tst	r4, r2
 8008d0a:	d0f5      	beq.n	8008cf8 <round+0x60>
 8008d0c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008d10:	2301      	movs	r3, #1
 8008d12:	4083      	lsls	r3, r0
 8008d14:	195b      	adds	r3, r3, r5
 8008d16:	bf28      	it	cs
 8008d18:	3101      	addcs	r1, #1
 8008d1a:	ea23 0304 	bic.w	r3, r3, r4
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	e7e9      	b.n	8008cf8 <round+0x60>
 8008d24:	000fffff 	.word	0x000fffff

08008d28 <__ieee754_exp>:
 8008d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	ec55 4b10 	vmov	r4, r5, d0
 8008d30:	49b5      	ldr	r1, [pc, #724]	; (8009008 <__ieee754_exp+0x2e0>)
 8008d32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008d36:	428a      	cmp	r2, r1
 8008d38:	ed2d 8b04 	vpush	{d8-d9}
 8008d3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008d40:	d93b      	bls.n	8008dba <__ieee754_exp+0x92>
 8008d42:	49b2      	ldr	r1, [pc, #712]	; (800900c <__ieee754_exp+0x2e4>)
 8008d44:	428a      	cmp	r2, r1
 8008d46:	d916      	bls.n	8008d76 <__ieee754_exp+0x4e>
 8008d48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008d4c:	4323      	orrs	r3, r4
 8008d4e:	ee10 2a10 	vmov	r2, s0
 8008d52:	d007      	beq.n	8008d64 <__ieee754_exp+0x3c>
 8008d54:	462b      	mov	r3, r5
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 fab7 	bl	80002cc <__adddf3>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	e002      	b.n	8008d6a <__ieee754_exp+0x42>
 8008d64:	b10e      	cbz	r6, 8008d6a <__ieee754_exp+0x42>
 8008d66:	2400      	movs	r4, #0
 8008d68:	2500      	movs	r5, #0
 8008d6a:	ecbd 8b04 	vpop	{d8-d9}
 8008d6e:	ec45 4b10 	vmov	d0, r4, r5
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	a38e      	add	r3, pc, #568	; (adr r3, 8008fb0 <__ieee754_exp+0x288>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	ee10 0a10 	vmov	r0, s0
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fee9 	bl	8000b58 <__aeabi_dcmpgt>
 8008d86:	4607      	mov	r7, r0
 8008d88:	b130      	cbz	r0, 8008d98 <__ieee754_exp+0x70>
 8008d8a:	ecbd 8b04 	vpop	{d8-d9}
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	f000 b971 	b.w	800907a <__math_oflow>
 8008d98:	a387      	add	r3, pc, #540	; (adr r3, 8008fb8 <__ieee754_exp+0x290>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 febb 	bl	8000b1c <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f000 808b 	beq.w	8008ec2 <__ieee754_exp+0x19a>
 8008dac:	ecbd 8b04 	vpop	{d8-d9}
 8008db0:	4638      	mov	r0, r7
 8008db2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db6:	f000 b957 	b.w	8009068 <__math_uflow>
 8008dba:	4b95      	ldr	r3, [pc, #596]	; (8009010 <__ieee754_exp+0x2e8>)
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	f240 80ac 	bls.w	8008f1a <__ieee754_exp+0x1f2>
 8008dc2:	4b94      	ldr	r3, [pc, #592]	; (8009014 <__ieee754_exp+0x2ec>)
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d87c      	bhi.n	8008ec2 <__ieee754_exp+0x19a>
 8008dc8:	4b93      	ldr	r3, [pc, #588]	; (8009018 <__ieee754_exp+0x2f0>)
 8008dca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	ee10 0a10 	vmov	r0, s0
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fa76 	bl	80002c8 <__aeabi_dsub>
 8008ddc:	4b8f      	ldr	r3, [pc, #572]	; (800901c <__ieee754_exp+0x2f4>)
 8008dde:	00f7      	lsls	r7, r6, #3
 8008de0:	443b      	add	r3, r7
 8008de2:	ed93 7b00 	vldr	d7, [r3]
 8008de6:	f1c6 0a01 	rsb	sl, r6, #1
 8008dea:	4680      	mov	r8, r0
 8008dec:	4689      	mov	r9, r1
 8008dee:	ebaa 0a06 	sub.w	sl, sl, r6
 8008df2:	eeb0 8a47 	vmov.f32	s16, s14
 8008df6:	eef0 8a67 	vmov.f32	s17, s15
 8008dfa:	ec53 2b18 	vmov	r2, r3, d8
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fa61 	bl	80002c8 <__aeabi_dsub>
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fc11 	bl	8000638 <__aeabi_dmul>
 8008e16:	a36a      	add	r3, pc, #424	; (adr r3, 8008fc0 <__ieee754_exp+0x298>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	f7f7 fc0a 	bl	8000638 <__aeabi_dmul>
 8008e24:	a368      	add	r3, pc, #416	; (adr r3, 8008fc8 <__ieee754_exp+0x2a0>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fa4d 	bl	80002c8 <__aeabi_dsub>
 8008e2e:	4632      	mov	r2, r6
 8008e30:	463b      	mov	r3, r7
 8008e32:	f7f7 fc01 	bl	8000638 <__aeabi_dmul>
 8008e36:	a366      	add	r3, pc, #408	; (adr r3, 8008fd0 <__ieee754_exp+0x2a8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	f7f7 fa46 	bl	80002cc <__adddf3>
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	f7f7 fbf8 	bl	8000638 <__aeabi_dmul>
 8008e48:	a363      	add	r3, pc, #396	; (adr r3, 8008fd8 <__ieee754_exp+0x2b0>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f7f7 fa3b 	bl	80002c8 <__aeabi_dsub>
 8008e52:	4632      	mov	r2, r6
 8008e54:	463b      	mov	r3, r7
 8008e56:	f7f7 fbef 	bl	8000638 <__aeabi_dmul>
 8008e5a:	a361      	add	r3, pc, #388	; (adr r3, 8008fe0 <__ieee754_exp+0x2b8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fa34 	bl	80002cc <__adddf3>
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	f7f7 fbe6 	bl	8000638 <__aeabi_dmul>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 fa28 	bl	80002c8 <__aeabi_dsub>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fbd8 	bl	8000638 <__aeabi_dmul>
 8008e88:	ec41 0b19 	vmov	d9, r0, r1
 8008e8c:	f1ba 0f00 	cmp.w	sl, #0
 8008e90:	d15d      	bne.n	8008f4e <__ieee754_exp+0x226>
 8008e92:	2200      	movs	r2, #0
 8008e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 fa14 	bl	80002c8 <__aeabi_dsub>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	ec51 0b19 	vmov	r0, r1, d9
 8008ea8:	f7f7 fcf0 	bl	800088c <__aeabi_ddiv>
 8008eac:	4622      	mov	r2, r4
 8008eae:	462b      	mov	r3, r5
 8008eb0:	f7f7 fa0a 	bl	80002c8 <__aeabi_dsub>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	2000      	movs	r0, #0
 8008eba:	4959      	ldr	r1, [pc, #356]	; (8009020 <__ieee754_exp+0x2f8>)
 8008ebc:	f7f7 fa04 	bl	80002c8 <__aeabi_dsub>
 8008ec0:	e74d      	b.n	8008d5e <__ieee754_exp+0x36>
 8008ec2:	4b58      	ldr	r3, [pc, #352]	; (8009024 <__ieee754_exp+0x2fc>)
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008eca:	4629      	mov	r1, r5
 8008ecc:	a346      	add	r3, pc, #280	; (adr r3, 8008fe8 <__ieee754_exp+0x2c0>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 fbb1 	bl	8000638 <__aeabi_dmul>
 8008ed6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eda:	f7f7 f9f7 	bl	80002cc <__adddf3>
 8008ede:	f7f7 fe5b 	bl	8000b98 <__aeabi_d2iz>
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	f7f7 fb3e 	bl	8000564 <__aeabi_i2d>
 8008ee8:	a341      	add	r3, pc, #260	; (adr r3, 8008ff0 <__ieee754_exp+0x2c8>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	4606      	mov	r6, r0
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	f7f7 fba1 	bl	8000638 <__aeabi_dmul>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 f9e3 	bl	80002c8 <__aeabi_dsub>
 8008f02:	a33d      	add	r3, pc, #244	; (adr r3, 8008ff8 <__ieee754_exp+0x2d0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4689      	mov	r9, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 fb92 	bl	8000638 <__aeabi_dmul>
 8008f14:	ec41 0b18 	vmov	d8, r0, r1
 8008f18:	e76f      	b.n	8008dfa <__ieee754_exp+0xd2>
 8008f1a:	4b43      	ldr	r3, [pc, #268]	; (8009028 <__ieee754_exp+0x300>)
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d811      	bhi.n	8008f44 <__ieee754_exp+0x21c>
 8008f20:	a337      	add	r3, pc, #220	; (adr r3, 8009000 <__ieee754_exp+0x2d8>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	ee10 0a10 	vmov	r0, s0
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 f9ce 	bl	80002cc <__adddf3>
 8008f30:	4b3b      	ldr	r3, [pc, #236]	; (8009020 <__ieee754_exp+0x2f8>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 fe10 	bl	8000b58 <__aeabi_dcmpgt>
 8008f38:	b138      	cbz	r0, 8008f4a <__ieee754_exp+0x222>
 8008f3a:	4b39      	ldr	r3, [pc, #228]	; (8009020 <__ieee754_exp+0x2f8>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	e70a      	b.n	8008d5a <__ieee754_exp+0x32>
 8008f44:	f04f 0a00 	mov.w	sl, #0
 8008f48:	e75f      	b.n	8008e0a <__ieee754_exp+0xe2>
 8008f4a:	4682      	mov	sl, r0
 8008f4c:	e75d      	b.n	8008e0a <__ieee754_exp+0xe2>
 8008f4e:	4632      	mov	r2, r6
 8008f50:	463b      	mov	r3, r7
 8008f52:	2000      	movs	r0, #0
 8008f54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f58:	f7f7 f9b6 	bl	80002c8 <__aeabi_dsub>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	ec51 0b19 	vmov	r0, r1, d9
 8008f64:	f7f7 fc92 	bl	800088c <__aeabi_ddiv>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	ec51 0b18 	vmov	r0, r1, d8
 8008f70:	f7f7 f9aa 	bl	80002c8 <__aeabi_dsub>
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	f7f7 f9a6 	bl	80002c8 <__aeabi_dsub>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	2000      	movs	r0, #0
 8008f82:	4927      	ldr	r1, [pc, #156]	; (8009020 <__ieee754_exp+0x2f8>)
 8008f84:	f7f7 f9a0 	bl	80002c8 <__aeabi_dsub>
 8008f88:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008f8c:	4592      	cmp	sl, r2
 8008f8e:	db02      	blt.n	8008f96 <__ieee754_exp+0x26e>
 8008f90:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008f94:	e6e3      	b.n	8008d5e <__ieee754_exp+0x36>
 8008f96:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008f9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008fa4:	f7f7 fb48 	bl	8000638 <__aeabi_dmul>
 8008fa8:	e6d9      	b.n	8008d5e <__ieee754_exp+0x36>
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w
 8008fb0:	fefa39ef 	.word	0xfefa39ef
 8008fb4:	40862e42 	.word	0x40862e42
 8008fb8:	d52d3051 	.word	0xd52d3051
 8008fbc:	c0874910 	.word	0xc0874910
 8008fc0:	72bea4d0 	.word	0x72bea4d0
 8008fc4:	3e663769 	.word	0x3e663769
 8008fc8:	c5d26bf1 	.word	0xc5d26bf1
 8008fcc:	3ebbbd41 	.word	0x3ebbbd41
 8008fd0:	af25de2c 	.word	0xaf25de2c
 8008fd4:	3f11566a 	.word	0x3f11566a
 8008fd8:	16bebd93 	.word	0x16bebd93
 8008fdc:	3f66c16c 	.word	0x3f66c16c
 8008fe0:	5555553e 	.word	0x5555553e
 8008fe4:	3fc55555 	.word	0x3fc55555
 8008fe8:	652b82fe 	.word	0x652b82fe
 8008fec:	3ff71547 	.word	0x3ff71547
 8008ff0:	fee00000 	.word	0xfee00000
 8008ff4:	3fe62e42 	.word	0x3fe62e42
 8008ff8:	35793c76 	.word	0x35793c76
 8008ffc:	3dea39ef 	.word	0x3dea39ef
 8009000:	8800759c 	.word	0x8800759c
 8009004:	7e37e43c 	.word	0x7e37e43c
 8009008:	40862e41 	.word	0x40862e41
 800900c:	7fefffff 	.word	0x7fefffff
 8009010:	3fd62e42 	.word	0x3fd62e42
 8009014:	3ff0a2b1 	.word	0x3ff0a2b1
 8009018:	08009468 	.word	0x08009468
 800901c:	08009478 	.word	0x08009478
 8009020:	3ff00000 	.word	0x3ff00000
 8009024:	08009458 	.word	0x08009458
 8009028:	3defffff 	.word	0x3defffff

0800902c <with_errno>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	4616      	mov	r6, r2
 8009034:	f7fd fed8 	bl	8006de8 <__errno>
 8009038:	4629      	mov	r1, r5
 800903a:	6006      	str	r6, [r0, #0]
 800903c:	4620      	mov	r0, r4
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <xflow>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	4614      	mov	r4, r2
 8009044:	461d      	mov	r5, r3
 8009046:	b108      	cbz	r0, 800904c <xflow+0xc>
 8009048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800904c:	e9cd 2300 	strd	r2, r3, [sp]
 8009050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 faee 	bl	8000638 <__aeabi_dmul>
 800905c:	2222      	movs	r2, #34	; 0x22
 800905e:	b003      	add	sp, #12
 8009060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009064:	f7ff bfe2 	b.w	800902c <with_errno>

08009068 <__math_uflow>:
 8009068:	b508      	push	{r3, lr}
 800906a:	2200      	movs	r2, #0
 800906c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009070:	f7ff ffe6 	bl	8009040 <xflow>
 8009074:	ec41 0b10 	vmov	d0, r0, r1
 8009078:	bd08      	pop	{r3, pc}

0800907a <__math_oflow>:
 800907a:	b508      	push	{r3, lr}
 800907c:	2200      	movs	r2, #0
 800907e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009082:	f7ff ffdd 	bl	8009040 <xflow>
 8009086:	ec41 0b10 	vmov	d0, r0, r1
 800908a:	bd08      	pop	{r3, pc}

0800908c <_init>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr

08009098 <_fini>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr
