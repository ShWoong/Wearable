
LL_Wearable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007574  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007748  08007748  00017748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007adc  08007adc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae4  08007ae4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08007aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000204  08007cf0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08007cf0  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f469  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023bc  00000000  00000000  0002f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00031aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3c  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a8e  00000000  00000000  00033444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e66  00000000  00000000  00057ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0caa  00000000  00000000  00069d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb8  00000000  00000000  0014a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0014f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800772c 	.word	0x0800772c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800772c 	.word	0x0800772c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_write>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <_write+0x24>)
 8000efa:	f003 fadd 	bl	80044b8 <HAL_UART_Transmit>
	return len;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200002b0 	.word	0x200002b0

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fcd7 	bl	80018c4 <HAL_Init>
  //KMF_Init(&kf, 0.0, 1.0, 0.1); // kf ?��?��?��?�� 초기?��
  //HighPassFilter_Init;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f895 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 fa05 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 f9d9 	bl	80012d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f22:	f000 f901 	bl	8001128 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f26:	f000 f95f 	bl	80011e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f2a:	483f      	ldr	r0, [pc, #252]	; (8001028 <main+0x11c>)
 8000f2c:	f002 fa94 	bl	8003458 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000f30:	483e      	ldr	r0, [pc, #248]	; (800102c <main+0x120>)
 8000f32:	f000 fd7d 	bl	8001a30 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	483b      	ldr	r0, [pc, #236]	; (8001028 <main+0x11c>)
 8000f3a:	f002 fb57 	bl	80035ec <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(tim3flag1 == 1){
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <main+0x124>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d1fa      	bne.n	8000f3e <main+0x32>
			emg_raw;
			ADC_ChannelConfTypeDef sConfig = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
			sConfig.Channel = ADC_CHANNEL_13;
 8000f54:	230d      	movs	r3, #13
 8000f56:	607b      	str	r3, [r7, #4]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4833      	ldr	r0, [pc, #204]	; (800102c <main+0x120>)
 8000f5e:	f000 ff05 	bl	8001d6c <HAL_ADC_ConfigChannel>
			sConfig.Rank = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Start(&hadc1);
 8000f6a:	4830      	ldr	r0, [pc, #192]	; (800102c <main+0x120>)
 8000f6c:	f000 fd60 	bl	8001a30 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000f70:	2164      	movs	r1, #100	; 0x64
 8000f72:	482e      	ldr	r0, [pc, #184]	; (800102c <main+0x120>)
 8000f74:	f000 fe61 	bl	8001c3a <HAL_ADC_PollForConversion>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <main+0x86>
				emg_raw = HAL_ADC_GetValue(&hadc1);
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <main+0x120>)
 8000f80:	f000 fee6 	bl	8001d50 <HAL_ADC_GetValue>
 8000f84:	ee07 0a90 	vmov	s15, r0
 8000f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <main+0x128>)
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
			}
			HAL_ADC_Stop(&hadc1);
 8000f92:	4826      	ldr	r0, [pc, #152]	; (800102c <main+0x120>)
 8000f94:	f000 fe1e 	bl	8001bd4 <HAL_ADC_Stop>

			const float C_stray = 7, adc_max = 4096;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <main+0x12c>)
 8000f9a:	623b      	str	r3, [r7, #32]
 8000f9c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8000fa0:	61fb      	str	r3, [r7, #28]
			float adc;

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4825      	ldr	r0, [pc, #148]	; (800103c <main+0x130>)
 8000fa8:	f001 fbb4 	bl	8002714 <HAL_GPIO_WritePin>
			sConfig.Channel = ADC_CHANNEL_12;
 8000fac:	230c      	movs	r3, #12
 8000fae:	607b      	str	r3, [r7, #4]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481d      	ldr	r0, [pc, #116]	; (800102c <main+0x120>)
 8000fb6:	f000 fed9 	bl	8001d6c <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <main+0x120>)
 8000fbc:	f000 fd38 	bl	8001a30 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000fc0:	2164      	movs	r1, #100	; 0x64
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <main+0x120>)
 8000fc4:	f000 fe39 	bl	8001c3a <HAL_ADC_PollForConversion>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d108      	bne.n	8000fe0 <main+0xd4>
				adc = HAL_ADC_GetValue(&hadc1);
 8000fce:	4817      	ldr	r0, [pc, #92]	; (800102c <main+0x120>)
 8000fd0:	f000 febe 	bl	8001d50 <HAL_ADC_GetValue>
 8000fd4:	ee07 0a90 	vmov	s15, r0
 8000fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fdc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0x130>)
 8000fe6:	f001 fb95 	bl	8002714 <HAL_GPIO_WritePin>
			float C = adc*C_stray/(adc_max-adc);
 8000fea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fee:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ff2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ff6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ffe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001006:	edc7 7a06 	vstr	s15, [r7, #24]
			float C_filtered = BWLPF(C);
 800100a:	ed97 0a06 	vldr	s0, [r7, #24]
 800100e:	f003 fe0f 	bl	8004c30 <BWLPF>
 8001012:	ed87 0a05 	vstr	s0, [r7, #20]
			//float l_knee_F = FORCE_GENERATION(muscle_activation, );
			//printf("%f", neural_activation);
			//printf(",");
			//printf("%"PRId32 "\r\n", (int32_t) muscle_activation);
			//printf("%f\r\n", muscle_activation);
			printf("%f\r\n", C);
 8001016:	69b8      	ldr	r0, [r7, #24]
 8001018:	f7ff fab6 	bl	8000588 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <main+0x134>)
 8001022:	f004 fbd9 	bl	80057d8 <iprintf>
	  if(tim3flag1 == 1){
 8001026:	e78a      	b.n	8000f3e <main+0x32>
 8001028:	20000268 	.word	0x20000268
 800102c:	20000220 	.word	0x20000220
 8001030:	200002f8 	.word	0x200002f8
 8001034:	200002fc 	.word	0x200002fc
 8001038:	40e00000 	.word	0x40e00000
 800103c:	40020800 	.word	0x40020800
 8001040:	08007748 	.word	0x08007748

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2234      	movs	r2, #52	; 0x34
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fc15 	bl	8005882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <SystemClock_Config+0xdc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a2b      	ldr	r2, [pc, #172]	; (8001120 <SystemClock_Config+0xdc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <SystemClock_Config+0xdc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <SystemClock_Config+0xe0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a25      	ldr	r2, [pc, #148]	; (8001124 <SystemClock_Config+0xe0>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <SystemClock_Config+0xe0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010b8:	23b4      	movs	r3, #180	; 0xb4
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fed5 	bl	8002e7c <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010d8:	f000 f9be 	bl	8001458 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010dc:	f001 fb34 	bl	8002748 <HAL_PWREx_EnableOverDrive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010e6:	f000 f9b7 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2105      	movs	r1, #5
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fb6d 	bl	80027e8 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001114:	f000 f9a0 	bl	8001458 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	; 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xb4>)
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <MX_ADC1_Init+0xb8>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001146:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_ADC1_Init+0xb4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001150:	2201      	movs	r2, #1
 8001152:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_ADC1_Init+0xb4>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0xb4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001176:	2202      	movs	r2, #2
 8001178:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_ADC1_Init+0xb4>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_ADC1_Init+0xb4>)
 8001184:	2201      	movs	r2, #1
 8001186:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_ADC1_Init+0xb4>)
 800118a:	f000 fc0d 	bl	80019a8 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 f960 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001198:	230d      	movs	r3, #13
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_ADC1_Init+0xb4>)
 80011aa:	f000 fddf 	bl	8001d6c <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011b4:	f000 f950 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011b8:	230c      	movs	r3, #12
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xb4>)
 80011c6:	f000 fdd1 	bl	8001d6c <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011d0:	f000 f942 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000220 	.word	0x20000220
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM3_Init+0xe4>)
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800121c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001220:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <MX_TIM3_Init+0xe4>)
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_TIM3_Init+0xe4>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123e:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001240:	f002 f8ba 	bl	80033b8 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800124a:	f000 f905 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4619      	mov	r1, r3
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_TIM3_Init+0xe4>)
 800125c:	f002 fc40 	bl	8003ae0 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001266:	f000 f8f7 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_TIM3_Init+0xe4>)
 800126c:	f002 f964 	bl	8003538 <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001276:	f000 f8ef 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800127a:	2320      	movs	r3, #32
 800127c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_TIM3_Init+0xe4>)
 800128a:	f003 f835 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001294:	f000 f8e0 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012b0:	f002 fb54 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ba:	f000 f8cd 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012c0:	f000 f964 	bl	800158c <HAL_TIM_MspPostInit>

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000268 	.word	0x20000268
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f003 f884 	bl	8004418 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f89f 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002b0 	.word	0x200002b0
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a36      	ldr	r2, [pc, #216]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_GPIO_Init+0xf8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_GPIO_Init+0xf8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_GPIO_Init+0xf8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_GPIO_Init+0xf8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_GPIO_Init+0xf8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	481c      	ldr	r0, [pc, #112]	; (8001424 <MX_GPIO_Init+0xfc>)
 80013b4:	f001 f9ae 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2110      	movs	r1, #16
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <MX_GPIO_Init+0x100>)
 80013be:	f001 f9a9 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_GPIO_Init+0x100>)
 80013da:	f001 f807 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013de:	2320      	movs	r3, #32
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <MX_GPIO_Init+0xfc>)
 80013f6:	f000 fff9 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013fa:	2310      	movs	r3, #16
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_GPIO_Init+0x100>)
 8001412:	f000 ffeb 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800

0800142c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d102      	bne.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x18>
		tim3flag1 = 1;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
	}
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40000400 	.word	0x40000400
 8001454:	200002f8 	.word	0x200002f8

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_MspInit+0x4c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014a2:	2007      	movs	r0, #7
 80014a4:	f000 ff60 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_ADC_MspInit+0x7c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d127      	bne.n	8001526 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_ADC_MspInit+0x80>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_ADC_MspInit+0x84>)
 8001522:	f000 ff63 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012000 	.word	0x40012000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_TIM_Base_MspInit+0x48>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d115      	bne.n	800157a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	201d      	movs	r0, #29
 8001570:	f000 ff05 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001574:	201d      	movs	r0, #29
 8001576:	f000 ff1e 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40000400 	.word	0x40000400
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_TIM_MspPostInit+0x68>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d11d      	bne.n	80015ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ca:	2310      	movs	r3, #16
 80015cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_TIM_MspPostInit+0x70>)
 80015e6:	f000 ff01 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x88>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x8c>)
 8001676:	f000 feb9 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004400 	.word	0x40004400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f000 f944 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM3_IRQHandler+0x10>)
 80016ea:	f002 f847 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000268 	.word	0x20000268

080016f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_kill>:

int _kill(int pid, int sig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001712:	f004 f909 	bl	8005928 <__errno>
 8001716:	4603      	mov	r3, r0
 8001718:	2216      	movs	r2, #22
 800171a:	601a      	str	r2, [r3, #0]
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_exit>:

void _exit (int status)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffe7 	bl	8001708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800173a:	e7fe      	b.n	800173a <_exit+0x12>

0800173c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e00a      	b.n	8001764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174e:	f3af 8000 	nop.w
 8001752:	4601      	mov	r1, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf0      	blt.n	800174e <_read+0x12>
  }

  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179e:	605a      	str	r2, [r3, #4]
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_isatty>:

int _isatty(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f004 f88a 	bl	8005928 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000300 	.word	0x20000300
 8001848:	20000478 	.word	0x20000478

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0xe>
 8001874:	f7ff ffea 	bl	800184c <SystemInit>
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopFillZerobss+0x1a>)
 800187e:	2300      	movs	r3, #0
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:
 8001882:	58d4      	ldr	r4, [r2, r3]
 8001884:	50c4      	str	r4, [r0, r3]
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:
 8001888:	18c4      	adds	r4, r0, r3
 800188a:	428c      	cmp	r4, r1
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x1e>)
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopFillZerobss+0x22>)
 8001892:	2300      	movs	r3, #0
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:
 800189a:	42a2      	cmp	r2, r4
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
 800189e:	f004 f849 	bl	8005934 <__libc_init_array>
 80018a2:	f7ff fb33 	bl	8000f0c <main>
 80018a6:	4770      	bx	lr
 80018a8:	20020000 	.word	0x20020000
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000204 	.word	0x20000204
 80018b4:	08007aec 	.word	0x08007aec
 80018b8:	20000204 	.word	0x20000204
 80018bc:	20000474 	.word	0x20000474

080018c0 <ADC_IRQHandler>:
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 fd3b 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fdb4 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd53 	bl	80023d2 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 fd1b 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000304 	.word	0x20000304

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000304 	.word	0x20000304

080019a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e033      	b.n	8001a26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd74 	bl	80014b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ee:	f023 0302 	bic.w	r3, r3, #2
 80019f2:	f043 0202 	orr.w	r2, r3, #2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fae8 	bl	8001fd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
 8001a16:	e001      	b.n	8001a1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Start+0x1a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0b2      	b.n	8001bb0 <HAL_ADC_Start+0x180>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d018      	beq.n	8001a92 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_ADC_Start+0x18c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_ADC_Start+0x190>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9a      	lsrs	r2, r3, #18
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d17a      	bne.n	8001b96 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f023 0206 	bic.w	r2, r3, #6
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_ADC_Start+0x194>)
 8001afe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d12a      	bne.n	8001b6c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <HAL_ADC_Start+0x198>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d015      	beq.n	8001b4c <HAL_ADC_Start+0x11c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_ADC_Start+0x19c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d105      	bne.n	8001b36 <HAL_ADC_Start+0x106>
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_ADC_Start+0x194>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <HAL_ADC_Start+0x1a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d136      	bne.n	8001bae <HAL_ADC_Start+0x17e>
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_ADC_Start+0x194>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d130      	bne.n	8001bae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d129      	bne.n	8001bae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e020      	b.n	8001bae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_ADC_Start+0x198>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d11b      	bne.n	8001bae <HAL_ADC_Start+0x17e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d114      	bne.n	8001bae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e00b      	b.n	8001bae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	40012100 	.word	0x40012100
 8001bd0:	40012200 	.word	0x40012200

08001bd4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Stop+0x16>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e021      	b.n	8001c2e <HAL_ADC_Stop+0x5a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d113      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c66:	d10b      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e063      	b.n	8001d48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff fe86 	bl	8001990 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c86:	e021      	b.n	8001ccc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d01d      	beq.n	8001ccc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_ADC_PollForConversion+0x6c>
 8001c96:	f7ff fe7b 	bl	8001990 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d212      	bcs.n	8001ccc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d00b      	beq.n	8001ccc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e03d      	b.n	8001d48 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d1d6      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0212 	mvn.w	r2, #18
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d123      	bne.n	8001d46 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11f      	bne.n	8001d46 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d111      	bne.n	8001d46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1c>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e113      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x244>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d925      	bls.n	8001de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68d9      	ldr	r1, [r3, #12]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	3b1e      	subs	r3, #30
 8001dae:	2207      	movs	r2, #7
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43da      	mvns	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4403      	add	r3, r0
 8001dd6:	3b1e      	subs	r3, #30
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	e022      	b.n	8001e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	2207      	movs	r2, #7
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4403      	add	r3, r0
 8001e20:	409a      	lsls	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d824      	bhi.n	8001e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	3b05      	subs	r3, #5
 8001e44:	221f      	movs	r2, #31
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	400a      	ands	r2, r1
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b05      	subs	r3, #5
 8001e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7a:	e04c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d824      	bhi.n	8001ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b23      	subs	r3, #35	; 0x23
 8001e96:	221f      	movs	r2, #31
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b23      	subs	r3, #35	; 0x23
 8001ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
 8001ecc:	e023      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b41      	subs	r3, #65	; 0x41
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b41      	subs	r3, #65	; 0x41
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_ADC_ConfigChannel+0x250>)
 8001f18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_ADC_ConfigChannel+0x254>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d10f      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1d8>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b12      	cmp	r3, #18
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_ADC_ConfigChannel+0x254>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12b      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_ADC_ConfigChannel+0x258>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x1f4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b11      	cmp	r3, #17
 8001f5e:	d122      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ADC_ConfigChannel+0x258>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d111      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_ADC_ConfigChannel+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x260>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	0c9a      	lsrs	r2, r3, #18
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	40012000 	.word	0x40012000
 8001fc4:	10000012 	.word	0x10000012
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <ADC_Init+0x1f0>)
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <ADC_Init+0x1f4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e00f      	b.n	80020ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0202 	bic.w	r2, r2, #2
 80020dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e1b      	ldrb	r3, [r3, #24]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	3b01      	subs	r3, #1
 8002128:	035a      	lsls	r2, r3, #13
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	051a      	lsls	r2, r3, #20
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	029a      	lsls	r2, r3, #10
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e165      	b.n	80026d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8154 	bne.w	80026ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ae 	beq.w	80026ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <HAL_GPIO_Init+0x300>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <HAL_GPIO_Init+0x300>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_GPIO_Init+0x300>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_GPIO_Init+0x304>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4f      	ldr	r2, [pc, #316]	; (80026f4 <HAL_GPIO_Init+0x308>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4e      	ldr	r2, [pc, #312]	; (80026f8 <HAL_GPIO_Init+0x30c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_GPIO_Init+0x310>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_GPIO_Init+0x314>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4b      	ldr	r2, [pc, #300]	; (8002704 <HAL_GPIO_Init+0x318>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x20a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	; (8002708 <HAL_GPIO_Init+0x31c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x206>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_GPIO_Init+0x320>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x202>
 80025ea:	2306      	movs	r3, #6
 80025ec:	e00c      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00a      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 80025f2:	2305      	movs	r3, #5
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x21c>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <HAL_GPIO_Init+0x304>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a31      	ldr	r2, [pc, #196]	; (8002710 <HAL_GPIO_Init+0x324>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_GPIO_Init+0x324>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a11      	ldr	r2, [pc, #68]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f ae96 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40021400 	.word	0x40021400
 800270c:	40021800 	.word	0x40021800
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_PWREx_EnableOverDrive+0x94>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7ff f90c 	bl	8001990 <HAL_GetTick>
 8002778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277a:	e009      	b.n	8002790 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800277c:	f7ff f908 	bl	8001990 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d901      	bls.n	8002790 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e01f      	b.n	80027d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d1ee      	bne.n	800277c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7ff f8f4 	bl	8001990 <HAL_GetTick>
 80027a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027aa:	e009      	b.n	80027c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ac:	f7ff f8f0 	bl	8001990 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ba:	d901      	bls.n	80027c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e007      	b.n	80027d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027cc:	d1ee      	bne.n	80027ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	420e0040 	.word	0x420e0040
 80027e0:	40007000 	.word	0x40007000
 80027e4:	420e0044 	.word	0x420e0044

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f85a 	bl	8001990 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff f856 	bl	8001990 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f855 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490a      	ldr	r1, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe ffba 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08007750 	.word	0x08007750
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08007760 	.word	0x08007760

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffdc 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0b5b      	lsrs	r3, r3, #13
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08007760 	.word	0x08007760

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b0ae      	sub	sp, #184	; 0xb8
 8002a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a42:	4bcb      	ldr	r3, [pc, #812]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	f200 8206 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x440>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002e5d 	.word	0x08002e5d
 8002a60:	08002e5d 	.word	0x08002e5d
 8002a64:	08002e5d 	.word	0x08002e5d
 8002a68:	08002a95 	.word	0x08002a95
 8002a6c:	08002e5d 	.word	0x08002e5d
 8002a70:	08002e5d 	.word	0x08002e5d
 8002a74:	08002e5d 	.word	0x08002e5d
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002e5d 	.word	0x08002e5d
 8002a80:	08002e5d 	.word	0x08002e5d
 8002a84:	08002e5d 	.word	0x08002e5d
 8002a88:	08002c8d 	.word	0x08002c8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4bb9      	ldr	r3, [pc, #740]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a92:	e1e7      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a94:	4bb8      	ldr	r3, [pc, #736]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a9a:	e1e3      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9c:	4bb4      	ldr	r3, [pc, #720]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa8:	4bb1      	ldr	r3, [pc, #708]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d071      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4bae      	ldr	r3, [pc, #696]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ac0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	0159      	lsls	r1, r3, #5
 8002ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aec:	0150      	lsls	r0, r2, #5
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4621      	mov	r1, r4
 8002af4:	1a51      	subs	r1, r2, r1
 8002af6:	6439      	str	r1, [r7, #64]	; 0x40
 8002af8:	4629      	mov	r1, r5
 8002afa:	eb63 0301 	sbc.w	r3, r3, r1
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	018b      	lsls	r3, r1, #6
 8002b10:	4641      	mov	r1, r8
 8002b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b16:	4641      	mov	r1, r8
 8002b18:	018a      	lsls	r2, r1, #6
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	1a51      	subs	r1, r2, r1
 8002b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b20:	4649      	mov	r1, r9
 8002b22:	eb63 0301 	sbc.w	r3, r3, r1
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b34:	4649      	mov	r1, r9
 8002b36:	00cb      	lsls	r3, r1, #3
 8002b38:	4641      	mov	r1, r8
 8002b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3e:	4641      	mov	r1, r8
 8002b40:	00ca      	lsls	r2, r1, #3
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	4622      	mov	r2, r4
 8002b4a:	189b      	adds	r3, r3, r2
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	462b      	mov	r3, r5
 8002b50:	460a      	mov	r2, r1
 8002b52:	eb42 0303 	adc.w	r3, r2, r3
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b64:	4629      	mov	r1, r5
 8002b66:	024b      	lsls	r3, r1, #9
 8002b68:	4621      	mov	r1, r4
 8002b6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b6e:	4621      	mov	r1, r4
 8002b70:	024a      	lsls	r2, r1, #9
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b88:	f7fe f82e 	bl	8000be8 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b96:	e067      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bba:	4622      	mov	r2, r4
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	f04f 0000 	mov.w	r0, #0
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	0159      	lsls	r1, r3, #5
 8002bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bcc:	0150      	lsls	r0, r2, #5
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	1a51      	subs	r1, r2, r1
 8002bd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bd8:	4629      	mov	r1, r5
 8002bda:	eb63 0301 	sbc.w	r3, r3, r1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002bec:	4649      	mov	r1, r9
 8002bee:	018b      	lsls	r3, r1, #6
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	018a      	lsls	r2, r1, #6
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c00:	4649      	mov	r1, r9
 8002c02:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c1a:	4692      	mov	sl, r2
 8002c1c:	469b      	mov	fp, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	eb1a 0303 	adds.w	r3, sl, r3
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	462b      	mov	r3, r5
 8002c28:	eb4b 0303 	adc.w	r3, fp, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	028b      	lsls	r3, r1, #10
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c44:	4621      	mov	r1, r4
 8002c46:	028a      	lsls	r2, r1, #10
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c50:	2200      	movs	r2, #0
 8002c52:	673b      	str	r3, [r7, #112]	; 0x70
 8002c54:	677a      	str	r2, [r7, #116]	; 0x74
 8002c56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c5a:	f7fd ffc5 	bl	8000be8 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4613      	mov	r3, r2
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c68:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	3301      	adds	r3, #1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c8a:	e0eb      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d06b      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	2200      	movs	r2, #0
 8002cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb8:	2300      	movs	r3, #0
 8002cba:	667b      	str	r3, [r7, #100]	; 0x64
 8002cbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	0159      	lsls	r1, r3, #5
 8002cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd2:	0150      	lsls	r0, r2, #5
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4621      	mov	r1, r4
 8002cda:	1a51      	subs	r1, r2, r1
 8002cdc:	61b9      	str	r1, [r7, #24]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	018b      	lsls	r3, r1, #6
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	018a      	lsls	r2, r1, #6
 8002d00:	4651      	mov	r1, sl
 8002d02:	ebb2 0801 	subs.w	r8, r2, r1
 8002d06:	4659      	mov	r1, fp
 8002d08:	eb63 0901 	sbc.w	r9, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d20:	4690      	mov	r8, r2
 8002d22:	4699      	mov	r9, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	eb18 0303 	adds.w	r3, r8, r3
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	eb49 0303 	adc.w	r3, r9, r3
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d40:	4629      	mov	r1, r5
 8002d42:	024b      	lsls	r3, r1, #9
 8002d44:	4621      	mov	r1, r4
 8002d46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	024a      	lsls	r2, r1, #9
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d56:	2200      	movs	r2, #0
 8002d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d60:	f7fd ff42 	bl	8000be8 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6e:	e065      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x420>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	4611      	mov	r1, r2
 8002d88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d8e:	2300      	movs	r3, #0
 8002d90:	657b      	str	r3, [r7, #84]	; 0x54
 8002d92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	f04f 0000 	mov.w	r0, #0
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da8:	0150      	lsls	r0, r2, #5
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4641      	mov	r1, r8
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	4649      	mov	r1, r9
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dc8:	4659      	mov	r1, fp
 8002dca:	018b      	lsls	r3, r1, #6
 8002dcc:	4651      	mov	r1, sl
 8002dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	018a      	lsls	r2, r1, #6
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	1a54      	subs	r4, r2, r1
 8002dda:	4659      	mov	r1, fp
 8002ddc:	eb63 0501 	sbc.w	r5, r3, r1
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	00eb      	lsls	r3, r5, #3
 8002dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dee:	00e2      	lsls	r2, r4, #3
 8002df0:	4614      	mov	r4, r2
 8002df2:	461d      	mov	r5, r3
 8002df4:	4643      	mov	r3, r8
 8002df6:	18e3      	adds	r3, r4, r3
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	eb45 0303 	adc.w	r3, r5, r3
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e24:	2200      	movs	r2, #0
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e2e:	f7fd fedb 	bl	8000be8 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0f1b      	lsrs	r3, r3, #28
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5a:	e003      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	37b8      	adds	r7, #184	; 0xb8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400

08002e7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e28d      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8083 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e9c:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d019      	beq.n	8002edc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ea8:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb4:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec0:	d00c      	beq.n	8002edc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b8b      	ldr	r3, [pc, #556]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d112      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4b84      	ldr	r3, [pc, #528]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x124>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e25a      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x90>
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7b      	ldr	r2, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xcc>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0xb4>
 8002f16:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a72      	ldr	r2, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xcc>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fd1e 	bl	8001990 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fd1a 	bl	8001990 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e21f      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xdc>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fd0a 	bl	8001990 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fd06 	bl	8001990 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e20b      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b57      	ldr	r3, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x104>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06f      	beq.n	800308e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fae:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d017      	beq.n	8002fea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fba:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x186>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1d3      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCC_OscConfig+0x278>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fcb3 	bl	8001990 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe fcaf 	bl	8001990 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1b4      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4925      	ldr	r1, [pc, #148]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x278>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fc92 	bl	8001990 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fc8e 	bl	8001990 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e193      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d036      	beq.n	8003108 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fc72 	bl	8001990 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fc6e 	bl	8001990 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e173      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x234>
 80030ce:	e01b      	b.n	8003108 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe fc5b 	bl	8001990 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e00e      	b.n	80030fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe fc57 	bl	8001990 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d907      	bls.n	80030fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e15c      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470000 	.word	0x42470000
 80030f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ea      	bne.n	80030de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8097 	beq.w	8003244 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b83      	ldr	r3, [pc, #524]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a7e      	ldr	r2, [pc, #504]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b7c      	ldr	r3, [pc, #496]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b79      	ldr	r3, [pc, #484]	; (800332c <HAL_RCC_OscConfig+0x4b0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x4b0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_RCC_OscConfig+0x4b0>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fc17 	bl	8001990 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fc13 	bl	8001990 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e118      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b6c      	ldr	r3, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x4b0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x31e>
 800318c:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a65      	ldr	r2, [pc, #404]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	e01c      	b.n	80031d4 <HAL_RCC_OscConfig+0x358>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x340>
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x358>
 80031bc:	4b5a      	ldr	r3, [pc, #360]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a59      	ldr	r2, [pc, #356]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fbd8 	bl	8001990 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe fbd4 	bl	8001990 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0d7      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ee      	beq.n	80031e4 <HAL_RCC_OscConfig+0x368>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fbc2 	bl	8001990 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fbbe 	bl	8001990 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0c1      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ee      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80ad 	beq.w	80033a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d060      	beq.n	800331c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d145      	bne.n	80032ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCC_OscConfig+0x4b4>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fb92 	bl	8001990 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fb8e 	bl	8001990 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e093      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	491b      	ldr	r1, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x4b4>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe fb63 	bl	8001990 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe fb5f 	bl	8001990 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e064      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x452>
 80032ec:	e05c      	b.n	80033a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_RCC_OscConfig+0x4b4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb4c 	bl	8001990 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fb48 	bl	8001990 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04d      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x480>
 800331a:	e045      	b.n	80033a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e040      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x538>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d030      	beq.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d129      	bne.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d122      	bne.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d119      	bne.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d10f      	bne.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe f8ac 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fc62 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04e      	b.n	800350e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_TIM_Base_Start_IT+0xc4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d01d      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_TIM_Base_Start_IT+0xc8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_TIM_Base_Start_IT+0xcc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_TIM_Base_Start_IT+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_TIM_Base_Start_IT+0xd4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d010      	beq.n	800350c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e007      	b.n	800350c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40010400 	.word	0x40010400
 8003530:	40014000 	.word	0x40014000
 8003534:	40001800 	.word	0x40001800

08003538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e041      	b.n	80035ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f839 	bl	80035d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fba2 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x24>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e022      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d109      	bne.n	800362a <HAL_TIM_PWM_Start+0x3e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e015      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x58>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e008      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e07c      	b.n	8003758 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0x82>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	e013      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0x92>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	e00b      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	e003      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fe04 	bl	80042ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_TIM_PWM_Start+0x174>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_PWM_Start+0xcc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_TIM_PWM_Start+0x178>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_PWM_Start+0xd0>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_TIM_PWM_Start+0xd2>
 80036bc:	2300      	movs	r3, #0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_TIM_PWM_Start+0x174>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d01d      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_TIM_PWM_Start+0x17c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_TIM_PWM_Start+0x180>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <HAL_TIM_PWM_Start+0x184>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_TIM_PWM_Start+0x178>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start+0x188>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIM_PWM_Start+0x136>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_TIM_PWM_Start+0x18c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d111      	bne.n	8003746 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b06      	cmp	r3, #6
 8003732:	d010      	beq.n	8003756 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003744:	e007      	b.n	8003756 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40010000 	.word	0x40010000
 8003764:	40010400 	.word	0x40010400
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0202 	mvn.w	r2, #2
 80037b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa5b 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa4d 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa5e 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa35 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa27 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa38 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0208 	mvn.w	r2, #8
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2204      	movs	r2, #4
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa0f 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa01 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa12 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0210 	mvn.w	r2, #16
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9e9 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9db 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f9ec 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0201 	mvn.w	r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fda2 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fd7c 	bl	8004404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9bd 	bl	8003caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0220 	mvn.w	r2, #32
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fd4e 	bl	80043f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003976:	2302      	movs	r3, #2
 8003978:	e0ae      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	f200 809f 	bhi.w	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039c5 	.word	0x080039c5
 8003994:	08003ac9 	.word	0x08003ac9
 8003998:	08003ac9 	.word	0x08003ac9
 800399c:	08003ac9 	.word	0x08003ac9
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	08003ac9 	.word	0x08003ac9
 80039a8:	08003ac9 	.word	0x08003ac9
 80039ac:	08003ac9 	.word	0x08003ac9
 80039b0:	08003a47 	.word	0x08003a47
 80039b4:	08003ac9 	.word	0x08003ac9
 80039b8:	08003ac9 	.word	0x08003ac9
 80039bc:	08003ac9 	.word	0x08003ac9
 80039c0:	08003a87 	.word	0x08003a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fa24 	bl	8003e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0208 	orr.w	r2, r2, #8
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	619a      	str	r2, [r3, #24]
      break;
 8003a02:	e064      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fa74 	bl	8003ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6999      	ldr	r1, [r3, #24]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	021a      	lsls	r2, r3, #8
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	619a      	str	r2, [r3, #24]
      break;
 8003a44:	e043      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fac9 	bl	8003fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0208 	orr.w	r2, r2, #8
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0204 	bic.w	r2, r2, #4
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	61da      	str	r2, [r3, #28]
      break;
 8003a84:	e023      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fb1d 	bl	80040cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	61da      	str	r2, [r3, #28]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x1c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0b4      	b.n	8003c66 <HAL_TIM_ConfigClockSource+0x186>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b34:	d03e      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3a:	f200 8087 	bhi.w	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	f000 8086 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x172>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d87f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4c:	2b70      	cmp	r3, #112	; 0x70
 8003b4e:	d01a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xa6>
 8003b50:	2b70      	cmp	r3, #112	; 0x70
 8003b52:	d87b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d050      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x11a>
 8003b58:	2b60      	cmp	r3, #96	; 0x60
 8003b5a:	d877      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b50      	cmp	r3, #80	; 0x50
 8003b5e:	d03c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xfa>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d873      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d058      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x13a>
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d86f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b30      	cmp	r3, #48	; 0x30
 8003b6e:	d064      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d86b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d060      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d867      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05c      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d05a      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	e062      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	f000 fb69 	bl	800426c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	609a      	str	r2, [r3, #8]
      break;
 8003bb2:	e04f      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	f000 fb52 	bl	800426c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e03c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fac6 	bl	8004178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2150      	movs	r1, #80	; 0x50
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb1f 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e02c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 fae5 	bl	80041d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2160      	movs	r1, #96	; 0x60
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fb0f 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003c18:	e01c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 faa6 	bl	8004178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2140      	movs	r1, #64	; 0x40
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 faff 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003c38:	e00c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f000 faf6 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e003      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e000      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a46      	ldr	r2, [pc, #280]	; (8003dec <TIM_Base_SetConfig+0x12c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a43      	ldr	r2, [pc, #268]	; (8003df0 <TIM_Base_SetConfig+0x130>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a42      	ldr	r2, [pc, #264]	; (8003df4 <TIM_Base_SetConfig+0x134>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <TIM_Base_SetConfig+0x138>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a40      	ldr	r2, [pc, #256]	; (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a35      	ldr	r2, [pc, #212]	; (8003dec <TIM_Base_SetConfig+0x12c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d027      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <TIM_Base_SetConfig+0x130>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d023      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a31      	ldr	r2, [pc, #196]	; (8003df4 <TIM_Base_SetConfig+0x134>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a30      	ldr	r2, [pc, #192]	; (8003df8 <TIM_Base_SetConfig+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <TIM_Base_SetConfig+0x140>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <TIM_Base_SetConfig+0x144>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <TIM_Base_SetConfig+0x148>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_Base_SetConfig+0x14c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_Base_SetConfig+0x150>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_Base_SetConfig+0x154>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <TIM_Base_SetConfig+0x12c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0xf8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f023 0201 	bic.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]
  }
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	40001800 	.word	0x40001800
 8003e10:	40001c00 	.word	0x40001c00
 8003e14:	40002000 	.word	0x40002000

08003e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 0201 	bic.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f023 0302 	bic.w	r3, r3, #2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <TIM_OC1_SetConfig+0xd8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC1_SetConfig+0x64>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <TIM_OC1_SetConfig+0xdc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0308 	bic.w	r3, r3, #8
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <TIM_OC1_SetConfig+0xd8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x8e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <TIM_OC1_SetConfig+0xdc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 0210 	bic.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <TIM_OC2_SetConfig+0xe4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_OC2_SetConfig+0x68>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <TIM_OC2_SetConfig+0xe8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <TIM_OC2_SetConfig+0xe4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC2_SetConfig+0x94>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <TIM_OC2_SetConfig+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d113      	bne.n	8003fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800402c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <TIM_OC3_SetConfig+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC3_SetConfig+0x66>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <TIM_OC3_SetConfig+0xe4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10d      	bne.n	8004066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <TIM_OC3_SetConfig+0xe0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC3_SetConfig+0x92>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <TIM_OC3_SetConfig+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d113      	bne.n	800409e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	031b      	lsls	r3, r3, #12
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <TIM_OC4_SetConfig+0xa4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC4_SetConfig+0x68>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <TIM_OC4_SetConfig+0xa8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d109      	bne.n	8004148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800413a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40010400 	.word	0x40010400

08004178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 030a 	bic.w	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f023 0210 	bic.w	r2, r3, #16
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	f043 0307 	orr.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2201      	movs	r2, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1a      	ldr	r2, [r3, #32]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e05a      	b.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d01d      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40001800 	.word	0x40001800

080043f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e042      	b.n	80044b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd f8de 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f973 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d175      	bne.n	80045c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Transmit+0x2c>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e06e      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fa4b 	bl	8001990 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d108      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800452c:	e02e      	b.n	800458c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f848 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e03a      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3302      	adds	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e007      	b.n	800457e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	3301      	adds	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1cb      	bne.n	800452e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f814 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	e03b      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d037      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fd f9d2 	bl	8001990 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	6a3a      	ldr	r2, [r7, #32]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <UART_WaitOnFlagUntilTimeout+0x30>
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03a      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d023      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d020      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d01d      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d116      	bne.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f81d 	bl	8004680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2208      	movs	r2, #8
 800464a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e00f      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	429a      	cmp	r2, r3
 8004674:	d0b4      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b095      	sub	sp, #84	; 0x54
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a8:	643a      	str	r2, [r7, #64]	; 0x40
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3314      	adds	r3, #20
 80046da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	647b      	str	r3, [r7, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004718:	61ba      	str	r2, [r7, #24]
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800473a:	bf00      	nop
 800473c:	3754      	adds	r7, #84	; 0x54
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b0c0      	sub	sp, #256	; 0x100
 800474e:	af00      	add	r7, sp, #0
 8004750:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	ea40 0301 	orr.w	r3, r0, r1
 8004770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a0:	f021 010c 	bic.w	r1, r1, #12
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ae:	430b      	orrs	r3, r1
 80047b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	6999      	ldr	r1, [r3, #24]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	ea40 0301 	orr.w	r3, r0, r1
 80047ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <UART_SetConfig+0x2cc>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0xa0>
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <UART_SetConfig+0x2d0>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe f904 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 80047ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f0:	e003      	b.n	80047fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f2:	f7fe f8eb 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 80047f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	f040 810c 	bne.w	8004a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004812:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	1891      	adds	r1, r2, r2
 8004820:	65b9      	str	r1, [r7, #88]	; 0x58
 8004822:	415b      	adcs	r3, r3
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800482a:	4621      	mov	r1, r4
 800482c:	eb12 0801 	adds.w	r8, r2, r1
 8004830:	4629      	mov	r1, r5
 8004832:	eb43 0901 	adc.w	r9, r3, r1
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484a:	4690      	mov	r8, r2
 800484c:	4699      	mov	r9, r3
 800484e:	4623      	mov	r3, r4
 8004850:	eb18 0303 	adds.w	r3, r8, r3
 8004854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004858:	462b      	mov	r3, r5
 800485a:	eb49 0303 	adc.w	r3, r9, r3
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004876:	460b      	mov	r3, r1
 8004878:	18db      	adds	r3, r3, r3
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
 800487c:	4613      	mov	r3, r2
 800487e:	eb42 0303 	adc.w	r3, r2, r3
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800488c:	f7fc f9ac 	bl	8000be8 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <UART_SetConfig+0x2d4>)
 8004896:	fba3 2302 	umull	r2, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	011c      	lsls	r4, r3, #4
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048b8:	415b      	adcs	r3, r3
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c0:	4641      	mov	r1, r8
 80048c2:	eb12 0a01 	adds.w	sl, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0b01 	adc.w	fp, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	4692      	mov	sl, r2
 80048e2:	469b      	mov	fp, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ee:	464b      	mov	r3, r9
 80048f0:	eb4b 0303 	adc.w	r3, fp, r3
 80048f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004904:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800490c:	460b      	mov	r3, r1
 800490e:	18db      	adds	r3, r3, r3
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
 8004912:	4613      	mov	r3, r2
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
 800491a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800491e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004922:	f7fc f961 	bl	8000be8 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <UART_SetConfig+0x2d4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	; 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <UART_SetConfig+0x2d4>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800495c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	63b9      	str	r1, [r7, #56]	; 0x38
 800496c:	415b      	adcs	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6339      	str	r1, [r7, #48]	; 0x30
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049de:	f7fc f903 	bl	8000be8 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <UART_SetConfig+0x2d4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <UART_SetConfig+0x2d4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 0207 	and.w	r2, r3, #7
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4422      	add	r2, r4
 8004a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a10:	e106      	b.n	8004c20 <UART_SetConfig+0x4d8>
 8004a12:	bf00      	nop
 8004a14:	40011000 	.word	0x40011000
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	6239      	str	r1, [r7, #32]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1854      	adds	r4, r2, r1
 8004a46:	4649      	mov	r1, r9
 8004a48:	eb43 0501 	adc.w	r5, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a68:	464b      	mov	r3, r9
 8004a6a:	eb45 0303 	adc.w	r3, r5, r3
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a8e:	4629      	mov	r1, r5
 8004a90:	008b      	lsls	r3, r1, #2
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a98:	4621      	mov	r1, r4
 8004a9a:	008a      	lsls	r2, r1, #2
 8004a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa0:	f7fc f8a2 	bl	8000be8 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	61b9      	str	r1, [r7, #24]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b36:	4641      	mov	r1, r8
 8004b38:	008a      	lsls	r2, r1, #2
 8004b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b3e:	f7fc f853 	bl	8000be8 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	4b38      	ldr	r3, [pc, #224]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2264      	movs	r2, #100	; 0x64
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	1acb      	subs	r3, r1, r3
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	3332      	adds	r3, #50	; 0x32
 8004b5c:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	673b      	str	r3, [r7, #112]	; 0x70
 8004b72:	677a      	str	r2, [r7, #116]	; 0x74
 8004b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bba:	464b      	mov	r3, r9
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	eb42 0303 	adc.w	r3, r2, r3
 8004bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bce:	667a      	str	r2, [r7, #100]	; 0x64
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bdc:	4649      	mov	r1, r9
 8004bde:	008b      	lsls	r3, r1, #2
 8004be0:	4641      	mov	r1, r8
 8004be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be6:	4641      	mov	r1, r8
 8004be8:	008a      	lsls	r2, r1, #2
 8004bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bee:	f7fb fffb 	bl	8000be8 <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2164      	movs	r1, #100	; 0x64
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	; 0x32
 8004c0a:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4422      	add	r2, r4
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2c:	51eb851f 	.word	0x51eb851f

08004c30 <BWLPF>:
	{1.00000000, 2.00000000, 1.00000000, 1.00000000, -1.99516324, 0.99520262}*/ //1Hz
    /*{9.73291699e-15, 1.94658340e-14, 9.73291699e-15, 1.0, -1.99883930, 0.99883969},
	{1.0, 2.0, 1.0, 1.0, -1.99951883, 0.99951922}*/ //0.1Hz
};

float BWLPF(float input) {
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	ed87 0a01 	vstr	s0, [r7, #4]
	float output = 0;
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < SECTIONS; i++) {
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e08c      	b.n	8004d60 <BWLPF+0x130>
    	float xn = (i == 0) ? input : output;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <BWLPF+0x20>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	e000      	b.n	8004c52 <BWLPF+0x22>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	60fb      	str	r3, [r7, #12]

        output = lpf_sos[i][0] * xn + lpf_sos[i][1] * lpf_x_buffer[i][0] + lpf_sos[i][2] * lpf_x_buffer[i][1]
 8004c54:	4949      	ldr	r1, [pc, #292]	; (8004d7c <BWLPF+0x14c>)
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	ed93 7a00 	vldr	s14, [r3]
 8004c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c6e:	4943      	ldr	r1, [pc, #268]	; (8004d7c <BWLPF+0x14c>)
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	edd3 6a00 	vldr	s13, [r3]
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <BWLPF+0x150>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	edd3 7a00 	vldr	s15, [r3]
 8004c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c96:	4939      	ldr	r1, [pc, #228]	; (8004d7c <BWLPF+0x14c>)
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	edd3 6a00 	vldr	s13, [r3]
 8004caa:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <BWLPF+0x150>)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	edd3 7a00 	vldr	s15, [r3]
 8004cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - lpf_sos[i][4] * lpf_y_buffer[i][0] - lpf_sos[i][5] * lpf_y_buffer[i][1];
 8004cc0:	492e      	ldr	r1, [pc, #184]	; (8004d7c <BWLPF+0x14c>)
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	3310      	adds	r3, #16
 8004cd0:	edd3 6a00 	vldr	s13, [r3]
 8004cd4:	4a2b      	ldr	r2, [pc, #172]	; (8004d84 <BWLPF+0x154>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	edd3 7a00 	vldr	s15, [r3]
 8004ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ce8:	4924      	ldr	r1, [pc, #144]	; (8004d7c <BWLPF+0x14c>)
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	edd3 6a00 	vldr	s13, [r3]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <BWLPF+0x154>)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	3304      	adds	r3, #4
 8004d06:	edd3 7a00 	vldr	s15, [r3]
 8004d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        output = lpf_sos[i][0] * xn + lpf_sos[i][1] * lpf_x_buffer[i][0] + lpf_sos[i][2] * lpf_x_buffer[i][1]
 8004d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d12:	edc7 7a05 	vstr	s15, [r7, #20]

        lpf_x_buffer[i][1] = lpf_x_buffer[i][0];
 8004d16:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <BWLPF+0x150>)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4917      	ldr	r1, [pc, #92]	; (8004d80 <BWLPF+0x150>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	3304      	adds	r3, #4
 8004d2a:	601a      	str	r2, [r3, #0]
        lpf_x_buffer[i][0] = xn;
 8004d2c:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <BWLPF+0x150>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]
        lpf_y_buffer[i][1] = lpf_y_buffer[i][0];
 8004d38:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <BWLPF+0x154>)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4910      	ldr	r1, [pc, #64]	; (8004d84 <BWLPF+0x154>)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	440b      	add	r3, r1
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	601a      	str	r2, [r3, #0]
        lpf_y_buffer[i][0] = output;
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <BWLPF+0x154>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SECTIONS; i++) {
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	f77f af6f 	ble.w	8004c46 <BWLPF+0x16>
    }
    return output;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	ee07 3a90 	vmov	s15, r3
}
 8004d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	2000000c 	.word	0x2000000c
 8004d80:	20000308 	.word	0x20000308
 8004d84:	20000318 	.word	0x20000318

08004d88 <__cvt>:
 8004d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	ec55 4b10 	vmov	r4, r5, d0
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	460e      	mov	r6, r1
 8004d94:	4619      	mov	r1, r3
 8004d96:	462b      	mov	r3, r5
 8004d98:	bfbb      	ittet	lt
 8004d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d9e:	461d      	movlt	r5, r3
 8004da0:	2300      	movge	r3, #0
 8004da2:	232d      	movlt	r3, #45	; 0x2d
 8004da4:	700b      	strb	r3, [r1, #0]
 8004da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004dac:	4691      	mov	r9, r2
 8004dae:	f023 0820 	bic.w	r8, r3, #32
 8004db2:	bfbc      	itt	lt
 8004db4:	4622      	movlt	r2, r4
 8004db6:	4614      	movlt	r4, r2
 8004db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dbc:	d005      	beq.n	8004dca <__cvt+0x42>
 8004dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dc2:	d100      	bne.n	8004dc6 <__cvt+0x3e>
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	e000      	b.n	8004dcc <__cvt+0x44>
 8004dca:	2103      	movs	r1, #3
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	ab02      	add	r3, sp, #8
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	ec45 4b10 	vmov	d0, r4, r5
 8004dd8:	4653      	mov	r3, sl
 8004dda:	4632      	mov	r2, r6
 8004ddc:	f000 fe5c 	bl	8005a98 <_dtoa_r>
 8004de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004de4:	4607      	mov	r7, r0
 8004de6:	d102      	bne.n	8004dee <__cvt+0x66>
 8004de8:	f019 0f01 	tst.w	r9, #1
 8004dec:	d022      	beq.n	8004e34 <__cvt+0xac>
 8004dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004df2:	eb07 0906 	add.w	r9, r7, r6
 8004df6:	d110      	bne.n	8004e1a <__cvt+0x92>
 8004df8:	783b      	ldrb	r3, [r7, #0]
 8004dfa:	2b30      	cmp	r3, #48	; 0x30
 8004dfc:	d10a      	bne.n	8004e14 <__cvt+0x8c>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2300      	movs	r3, #0
 8004e02:	4620      	mov	r0, r4
 8004e04:	4629      	mov	r1, r5
 8004e06:	f7fb fe7f 	bl	8000b08 <__aeabi_dcmpeq>
 8004e0a:	b918      	cbnz	r0, 8004e14 <__cvt+0x8c>
 8004e0c:	f1c6 0601 	rsb	r6, r6, #1
 8004e10:	f8ca 6000 	str.w	r6, [sl]
 8004e14:	f8da 3000 	ldr.w	r3, [sl]
 8004e18:	4499      	add	r9, r3
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fe71 	bl	8000b08 <__aeabi_dcmpeq>
 8004e26:	b108      	cbz	r0, 8004e2c <__cvt+0xa4>
 8004e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e2c:	2230      	movs	r2, #48	; 0x30
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	454b      	cmp	r3, r9
 8004e32:	d307      	bcc.n	8004e44 <__cvt+0xbc>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e38:	1bdb      	subs	r3, r3, r7
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	b004      	add	sp, #16
 8004e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	9103      	str	r1, [sp, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e7f0      	b.n	8004e2e <__cvt+0xa6>

08004e4c <__exponent>:
 8004e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2900      	cmp	r1, #0
 8004e52:	bfb8      	it	lt
 8004e54:	4249      	neglt	r1, r1
 8004e56:	f803 2b02 	strb.w	r2, [r3], #2
 8004e5a:	bfb4      	ite	lt
 8004e5c:	222d      	movlt	r2, #45	; 0x2d
 8004e5e:	222b      	movge	r2, #43	; 0x2b
 8004e60:	2909      	cmp	r1, #9
 8004e62:	7042      	strb	r2, [r0, #1]
 8004e64:	dd2a      	ble.n	8004ebc <__exponent+0x70>
 8004e66:	f10d 0207 	add.w	r2, sp, #7
 8004e6a:	4617      	mov	r7, r2
 8004e6c:	260a      	movs	r6, #10
 8004e6e:	4694      	mov	ip, r2
 8004e70:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e74:	fb06 1415 	mls	r4, r6, r5, r1
 8004e78:	3430      	adds	r4, #48	; 0x30
 8004e7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e7e:	460c      	mov	r4, r1
 8004e80:	2c63      	cmp	r4, #99	; 0x63
 8004e82:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e86:	4629      	mov	r1, r5
 8004e88:	dcf1      	bgt.n	8004e6e <__exponent+0x22>
 8004e8a:	3130      	adds	r1, #48	; 0x30
 8004e8c:	f1ac 0402 	sub.w	r4, ip, #2
 8004e90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e94:	1c41      	adds	r1, r0, #1
 8004e96:	4622      	mov	r2, r4
 8004e98:	42ba      	cmp	r2, r7
 8004e9a:	d30a      	bcc.n	8004eb2 <__exponent+0x66>
 8004e9c:	f10d 0209 	add.w	r2, sp, #9
 8004ea0:	eba2 020c 	sub.w	r2, r2, ip
 8004ea4:	42bc      	cmp	r4, r7
 8004ea6:	bf88      	it	hi
 8004ea8:	2200      	movhi	r2, #0
 8004eaa:	4413      	add	r3, r2
 8004eac:	1a18      	subs	r0, r3, r0
 8004eae:	b003      	add	sp, #12
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004eb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004eba:	e7ed      	b.n	8004e98 <__exponent+0x4c>
 8004ebc:	2330      	movs	r3, #48	; 0x30
 8004ebe:	3130      	adds	r1, #48	; 0x30
 8004ec0:	7083      	strb	r3, [r0, #2]
 8004ec2:	70c1      	strb	r1, [r0, #3]
 8004ec4:	1d03      	adds	r3, r0, #4
 8004ec6:	e7f1      	b.n	8004eac <__exponent+0x60>

08004ec8 <_printf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	ed2d 8b02 	vpush	{d8}
 8004ed0:	b08d      	sub	sp, #52	; 0x34
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ed8:	4616      	mov	r6, r2
 8004eda:	461f      	mov	r7, r3
 8004edc:	4605      	mov	r5, r0
 8004ede:	f000 fcd9 	bl	8005894 <_localeconv_r>
 8004ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	f7fb f9e2 	bl	80002b0 <strlen>
 8004eec:	2300      	movs	r3, #0
 8004eee:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004efc:	3307      	adds	r3, #7
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	f103 0208 	add.w	r2, r3, #8
 8004f06:	f8c8 2000 	str.w	r2, [r8]
 8004f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f12:	9307      	str	r3, [sp, #28]
 8004f14:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f18:	ee08 0a10 	vmov	s16, r0
 8004f1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f24:	4b9e      	ldr	r3, [pc, #632]	; (80051a0 <_printf_float+0x2d8>)
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	f7fb fe1f 	bl	8000b6c <__aeabi_dcmpun>
 8004f2e:	bb88      	cbnz	r0, 8004f94 <_printf_float+0xcc>
 8004f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f34:	4b9a      	ldr	r3, [pc, #616]	; (80051a0 <_printf_float+0x2d8>)
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3a:	f7fb fdf9 	bl	8000b30 <__aeabi_dcmple>
 8004f3e:	bb48      	cbnz	r0, 8004f94 <_printf_float+0xcc>
 8004f40:	2200      	movs	r2, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb fde8 	bl	8000b1c <__aeabi_dcmplt>
 8004f4c:	b110      	cbz	r0, 8004f54 <_printf_float+0x8c>
 8004f4e:	232d      	movs	r3, #45	; 0x2d
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f54:	4a93      	ldr	r2, [pc, #588]	; (80051a4 <_printf_float+0x2dc>)
 8004f56:	4b94      	ldr	r3, [pc, #592]	; (80051a8 <_printf_float+0x2e0>)
 8004f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f5c:	bf94      	ite	ls
 8004f5e:	4690      	movls	r8, r2
 8004f60:	4698      	movhi	r8, r3
 8004f62:	2303      	movs	r3, #3
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	9b05      	ldr	r3, [sp, #20]
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	f04f 0900 	mov.w	r9, #0
 8004f72:	9700      	str	r7, [sp, #0]
 8004f74:	4633      	mov	r3, r6
 8004f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f9da 	bl	8005334 <_printf_common>
 8004f80:	3001      	adds	r0, #1
 8004f82:	f040 8090 	bne.w	80050a6 <_printf_float+0x1de>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	b00d      	add	sp, #52	; 0x34
 8004f8c:	ecbd 8b02 	vpop	{d8}
 8004f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	4640      	mov	r0, r8
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	f7fb fde6 	bl	8000b6c <__aeabi_dcmpun>
 8004fa0:	b140      	cbz	r0, 8004fb4 <_printf_float+0xec>
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bfbc      	itt	lt
 8004fa8:	232d      	movlt	r3, #45	; 0x2d
 8004faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fae:	4a7f      	ldr	r2, [pc, #508]	; (80051ac <_printf_float+0x2e4>)
 8004fb0:	4b7f      	ldr	r3, [pc, #508]	; (80051b0 <_printf_float+0x2e8>)
 8004fb2:	e7d1      	b.n	8004f58 <_printf_float+0x90>
 8004fb4:	6863      	ldr	r3, [r4, #4]
 8004fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fba:	9206      	str	r2, [sp, #24]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	d13f      	bne.n	8005040 <_printf_float+0x178>
 8004fc0:	2306      	movs	r3, #6
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	9b05      	ldr	r3, [sp, #20]
 8004fc6:	6861      	ldr	r1, [r4, #4]
 8004fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8004fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fd6:	ab09      	add	r3, sp, #36	; 0x24
 8004fd8:	ec49 8b10 	vmov	d0, r8, r9
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	6022      	str	r2, [r4, #0]
 8004fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f7ff fecf 	bl	8004d88 <__cvt>
 8004fea:	9b06      	ldr	r3, [sp, #24]
 8004fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fee:	2b47      	cmp	r3, #71	; 0x47
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	d108      	bne.n	8005006 <_printf_float+0x13e>
 8004ff4:	1cc8      	adds	r0, r1, #3
 8004ff6:	db02      	blt.n	8004ffe <_printf_float+0x136>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	dd41      	ble.n	8005082 <_printf_float+0x1ba>
 8004ffe:	f1ab 0302 	sub.w	r3, fp, #2
 8005002:	fa5f fb83 	uxtb.w	fp, r3
 8005006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800500a:	d820      	bhi.n	800504e <_printf_float+0x186>
 800500c:	3901      	subs	r1, #1
 800500e:	465a      	mov	r2, fp
 8005010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005014:	9109      	str	r1, [sp, #36]	; 0x24
 8005016:	f7ff ff19 	bl	8004e4c <__exponent>
 800501a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800501c:	1813      	adds	r3, r2, r0
 800501e:	2a01      	cmp	r2, #1
 8005020:	4681      	mov	r9, r0
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	dc02      	bgt.n	800502c <_printf_float+0x164>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	07d2      	lsls	r2, r2, #31
 800502a:	d501      	bpl.n	8005030 <_printf_float+0x168>
 800502c:	3301      	adds	r3, #1
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005034:	2b00      	cmp	r3, #0
 8005036:	d09c      	beq.n	8004f72 <_printf_float+0xaa>
 8005038:	232d      	movs	r3, #45	; 0x2d
 800503a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503e:	e798      	b.n	8004f72 <_printf_float+0xaa>
 8005040:	9a06      	ldr	r2, [sp, #24]
 8005042:	2a47      	cmp	r2, #71	; 0x47
 8005044:	d1be      	bne.n	8004fc4 <_printf_float+0xfc>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1bc      	bne.n	8004fc4 <_printf_float+0xfc>
 800504a:	2301      	movs	r3, #1
 800504c:	e7b9      	b.n	8004fc2 <_printf_float+0xfa>
 800504e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005052:	d118      	bne.n	8005086 <_printf_float+0x1be>
 8005054:	2900      	cmp	r1, #0
 8005056:	6863      	ldr	r3, [r4, #4]
 8005058:	dd0b      	ble.n	8005072 <_printf_float+0x1aa>
 800505a:	6121      	str	r1, [r4, #16]
 800505c:	b913      	cbnz	r3, 8005064 <_printf_float+0x19c>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	07d0      	lsls	r0, r2, #31
 8005062:	d502      	bpl.n	800506a <_printf_float+0x1a2>
 8005064:	3301      	adds	r3, #1
 8005066:	440b      	add	r3, r1
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	65a1      	str	r1, [r4, #88]	; 0x58
 800506c:	f04f 0900 	mov.w	r9, #0
 8005070:	e7de      	b.n	8005030 <_printf_float+0x168>
 8005072:	b913      	cbnz	r3, 800507a <_printf_float+0x1b2>
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	07d2      	lsls	r2, r2, #31
 8005078:	d501      	bpl.n	800507e <_printf_float+0x1b6>
 800507a:	3302      	adds	r3, #2
 800507c:	e7f4      	b.n	8005068 <_printf_float+0x1a0>
 800507e:	2301      	movs	r3, #1
 8005080:	e7f2      	b.n	8005068 <_printf_float+0x1a0>
 8005082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005088:	4299      	cmp	r1, r3
 800508a:	db05      	blt.n	8005098 <_printf_float+0x1d0>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	6121      	str	r1, [r4, #16]
 8005090:	07d8      	lsls	r0, r3, #31
 8005092:	d5ea      	bpl.n	800506a <_printf_float+0x1a2>
 8005094:	1c4b      	adds	r3, r1, #1
 8005096:	e7e7      	b.n	8005068 <_printf_float+0x1a0>
 8005098:	2900      	cmp	r1, #0
 800509a:	bfd4      	ite	le
 800509c:	f1c1 0202 	rsble	r2, r1, #2
 80050a0:	2201      	movgt	r2, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	e7e0      	b.n	8005068 <_printf_float+0x1a0>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	055a      	lsls	r2, r3, #21
 80050aa:	d407      	bmi.n	80050bc <_printf_float+0x1f4>
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	4642      	mov	r2, r8
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	d12c      	bne.n	8005114 <_printf_float+0x24c>
 80050ba:	e764      	b.n	8004f86 <_printf_float+0xbe>
 80050bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050c0:	f240 80e0 	bls.w	8005284 <_printf_float+0x3bc>
 80050c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050c8:	2200      	movs	r2, #0
 80050ca:	2300      	movs	r3, #0
 80050cc:	f7fb fd1c 	bl	8000b08 <__aeabi_dcmpeq>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d034      	beq.n	800513e <_printf_float+0x276>
 80050d4:	4a37      	ldr	r2, [pc, #220]	; (80051b4 <_printf_float+0x2ec>)
 80050d6:	2301      	movs	r3, #1
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	47b8      	blx	r7
 80050de:	3001      	adds	r0, #1
 80050e0:	f43f af51 	beq.w	8004f86 <_printf_float+0xbe>
 80050e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e8:	429a      	cmp	r2, r3
 80050ea:	db02      	blt.n	80050f2 <_printf_float+0x22a>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07d8      	lsls	r0, r3, #31
 80050f0:	d510      	bpl.n	8005114 <_printf_float+0x24c>
 80050f2:	ee18 3a10 	vmov	r3, s16
 80050f6:	4652      	mov	r2, sl
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f af41 	beq.w	8004f86 <_printf_float+0xbe>
 8005104:	f04f 0800 	mov.w	r8, #0
 8005108:	f104 091a 	add.w	r9, r4, #26
 800510c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	4543      	cmp	r3, r8
 8005112:	dc09      	bgt.n	8005128 <_printf_float+0x260>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	079b      	lsls	r3, r3, #30
 8005118:	f100 8107 	bmi.w	800532a <_printf_float+0x462>
 800511c:	68e0      	ldr	r0, [r4, #12]
 800511e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005120:	4298      	cmp	r0, r3
 8005122:	bfb8      	it	lt
 8005124:	4618      	movlt	r0, r3
 8005126:	e730      	b.n	8004f8a <_printf_float+0xc2>
 8005128:	2301      	movs	r3, #1
 800512a:	464a      	mov	r2, r9
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af27 	beq.w	8004f86 <_printf_float+0xbe>
 8005138:	f108 0801 	add.w	r8, r8, #1
 800513c:	e7e6      	b.n	800510c <_printf_float+0x244>
 800513e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	dc39      	bgt.n	80051b8 <_printf_float+0x2f0>
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <_printf_float+0x2ec>)
 8005146:	2301      	movs	r3, #1
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f af19 	beq.w	8004f86 <_printf_float+0xbe>
 8005154:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005158:	4313      	orrs	r3, r2
 800515a:	d102      	bne.n	8005162 <_printf_float+0x29a>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07d9      	lsls	r1, r3, #31
 8005160:	d5d8      	bpl.n	8005114 <_printf_float+0x24c>
 8005162:	ee18 3a10 	vmov	r3, s16
 8005166:	4652      	mov	r2, sl
 8005168:	4631      	mov	r1, r6
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f af09 	beq.w	8004f86 <_printf_float+0xbe>
 8005174:	f04f 0900 	mov.w	r9, #0
 8005178:	f104 0a1a 	add.w	sl, r4, #26
 800517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517e:	425b      	negs	r3, r3
 8005180:	454b      	cmp	r3, r9
 8005182:	dc01      	bgt.n	8005188 <_printf_float+0x2c0>
 8005184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005186:	e792      	b.n	80050ae <_printf_float+0x1e6>
 8005188:	2301      	movs	r3, #1
 800518a:	4652      	mov	r2, sl
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f aef7 	beq.w	8004f86 <_printf_float+0xbe>
 8005198:	f109 0901 	add.w	r9, r9, #1
 800519c:	e7ee      	b.n	800517c <_printf_float+0x2b4>
 800519e:	bf00      	nop
 80051a0:	7fefffff 	.word	0x7fefffff
 80051a4:	08007768 	.word	0x08007768
 80051a8:	0800776c 	.word	0x0800776c
 80051ac:	08007770 	.word	0x08007770
 80051b0:	08007774 	.word	0x08007774
 80051b4:	08007778 	.word	0x08007778
 80051b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051bc:	429a      	cmp	r2, r3
 80051be:	bfa8      	it	ge
 80051c0:	461a      	movge	r2, r3
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	4691      	mov	r9, r2
 80051c6:	dc37      	bgt.n	8005238 <_printf_float+0x370>
 80051c8:	f04f 0b00 	mov.w	fp, #0
 80051cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051d0:	f104 021a 	add.w	r2, r4, #26
 80051d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051d6:	9305      	str	r3, [sp, #20]
 80051d8:	eba3 0309 	sub.w	r3, r3, r9
 80051dc:	455b      	cmp	r3, fp
 80051de:	dc33      	bgt.n	8005248 <_printf_float+0x380>
 80051e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e4:	429a      	cmp	r2, r3
 80051e6:	db3b      	blt.n	8005260 <_printf_float+0x398>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	07da      	lsls	r2, r3, #31
 80051ec:	d438      	bmi.n	8005260 <_printf_float+0x398>
 80051ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051f2:	eba2 0903 	sub.w	r9, r2, r3
 80051f6:	9b05      	ldr	r3, [sp, #20]
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	4591      	cmp	r9, r2
 80051fc:	bfa8      	it	ge
 80051fe:	4691      	movge	r9, r2
 8005200:	f1b9 0f00 	cmp.w	r9, #0
 8005204:	dc35      	bgt.n	8005272 <_printf_float+0x3aa>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800520e:	f104 0a1a 	add.w	sl, r4, #26
 8005212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	eba3 0309 	sub.w	r3, r3, r9
 800521c:	4543      	cmp	r3, r8
 800521e:	f77f af79 	ble.w	8005114 <_printf_float+0x24c>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	f43f aeaa 	beq.w	8004f86 <_printf_float+0xbe>
 8005232:	f108 0801 	add.w	r8, r8, #1
 8005236:	e7ec      	b.n	8005212 <_printf_float+0x34a>
 8005238:	4613      	mov	r3, r2
 800523a:	4631      	mov	r1, r6
 800523c:	4642      	mov	r2, r8
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	d1c0      	bne.n	80051c8 <_printf_float+0x300>
 8005246:	e69e      	b.n	8004f86 <_printf_float+0xbe>
 8005248:	2301      	movs	r3, #1
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	9205      	str	r2, [sp, #20]
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f ae97 	beq.w	8004f86 <_printf_float+0xbe>
 8005258:	9a05      	ldr	r2, [sp, #20]
 800525a:	f10b 0b01 	add.w	fp, fp, #1
 800525e:	e7b9      	b.n	80051d4 <_printf_float+0x30c>
 8005260:	ee18 3a10 	vmov	r3, s16
 8005264:	4652      	mov	r2, sl
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	d1be      	bne.n	80051ee <_printf_float+0x326>
 8005270:	e689      	b.n	8004f86 <_printf_float+0xbe>
 8005272:	9a05      	ldr	r2, [sp, #20]
 8005274:	464b      	mov	r3, r9
 8005276:	4442      	add	r2, r8
 8005278:	4631      	mov	r1, r6
 800527a:	4628      	mov	r0, r5
 800527c:	47b8      	blx	r7
 800527e:	3001      	adds	r0, #1
 8005280:	d1c1      	bne.n	8005206 <_printf_float+0x33e>
 8005282:	e680      	b.n	8004f86 <_printf_float+0xbe>
 8005284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005286:	2a01      	cmp	r2, #1
 8005288:	dc01      	bgt.n	800528e <_printf_float+0x3c6>
 800528a:	07db      	lsls	r3, r3, #31
 800528c:	d53a      	bpl.n	8005304 <_printf_float+0x43c>
 800528e:	2301      	movs	r3, #1
 8005290:	4642      	mov	r2, r8
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae74 	beq.w	8004f86 <_printf_float+0xbe>
 800529e:	ee18 3a10 	vmov	r3, s16
 80052a2:	4652      	mov	r2, sl
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f ae6b 	beq.w	8004f86 <_printf_float+0xbe>
 80052b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052bc:	f7fb fc24 	bl	8000b08 <__aeabi_dcmpeq>
 80052c0:	b9d8      	cbnz	r0, 80052fa <_printf_float+0x432>
 80052c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052c6:	f108 0201 	add.w	r2, r8, #1
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	d10e      	bne.n	80052f2 <_printf_float+0x42a>
 80052d4:	e657      	b.n	8004f86 <_printf_float+0xbe>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4652      	mov	r2, sl
 80052da:	4631      	mov	r1, r6
 80052dc:	4628      	mov	r0, r5
 80052de:	47b8      	blx	r7
 80052e0:	3001      	adds	r0, #1
 80052e2:	f43f ae50 	beq.w	8004f86 <_printf_float+0xbe>
 80052e6:	f108 0801 	add.w	r8, r8, #1
 80052ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4543      	cmp	r3, r8
 80052f0:	dcf1      	bgt.n	80052d6 <_printf_float+0x40e>
 80052f2:	464b      	mov	r3, r9
 80052f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052f8:	e6da      	b.n	80050b0 <_printf_float+0x1e8>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	f104 0a1a 	add.w	sl, r4, #26
 8005302:	e7f2      	b.n	80052ea <_printf_float+0x422>
 8005304:	2301      	movs	r3, #1
 8005306:	4642      	mov	r2, r8
 8005308:	e7df      	b.n	80052ca <_printf_float+0x402>
 800530a:	2301      	movs	r3, #1
 800530c:	464a      	mov	r2, r9
 800530e:	4631      	mov	r1, r6
 8005310:	4628      	mov	r0, r5
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae36 	beq.w	8004f86 <_printf_float+0xbe>
 800531a:	f108 0801 	add.w	r8, r8, #1
 800531e:	68e3      	ldr	r3, [r4, #12]
 8005320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005322:	1a5b      	subs	r3, r3, r1
 8005324:	4543      	cmp	r3, r8
 8005326:	dcf0      	bgt.n	800530a <_printf_float+0x442>
 8005328:	e6f8      	b.n	800511c <_printf_float+0x254>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	f104 0919 	add.w	r9, r4, #25
 8005332:	e7f4      	b.n	800531e <_printf_float+0x456>

08005334 <_printf_common>:
 8005334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	4616      	mov	r6, r2
 800533a:	4699      	mov	r9, r3
 800533c:	688a      	ldr	r2, [r1, #8]
 800533e:	690b      	ldr	r3, [r1, #16]
 8005340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005344:	4293      	cmp	r3, r2
 8005346:	bfb8      	it	lt
 8005348:	4613      	movlt	r3, r2
 800534a:	6033      	str	r3, [r6, #0]
 800534c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005350:	4607      	mov	r7, r0
 8005352:	460c      	mov	r4, r1
 8005354:	b10a      	cbz	r2, 800535a <_printf_common+0x26>
 8005356:	3301      	adds	r3, #1
 8005358:	6033      	str	r3, [r6, #0]
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	0699      	lsls	r1, r3, #26
 800535e:	bf42      	ittt	mi
 8005360:	6833      	ldrmi	r3, [r6, #0]
 8005362:	3302      	addmi	r3, #2
 8005364:	6033      	strmi	r3, [r6, #0]
 8005366:	6825      	ldr	r5, [r4, #0]
 8005368:	f015 0506 	ands.w	r5, r5, #6
 800536c:	d106      	bne.n	800537c <_printf_common+0x48>
 800536e:	f104 0a19 	add.w	sl, r4, #25
 8005372:	68e3      	ldr	r3, [r4, #12]
 8005374:	6832      	ldr	r2, [r6, #0]
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	42ab      	cmp	r3, r5
 800537a:	dc26      	bgt.n	80053ca <_printf_common+0x96>
 800537c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005380:	1e13      	subs	r3, r2, #0
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	bf18      	it	ne
 8005386:	2301      	movne	r3, #1
 8005388:	0692      	lsls	r2, r2, #26
 800538a:	d42b      	bmi.n	80053e4 <_printf_common+0xb0>
 800538c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005390:	4649      	mov	r1, r9
 8005392:	4638      	mov	r0, r7
 8005394:	47c0      	blx	r8
 8005396:	3001      	adds	r0, #1
 8005398:	d01e      	beq.n	80053d8 <_printf_common+0xa4>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	6922      	ldr	r2, [r4, #16]
 800539e:	f003 0306 	and.w	r3, r3, #6
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	bf02      	ittt	eq
 80053a6:	68e5      	ldreq	r5, [r4, #12]
 80053a8:	6833      	ldreq	r3, [r6, #0]
 80053aa:	1aed      	subeq	r5, r5, r3
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	bf0c      	ite	eq
 80053b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b4:	2500      	movne	r5, #0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bfc4      	itt	gt
 80053ba:	1a9b      	subgt	r3, r3, r2
 80053bc:	18ed      	addgt	r5, r5, r3
 80053be:	2600      	movs	r6, #0
 80053c0:	341a      	adds	r4, #26
 80053c2:	42b5      	cmp	r5, r6
 80053c4:	d11a      	bne.n	80053fc <_printf_common+0xc8>
 80053c6:	2000      	movs	r0, #0
 80053c8:	e008      	b.n	80053dc <_printf_common+0xa8>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4652      	mov	r2, sl
 80053ce:	4649      	mov	r1, r9
 80053d0:	4638      	mov	r0, r7
 80053d2:	47c0      	blx	r8
 80053d4:	3001      	adds	r0, #1
 80053d6:	d103      	bne.n	80053e0 <_printf_common+0xac>
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e0:	3501      	adds	r5, #1
 80053e2:	e7c6      	b.n	8005372 <_printf_common+0x3e>
 80053e4:	18e1      	adds	r1, r4, r3
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	2030      	movs	r0, #48	; 0x30
 80053ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ee:	4422      	add	r2, r4
 80053f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053f8:	3302      	adds	r3, #2
 80053fa:	e7c7      	b.n	800538c <_printf_common+0x58>
 80053fc:	2301      	movs	r3, #1
 80053fe:	4622      	mov	r2, r4
 8005400:	4649      	mov	r1, r9
 8005402:	4638      	mov	r0, r7
 8005404:	47c0      	blx	r8
 8005406:	3001      	adds	r0, #1
 8005408:	d0e6      	beq.n	80053d8 <_printf_common+0xa4>
 800540a:	3601      	adds	r6, #1
 800540c:	e7d9      	b.n	80053c2 <_printf_common+0x8e>
	...

08005410 <_printf_i>:
 8005410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	7e0f      	ldrb	r7, [r1, #24]
 8005416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005418:	2f78      	cmp	r7, #120	; 0x78
 800541a:	4691      	mov	r9, r2
 800541c:	4680      	mov	r8, r0
 800541e:	460c      	mov	r4, r1
 8005420:	469a      	mov	sl, r3
 8005422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005426:	d807      	bhi.n	8005438 <_printf_i+0x28>
 8005428:	2f62      	cmp	r7, #98	; 0x62
 800542a:	d80a      	bhi.n	8005442 <_printf_i+0x32>
 800542c:	2f00      	cmp	r7, #0
 800542e:	f000 80d4 	beq.w	80055da <_printf_i+0x1ca>
 8005432:	2f58      	cmp	r7, #88	; 0x58
 8005434:	f000 80c0 	beq.w	80055b8 <_printf_i+0x1a8>
 8005438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800543c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005440:	e03a      	b.n	80054b8 <_printf_i+0xa8>
 8005442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005446:	2b15      	cmp	r3, #21
 8005448:	d8f6      	bhi.n	8005438 <_printf_i+0x28>
 800544a:	a101      	add	r1, pc, #4	; (adr r1, 8005450 <_printf_i+0x40>)
 800544c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005450:	080054a9 	.word	0x080054a9
 8005454:	080054bd 	.word	0x080054bd
 8005458:	08005439 	.word	0x08005439
 800545c:	08005439 	.word	0x08005439
 8005460:	08005439 	.word	0x08005439
 8005464:	08005439 	.word	0x08005439
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005439 	.word	0x08005439
 8005470:	08005439 	.word	0x08005439
 8005474:	08005439 	.word	0x08005439
 8005478:	08005439 	.word	0x08005439
 800547c:	080055c1 	.word	0x080055c1
 8005480:	080054e9 	.word	0x080054e9
 8005484:	0800557b 	.word	0x0800557b
 8005488:	08005439 	.word	0x08005439
 800548c:	08005439 	.word	0x08005439
 8005490:	080055e3 	.word	0x080055e3
 8005494:	08005439 	.word	0x08005439
 8005498:	080054e9 	.word	0x080054e9
 800549c:	08005439 	.word	0x08005439
 80054a0:	08005439 	.word	0x08005439
 80054a4:	08005583 	.word	0x08005583
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	602a      	str	r2, [r5, #0]
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b8:	2301      	movs	r3, #1
 80054ba:	e09f      	b.n	80055fc <_printf_i+0x1ec>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	0607      	lsls	r7, r0, #24
 80054c2:	f103 0104 	add.w	r1, r3, #4
 80054c6:	6029      	str	r1, [r5, #0]
 80054c8:	d501      	bpl.n	80054ce <_printf_i+0xbe>
 80054ca:	681e      	ldr	r6, [r3, #0]
 80054cc:	e003      	b.n	80054d6 <_printf_i+0xc6>
 80054ce:	0646      	lsls	r6, r0, #25
 80054d0:	d5fb      	bpl.n	80054ca <_printf_i+0xba>
 80054d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	da03      	bge.n	80054e2 <_printf_i+0xd2>
 80054da:	232d      	movs	r3, #45	; 0x2d
 80054dc:	4276      	negs	r6, r6
 80054de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e2:	485a      	ldr	r0, [pc, #360]	; (800564c <_printf_i+0x23c>)
 80054e4:	230a      	movs	r3, #10
 80054e6:	e012      	b.n	800550e <_printf_i+0xfe>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	6029      	str	r1, [r5, #0]
 80054f0:	0605      	lsls	r5, r0, #24
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0xe8>
 80054f4:	681e      	ldr	r6, [r3, #0]
 80054f6:	e002      	b.n	80054fe <_printf_i+0xee>
 80054f8:	0641      	lsls	r1, r0, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0xe4>
 80054fc:	881e      	ldrh	r6, [r3, #0]
 80054fe:	4853      	ldr	r0, [pc, #332]	; (800564c <_printf_i+0x23c>)
 8005500:	2f6f      	cmp	r7, #111	; 0x6f
 8005502:	bf0c      	ite	eq
 8005504:	2308      	moveq	r3, #8
 8005506:	230a      	movne	r3, #10
 8005508:	2100      	movs	r1, #0
 800550a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800550e:	6865      	ldr	r5, [r4, #4]
 8005510:	60a5      	str	r5, [r4, #8]
 8005512:	2d00      	cmp	r5, #0
 8005514:	bfa2      	ittt	ge
 8005516:	6821      	ldrge	r1, [r4, #0]
 8005518:	f021 0104 	bicge.w	r1, r1, #4
 800551c:	6021      	strge	r1, [r4, #0]
 800551e:	b90e      	cbnz	r6, 8005524 <_printf_i+0x114>
 8005520:	2d00      	cmp	r5, #0
 8005522:	d04b      	beq.n	80055bc <_printf_i+0x1ac>
 8005524:	4615      	mov	r5, r2
 8005526:	fbb6 f1f3 	udiv	r1, r6, r3
 800552a:	fb03 6711 	mls	r7, r3, r1, r6
 800552e:	5dc7      	ldrb	r7, [r0, r7]
 8005530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005534:	4637      	mov	r7, r6
 8005536:	42bb      	cmp	r3, r7
 8005538:	460e      	mov	r6, r1
 800553a:	d9f4      	bls.n	8005526 <_printf_i+0x116>
 800553c:	2b08      	cmp	r3, #8
 800553e:	d10b      	bne.n	8005558 <_printf_i+0x148>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	07de      	lsls	r6, r3, #31
 8005544:	d508      	bpl.n	8005558 <_printf_i+0x148>
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	4299      	cmp	r1, r3
 800554c:	bfde      	ittt	le
 800554e:	2330      	movle	r3, #48	; 0x30
 8005550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005558:	1b52      	subs	r2, r2, r5
 800555a:	6122      	str	r2, [r4, #16]
 800555c:	f8cd a000 	str.w	sl, [sp]
 8005560:	464b      	mov	r3, r9
 8005562:	aa03      	add	r2, sp, #12
 8005564:	4621      	mov	r1, r4
 8005566:	4640      	mov	r0, r8
 8005568:	f7ff fee4 	bl	8005334 <_printf_common>
 800556c:	3001      	adds	r0, #1
 800556e:	d14a      	bne.n	8005606 <_printf_i+0x1f6>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	b004      	add	sp, #16
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f043 0320 	orr.w	r3, r3, #32
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	4833      	ldr	r0, [pc, #204]	; (8005650 <_printf_i+0x240>)
 8005584:	2778      	movs	r7, #120	; 0x78
 8005586:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	6829      	ldr	r1, [r5, #0]
 800558e:	061f      	lsls	r7, r3, #24
 8005590:	f851 6b04 	ldr.w	r6, [r1], #4
 8005594:	d402      	bmi.n	800559c <_printf_i+0x18c>
 8005596:	065f      	lsls	r7, r3, #25
 8005598:	bf48      	it	mi
 800559a:	b2b6      	uxthmi	r6, r6
 800559c:	07df      	lsls	r7, r3, #31
 800559e:	bf48      	it	mi
 80055a0:	f043 0320 	orrmi.w	r3, r3, #32
 80055a4:	6029      	str	r1, [r5, #0]
 80055a6:	bf48      	it	mi
 80055a8:	6023      	strmi	r3, [r4, #0]
 80055aa:	b91e      	cbnz	r6, 80055b4 <_printf_i+0x1a4>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	f023 0320 	bic.w	r3, r3, #32
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	2310      	movs	r3, #16
 80055b6:	e7a7      	b.n	8005508 <_printf_i+0xf8>
 80055b8:	4824      	ldr	r0, [pc, #144]	; (800564c <_printf_i+0x23c>)
 80055ba:	e7e4      	b.n	8005586 <_printf_i+0x176>
 80055bc:	4615      	mov	r5, r2
 80055be:	e7bd      	b.n	800553c <_printf_i+0x12c>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	6826      	ldr	r6, [r4, #0]
 80055c4:	6961      	ldr	r1, [r4, #20]
 80055c6:	1d18      	adds	r0, r3, #4
 80055c8:	6028      	str	r0, [r5, #0]
 80055ca:	0635      	lsls	r5, r6, #24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	d501      	bpl.n	80055d4 <_printf_i+0x1c4>
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	e002      	b.n	80055da <_printf_i+0x1ca>
 80055d4:	0670      	lsls	r0, r6, #25
 80055d6:	d5fb      	bpl.n	80055d0 <_printf_i+0x1c0>
 80055d8:	8019      	strh	r1, [r3, #0]
 80055da:	2300      	movs	r3, #0
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	4615      	mov	r5, r2
 80055e0:	e7bc      	b.n	800555c <_printf_i+0x14c>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	602a      	str	r2, [r5, #0]
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	6862      	ldr	r2, [r4, #4]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4628      	mov	r0, r5
 80055f0:	f7fa fe0e 	bl	8000210 <memchr>
 80055f4:	b108      	cbz	r0, 80055fa <_printf_i+0x1ea>
 80055f6:	1b40      	subs	r0, r0, r5
 80055f8:	6060      	str	r0, [r4, #4]
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	2300      	movs	r3, #0
 8005600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005604:	e7aa      	b.n	800555c <_printf_i+0x14c>
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	462a      	mov	r2, r5
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d0ad      	beq.n	8005570 <_printf_i+0x160>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	079b      	lsls	r3, r3, #30
 8005618:	d413      	bmi.n	8005642 <_printf_i+0x232>
 800561a:	68e0      	ldr	r0, [r4, #12]
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	4298      	cmp	r0, r3
 8005620:	bfb8      	it	lt
 8005622:	4618      	movlt	r0, r3
 8005624:	e7a6      	b.n	8005574 <_printf_i+0x164>
 8005626:	2301      	movs	r3, #1
 8005628:	4632      	mov	r2, r6
 800562a:	4649      	mov	r1, r9
 800562c:	4640      	mov	r0, r8
 800562e:	47d0      	blx	sl
 8005630:	3001      	adds	r0, #1
 8005632:	d09d      	beq.n	8005570 <_printf_i+0x160>
 8005634:	3501      	adds	r5, #1
 8005636:	68e3      	ldr	r3, [r4, #12]
 8005638:	9903      	ldr	r1, [sp, #12]
 800563a:	1a5b      	subs	r3, r3, r1
 800563c:	42ab      	cmp	r3, r5
 800563e:	dcf2      	bgt.n	8005626 <_printf_i+0x216>
 8005640:	e7eb      	b.n	800561a <_printf_i+0x20a>
 8005642:	2500      	movs	r5, #0
 8005644:	f104 0619 	add.w	r6, r4, #25
 8005648:	e7f5      	b.n	8005636 <_printf_i+0x226>
 800564a:	bf00      	nop
 800564c:	0800777a 	.word	0x0800777a
 8005650:	0800778b 	.word	0x0800778b

08005654 <std>:
 8005654:	2300      	movs	r3, #0
 8005656:	b510      	push	{r4, lr}
 8005658:	4604      	mov	r4, r0
 800565a:	e9c0 3300 	strd	r3, r3, [r0]
 800565e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005662:	6083      	str	r3, [r0, #8]
 8005664:	8181      	strh	r1, [r0, #12]
 8005666:	6643      	str	r3, [r0, #100]	; 0x64
 8005668:	81c2      	strh	r2, [r0, #14]
 800566a:	6183      	str	r3, [r0, #24]
 800566c:	4619      	mov	r1, r3
 800566e:	2208      	movs	r2, #8
 8005670:	305c      	adds	r0, #92	; 0x5c
 8005672:	f000 f906 	bl	8005882 <memset>
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <std+0x58>)
 8005678:	6263      	str	r3, [r4, #36]	; 0x24
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <std+0x5c>)
 800567c:	62a3      	str	r3, [r4, #40]	; 0x28
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <std+0x60>)
 8005680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <std+0x64>)
 8005684:	6323      	str	r3, [r4, #48]	; 0x30
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <std+0x68>)
 8005688:	6224      	str	r4, [r4, #32]
 800568a:	429c      	cmp	r4, r3
 800568c:	d006      	beq.n	800569c <std+0x48>
 800568e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005692:	4294      	cmp	r4, r2
 8005694:	d002      	beq.n	800569c <std+0x48>
 8005696:	33d0      	adds	r3, #208	; 0xd0
 8005698:	429c      	cmp	r4, r3
 800569a:	d105      	bne.n	80056a8 <std+0x54>
 800569c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a4:	f000 b96a 	b.w	800597c <__retarget_lock_init_recursive>
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	bf00      	nop
 80056ac:	080057fd 	.word	0x080057fd
 80056b0:	0800581f 	.word	0x0800581f
 80056b4:	08005857 	.word	0x08005857
 80056b8:	0800587b 	.word	0x0800587b
 80056bc:	20000328 	.word	0x20000328

080056c0 <stdio_exit_handler>:
 80056c0:	4a02      	ldr	r2, [pc, #8]	; (80056cc <stdio_exit_handler+0xc>)
 80056c2:	4903      	ldr	r1, [pc, #12]	; (80056d0 <stdio_exit_handler+0x10>)
 80056c4:	4803      	ldr	r0, [pc, #12]	; (80056d4 <stdio_exit_handler+0x14>)
 80056c6:	f000 b869 	b.w	800579c <_fwalk_sglue>
 80056ca:	bf00      	nop
 80056cc:	2000003c 	.word	0x2000003c
 80056d0:	08007309 	.word	0x08007309
 80056d4:	20000048 	.word	0x20000048

080056d8 <cleanup_stdio>:
 80056d8:	6841      	ldr	r1, [r0, #4]
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <cleanup_stdio+0x34>)
 80056dc:	4299      	cmp	r1, r3
 80056de:	b510      	push	{r4, lr}
 80056e0:	4604      	mov	r4, r0
 80056e2:	d001      	beq.n	80056e8 <cleanup_stdio+0x10>
 80056e4:	f001 fe10 	bl	8007308 <_fflush_r>
 80056e8:	68a1      	ldr	r1, [r4, #8]
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <cleanup_stdio+0x38>)
 80056ec:	4299      	cmp	r1, r3
 80056ee:	d002      	beq.n	80056f6 <cleanup_stdio+0x1e>
 80056f0:	4620      	mov	r0, r4
 80056f2:	f001 fe09 	bl	8007308 <_fflush_r>
 80056f6:	68e1      	ldr	r1, [r4, #12]
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <cleanup_stdio+0x3c>)
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d004      	beq.n	8005708 <cleanup_stdio+0x30>
 80056fe:	4620      	mov	r0, r4
 8005700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005704:	f001 be00 	b.w	8007308 <_fflush_r>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	bf00      	nop
 800570c:	20000328 	.word	0x20000328
 8005710:	20000390 	.word	0x20000390
 8005714:	200003f8 	.word	0x200003f8

08005718 <global_stdio_init.part.0>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <global_stdio_init.part.0+0x30>)
 800571c:	4c0b      	ldr	r4, [pc, #44]	; (800574c <global_stdio_init.part.0+0x34>)
 800571e:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <global_stdio_init.part.0+0x38>)
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	4620      	mov	r0, r4
 8005724:	2200      	movs	r2, #0
 8005726:	2104      	movs	r1, #4
 8005728:	f7ff ff94 	bl	8005654 <std>
 800572c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005730:	2201      	movs	r2, #1
 8005732:	2109      	movs	r1, #9
 8005734:	f7ff ff8e 	bl	8005654 <std>
 8005738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800573c:	2202      	movs	r2, #2
 800573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005742:	2112      	movs	r1, #18
 8005744:	f7ff bf86 	b.w	8005654 <std>
 8005748:	20000460 	.word	0x20000460
 800574c:	20000328 	.word	0x20000328
 8005750:	080056c1 	.word	0x080056c1

08005754 <__sfp_lock_acquire>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sfp_lock_acquire+0x8>)
 8005756:	f000 b912 	b.w	800597e <__retarget_lock_acquire_recursive>
 800575a:	bf00      	nop
 800575c:	20000469 	.word	0x20000469

08005760 <__sfp_lock_release>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <__sfp_lock_release+0x8>)
 8005762:	f000 b90d 	b.w	8005980 <__retarget_lock_release_recursive>
 8005766:	bf00      	nop
 8005768:	20000469 	.word	0x20000469

0800576c <__sinit>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	f7ff fff0 	bl	8005754 <__sfp_lock_acquire>
 8005774:	6a23      	ldr	r3, [r4, #32]
 8005776:	b11b      	cbz	r3, 8005780 <__sinit+0x14>
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577c:	f7ff bff0 	b.w	8005760 <__sfp_lock_release>
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__sinit+0x28>)
 8005782:	6223      	str	r3, [r4, #32]
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <__sinit+0x2c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f5      	bne.n	8005778 <__sinit+0xc>
 800578c:	f7ff ffc4 	bl	8005718 <global_stdio_init.part.0>
 8005790:	e7f2      	b.n	8005778 <__sinit+0xc>
 8005792:	bf00      	nop
 8005794:	080056d9 	.word	0x080056d9
 8005798:	20000460 	.word	0x20000460

0800579c <_fwalk_sglue>:
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a0:	4607      	mov	r7, r0
 80057a2:	4688      	mov	r8, r1
 80057a4:	4614      	mov	r4, r2
 80057a6:	2600      	movs	r6, #0
 80057a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ac:	f1b9 0901 	subs.w	r9, r9, #1
 80057b0:	d505      	bpl.n	80057be <_fwalk_sglue+0x22>
 80057b2:	6824      	ldr	r4, [r4, #0]
 80057b4:	2c00      	cmp	r4, #0
 80057b6:	d1f7      	bne.n	80057a8 <_fwalk_sglue+0xc>
 80057b8:	4630      	mov	r0, r6
 80057ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d907      	bls.n	80057d4 <_fwalk_sglue+0x38>
 80057c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c8:	3301      	adds	r3, #1
 80057ca:	d003      	beq.n	80057d4 <_fwalk_sglue+0x38>
 80057cc:	4629      	mov	r1, r5
 80057ce:	4638      	mov	r0, r7
 80057d0:	47c0      	blx	r8
 80057d2:	4306      	orrs	r6, r0
 80057d4:	3568      	adds	r5, #104	; 0x68
 80057d6:	e7e9      	b.n	80057ac <_fwalk_sglue+0x10>

080057d8 <iprintf>:
 80057d8:	b40f      	push	{r0, r1, r2, r3}
 80057da:	b507      	push	{r0, r1, r2, lr}
 80057dc:	4906      	ldr	r1, [pc, #24]	; (80057f8 <iprintf+0x20>)
 80057de:	ab04      	add	r3, sp, #16
 80057e0:	6808      	ldr	r0, [r1, #0]
 80057e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e6:	6881      	ldr	r1, [r0, #8]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	f001 fbed 	bl	8006fc8 <_vfiprintf_r>
 80057ee:	b003      	add	sp, #12
 80057f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	20000094 	.word	0x20000094

080057fc <__sread>:
 80057fc:	b510      	push	{r4, lr}
 80057fe:	460c      	mov	r4, r1
 8005800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005804:	f000 f86c 	bl	80058e0 <_read_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	bfab      	itete	ge
 800580c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800580e:	89a3      	ldrhlt	r3, [r4, #12]
 8005810:	181b      	addge	r3, r3, r0
 8005812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005816:	bfac      	ite	ge
 8005818:	6563      	strge	r3, [r4, #84]	; 0x54
 800581a:	81a3      	strhlt	r3, [r4, #12]
 800581c:	bd10      	pop	{r4, pc}

0800581e <__swrite>:
 800581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	461f      	mov	r7, r3
 8005824:	898b      	ldrh	r3, [r1, #12]
 8005826:	05db      	lsls	r3, r3, #23
 8005828:	4605      	mov	r5, r0
 800582a:	460c      	mov	r4, r1
 800582c:	4616      	mov	r6, r2
 800582e:	d505      	bpl.n	800583c <__swrite+0x1e>
 8005830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005834:	2302      	movs	r3, #2
 8005836:	2200      	movs	r2, #0
 8005838:	f000 f840 	bl	80058bc <_lseek_r>
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	4632      	mov	r2, r6
 800584a:	463b      	mov	r3, r7
 800584c:	4628      	mov	r0, r5
 800584e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005852:	f000 b857 	b.w	8005904 <_write_r>

08005856 <__sseek>:
 8005856:	b510      	push	{r4, lr}
 8005858:	460c      	mov	r4, r1
 800585a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585e:	f000 f82d 	bl	80058bc <_lseek_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	bf15      	itete	ne
 8005868:	6560      	strne	r0, [r4, #84]	; 0x54
 800586a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800586e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005872:	81a3      	strheq	r3, [r4, #12]
 8005874:	bf18      	it	ne
 8005876:	81a3      	strhne	r3, [r4, #12]
 8005878:	bd10      	pop	{r4, pc}

0800587a <__sclose>:
 800587a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587e:	f000 b80d 	b.w	800589c <_close_r>

08005882 <memset>:
 8005882:	4402      	add	r2, r0
 8005884:	4603      	mov	r3, r0
 8005886:	4293      	cmp	r3, r2
 8005888:	d100      	bne.n	800588c <memset+0xa>
 800588a:	4770      	bx	lr
 800588c:	f803 1b01 	strb.w	r1, [r3], #1
 8005890:	e7f9      	b.n	8005886 <memset+0x4>
	...

08005894 <_localeconv_r>:
 8005894:	4800      	ldr	r0, [pc, #0]	; (8005898 <_localeconv_r+0x4>)
 8005896:	4770      	bx	lr
 8005898:	20000188 	.word	0x20000188

0800589c <_close_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	; (80058b8 <_close_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fb ff65 	bl	8001776 <_close>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_close_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_close_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20000464 	.word	0x20000464

080058bc <_lseek_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	; (80058dc <_lseek_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb ff7a 	bl	80017c4 <_lseek>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_lseek_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_lseek_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000464 	.word	0x20000464

080058e0 <_read_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	; (8005900 <_read_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fb ff24 	bl	800173c <_read>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_read_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_read_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	20000464 	.word	0x20000464

08005904 <_write_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_write_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb fae6 	bl	8000ee4 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_write_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_write_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000464 	.word	0x20000464

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	; (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000094 	.word	0x20000094

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	; (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	; (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	; (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	; (8005978 <__libc_init_array+0x44>)
 8005948:	f001 fef0 	bl	800772c <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	08007ae4 	.word	0x08007ae4
 8005970:	08007ae4 	.word	0x08007ae4
 8005974:	08007ae4 	.word	0x08007ae4
 8005978:	08007ae8 	.word	0x08007ae8

0800597c <__retarget_lock_init_recursive>:
 800597c:	4770      	bx	lr

0800597e <__retarget_lock_acquire_recursive>:
 800597e:	4770      	bx	lr

08005980 <__retarget_lock_release_recursive>:
 8005980:	4770      	bx	lr

08005982 <quorem>:
 8005982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	6903      	ldr	r3, [r0, #16]
 8005988:	690c      	ldr	r4, [r1, #16]
 800598a:	42a3      	cmp	r3, r4
 800598c:	4607      	mov	r7, r0
 800598e:	db7e      	blt.n	8005a8e <quorem+0x10c>
 8005990:	3c01      	subs	r4, #1
 8005992:	f101 0814 	add.w	r8, r1, #20
 8005996:	f100 0514 	add.w	r5, r0, #20
 800599a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059a8:	3301      	adds	r3, #1
 80059aa:	429a      	cmp	r2, r3
 80059ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80059b8:	d331      	bcc.n	8005a1e <quorem+0x9c>
 80059ba:	f04f 0e00 	mov.w	lr, #0
 80059be:	4640      	mov	r0, r8
 80059c0:	46ac      	mov	ip, r5
 80059c2:	46f2      	mov	sl, lr
 80059c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80059c8:	b293      	uxth	r3, r2
 80059ca:	fb06 e303 	mla	r3, r6, r3, lr
 80059ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059d2:	0c1a      	lsrs	r2, r3, #16
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ebaa 0303 	sub.w	r3, sl, r3
 80059da:	f8dc a000 	ldr.w	sl, [ip]
 80059de:	fa13 f38a 	uxtah	r3, r3, sl
 80059e2:	fb06 220e 	mla	r2, r6, lr, r2
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	9b00      	ldr	r3, [sp, #0]
 80059ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059ee:	b292      	uxth	r2, r2
 80059f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80059fc:	4581      	cmp	r9, r0
 80059fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a02:	f84c 3b04 	str.w	r3, [ip], #4
 8005a06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a0a:	d2db      	bcs.n	80059c4 <quorem+0x42>
 8005a0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a10:	b92b      	cbnz	r3, 8005a1e <quorem+0x9c>
 8005a12:	9b01      	ldr	r3, [sp, #4]
 8005a14:	3b04      	subs	r3, #4
 8005a16:	429d      	cmp	r5, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	d32c      	bcc.n	8005a76 <quorem+0xf4>
 8005a1c:	613c      	str	r4, [r7, #16]
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f001 f9a8 	bl	8006d74 <__mcmp>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	db22      	blt.n	8005a6e <quorem+0xec>
 8005a28:	3601      	adds	r6, #1
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a32:	f8d1 c000 	ldr.w	ip, [r1]
 8005a36:	b293      	uxth	r3, r2
 8005a38:	1ac3      	subs	r3, r0, r3
 8005a3a:	0c12      	lsrs	r2, r2, #16
 8005a3c:	fa13 f38c 	uxtah	r3, r3, ip
 8005a40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a4e:	45c1      	cmp	r9, r8
 8005a50:	f841 3b04 	str.w	r3, [r1], #4
 8005a54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a58:	d2e9      	bcs.n	8005a2e <quorem+0xac>
 8005a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a62:	b922      	cbnz	r2, 8005a6e <quorem+0xec>
 8005a64:	3b04      	subs	r3, #4
 8005a66:	429d      	cmp	r5, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	d30a      	bcc.n	8005a82 <quorem+0x100>
 8005a6c:	613c      	str	r4, [r7, #16]
 8005a6e:	4630      	mov	r0, r6
 8005a70:	b003      	add	sp, #12
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d1ce      	bne.n	8005a1c <quorem+0x9a>
 8005a7e:	3c01      	subs	r4, #1
 8005a80:	e7c9      	b.n	8005a16 <quorem+0x94>
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	3b04      	subs	r3, #4
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d1f0      	bne.n	8005a6c <quorem+0xea>
 8005a8a:	3c01      	subs	r4, #1
 8005a8c:	e7eb      	b.n	8005a66 <quorem+0xe4>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e7ee      	b.n	8005a70 <quorem+0xee>
 8005a92:	0000      	movs	r0, r0
 8005a94:	0000      	movs	r0, r0
	...

08005a98 <_dtoa_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b04 	vpush	{d8-d9}
 8005aa0:	69c5      	ldr	r5, [r0, #28]
 8005aa2:	b093      	sub	sp, #76	; 0x4c
 8005aa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005aa8:	ec57 6b10 	vmov	r6, r7, d0
 8005aac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ab0:	9107      	str	r1, [sp, #28]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ab8:	b975      	cbnz	r5, 8005ad8 <_dtoa_r+0x40>
 8005aba:	2010      	movs	r0, #16
 8005abc:	f000 fe2a 	bl	8006714 <malloc>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	61e0      	str	r0, [r4, #28]
 8005ac4:	b920      	cbnz	r0, 8005ad0 <_dtoa_r+0x38>
 8005ac6:	4bae      	ldr	r3, [pc, #696]	; (8005d80 <_dtoa_r+0x2e8>)
 8005ac8:	21ef      	movs	r1, #239	; 0xef
 8005aca:	48ae      	ldr	r0, [pc, #696]	; (8005d84 <_dtoa_r+0x2ec>)
 8005acc:	f001 fcf8 	bl	80074c0 <__assert_func>
 8005ad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ad4:	6005      	str	r5, [r0, #0]
 8005ad6:	60c5      	str	r5, [r0, #12]
 8005ad8:	69e3      	ldr	r3, [r4, #28]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	b151      	cbz	r1, 8005af4 <_dtoa_r+0x5c>
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	604a      	str	r2, [r1, #4]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4093      	lsls	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 ff07 	bl	80068fc <_Bfree>
 8005aee:	69e3      	ldr	r3, [r4, #28]
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	1e3b      	subs	r3, r7, #0
 8005af6:	bfbb      	ittet	lt
 8005af8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	9303      	strlt	r3, [sp, #12]
 8005afe:	2300      	movge	r3, #0
 8005b00:	2201      	movlt	r2, #1
 8005b02:	bfac      	ite	ge
 8005b04:	f8c8 3000 	strge.w	r3, [r8]
 8005b08:	f8c8 2000 	strlt.w	r2, [r8]
 8005b0c:	4b9e      	ldr	r3, [pc, #632]	; (8005d88 <_dtoa_r+0x2f0>)
 8005b0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b12:	ea33 0308 	bics.w	r3, r3, r8
 8005b16:	d11b      	bne.n	8005b50 <_dtoa_r+0xb8>
 8005b18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b24:	4333      	orrs	r3, r6
 8005b26:	f000 8593 	beq.w	8006650 <_dtoa_r+0xbb8>
 8005b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b2c:	b963      	cbnz	r3, 8005b48 <_dtoa_r+0xb0>
 8005b2e:	4b97      	ldr	r3, [pc, #604]	; (8005d8c <_dtoa_r+0x2f4>)
 8005b30:	e027      	b.n	8005b82 <_dtoa_r+0xea>
 8005b32:	4b97      	ldr	r3, [pc, #604]	; (8005d90 <_dtoa_r+0x2f8>)
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	9800      	ldr	r0, [sp, #0]
 8005b3e:	b013      	add	sp, #76	; 0x4c
 8005b40:	ecbd 8b04 	vpop	{d8-d9}
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	4b90      	ldr	r3, [pc, #576]	; (8005d8c <_dtoa_r+0x2f4>)
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	3303      	adds	r3, #3
 8005b4e:	e7f3      	b.n	8005b38 <_dtoa_r+0xa0>
 8005b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	ec51 0b17 	vmov	r0, r1, d7
 8005b5a:	eeb0 8a47 	vmov.f32	s16, s14
 8005b5e:	eef0 8a67 	vmov.f32	s17, s15
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ffd0 	bl	8000b08 <__aeabi_dcmpeq>
 8005b68:	4681      	mov	r9, r0
 8005b6a:	b160      	cbz	r0, 8005b86 <_dtoa_r+0xee>
 8005b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b6e:	2301      	movs	r3, #1
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8568 	beq.w	800664a <_dtoa_r+0xbb2>
 8005b7a:	4b86      	ldr	r3, [pc, #536]	; (8005d94 <_dtoa_r+0x2fc>)
 8005b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	e7da      	b.n	8005b3c <_dtoa_r+0xa4>
 8005b86:	aa10      	add	r2, sp, #64	; 0x40
 8005b88:	a911      	add	r1, sp, #68	; 0x44
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b90:	eef0 0a68 	vmov.f32	s1, s17
 8005b94:	f001 f994 	bl	8006ec0 <__d2b>
 8005b98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	d07f      	beq.n	8005ca2 <_dtoa_r+0x20a>
 8005ba2:	ee18 3a90 	vmov	r3, s17
 8005ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005baa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005bae:	ec51 0b18 	vmov	r0, r1, d8
 8005bb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005bb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4b75      	ldr	r3, [pc, #468]	; (8005d98 <_dtoa_r+0x300>)
 8005bc4:	f7fa fb80 	bl	80002c8 <__aeabi_dsub>
 8005bc8:	a367      	add	r3, pc, #412	; (adr r3, 8005d68 <_dtoa_r+0x2d0>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fd33 	bl	8000638 <__aeabi_dmul>
 8005bd2:	a367      	add	r3, pc, #412	; (adr r3, 8005d70 <_dtoa_r+0x2d8>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fb78 	bl	80002cc <__adddf3>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	4628      	mov	r0, r5
 8005be0:	460f      	mov	r7, r1
 8005be2:	f7fa fcbf 	bl	8000564 <__aeabi_i2d>
 8005be6:	a364      	add	r3, pc, #400	; (adr r3, 8005d78 <_dtoa_r+0x2e0>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fd24 	bl	8000638 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa fb68 	bl	80002cc <__adddf3>
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	f7fa ffca 	bl	8000b98 <__aeabi_d2iz>
 8005c04:	2200      	movs	r2, #0
 8005c06:	4683      	mov	fp, r0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	f7fa ff85 	bl	8000b1c <__aeabi_dcmplt>
 8005c12:	b148      	cbz	r0, 8005c28 <_dtoa_r+0x190>
 8005c14:	4658      	mov	r0, fp
 8005c16:	f7fa fca5 	bl	8000564 <__aeabi_i2d>
 8005c1a:	4632      	mov	r2, r6
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	f7fa ff73 	bl	8000b08 <__aeabi_dcmpeq>
 8005c22:	b908      	cbnz	r0, 8005c28 <_dtoa_r+0x190>
 8005c24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c28:	f1bb 0f16 	cmp.w	fp, #22
 8005c2c:	d857      	bhi.n	8005cde <_dtoa_r+0x246>
 8005c2e:	4b5b      	ldr	r3, [pc, #364]	; (8005d9c <_dtoa_r+0x304>)
 8005c30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	ec51 0b18 	vmov	r0, r1, d8
 8005c3c:	f7fa ff6e 	bl	8000b1c <__aeabi_dcmplt>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d04e      	beq.n	8005ce2 <_dtoa_r+0x24a>
 8005c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c4e:	1b5b      	subs	r3, r3, r5
 8005c50:	1e5a      	subs	r2, r3, #1
 8005c52:	bf45      	ittet	mi
 8005c54:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c58:	9305      	strmi	r3, [sp, #20]
 8005c5a:	2300      	movpl	r3, #0
 8005c5c:	2300      	movmi	r3, #0
 8005c5e:	9206      	str	r2, [sp, #24]
 8005c60:	bf54      	ite	pl
 8005c62:	9305      	strpl	r3, [sp, #20]
 8005c64:	9306      	strmi	r3, [sp, #24]
 8005c66:	f1bb 0f00 	cmp.w	fp, #0
 8005c6a:	db3c      	blt.n	8005ce6 <_dtoa_r+0x24e>
 8005c6c:	9b06      	ldr	r3, [sp, #24]
 8005c6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c72:	445b      	add	r3, fp
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9308      	str	r3, [sp, #32]
 8005c7a:	9b07      	ldr	r3, [sp, #28]
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d868      	bhi.n	8005d52 <_dtoa_r+0x2ba>
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	bfc4      	itt	gt
 8005c84:	3b04      	subgt	r3, #4
 8005c86:	9307      	strgt	r3, [sp, #28]
 8005c88:	9b07      	ldr	r3, [sp, #28]
 8005c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c8e:	bfcc      	ite	gt
 8005c90:	2500      	movgt	r5, #0
 8005c92:	2501      	movle	r5, #1
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	f200 8085 	bhi.w	8005da4 <_dtoa_r+0x30c>
 8005c9a:	e8df f003 	tbb	[pc, r3]
 8005c9e:	3b2e      	.short	0x3b2e
 8005ca0:	5839      	.short	0x5839
 8005ca2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ca6:	441d      	add	r5, r3
 8005ca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	bfc1      	itttt	gt
 8005cb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005cb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005cbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005cc0:	bfd6      	itet	le
 8005cc2:	f1c3 0320 	rsble	r3, r3, #32
 8005cc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005cca:	fa06 f003 	lslle.w	r0, r6, r3
 8005cce:	f7fa fc39 	bl	8000544 <__aeabi_ui2d>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005cd8:	3d01      	subs	r5, #1
 8005cda:	920e      	str	r2, [sp, #56]	; 0x38
 8005cdc:	e76f      	b.n	8005bbe <_dtoa_r+0x126>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e7b3      	b.n	8005c4a <_dtoa_r+0x1b2>
 8005ce2:	900c      	str	r0, [sp, #48]	; 0x30
 8005ce4:	e7b2      	b.n	8005c4c <_dtoa_r+0x1b4>
 8005ce6:	9b05      	ldr	r3, [sp, #20]
 8005ce8:	eba3 030b 	sub.w	r3, r3, fp
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	f1cb 0300 	rsb	r3, fp, #0
 8005cf2:	9308      	str	r3, [sp, #32]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	e7bf      	b.n	8005c7a <_dtoa_r+0x1e2>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dc52      	bgt.n	8005daa <_dtoa_r+0x312>
 8005d04:	2301      	movs	r3, #1
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d0e:	e00b      	b.n	8005d28 <_dtoa_r+0x290>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e7f3      	b.n	8005cfc <_dtoa_r+0x264>
 8005d14:	2300      	movs	r3, #0
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1a:	445b      	add	r3, fp
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	bfb8      	it	lt
 8005d26:	2301      	movlt	r3, #1
 8005d28:	69e0      	ldr	r0, [r4, #28]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	f102 0614 	add.w	r6, r2, #20
 8005d32:	429e      	cmp	r6, r3
 8005d34:	d93d      	bls.n	8005db2 <_dtoa_r+0x31a>
 8005d36:	6041      	str	r1, [r0, #4]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fd9f 	bl	800687c <_Balloc>
 8005d3e:	9000      	str	r0, [sp, #0]
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d139      	bne.n	8005db8 <_dtoa_r+0x320>
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <_dtoa_r+0x308>)
 8005d46:	4602      	mov	r2, r0
 8005d48:	f240 11af 	movw	r1, #431	; 0x1af
 8005d4c:	e6bd      	b.n	8005aca <_dtoa_r+0x32>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e7e1      	b.n	8005d16 <_dtoa_r+0x27e>
 8005d52:	2501      	movs	r5, #1
 8005d54:	2300      	movs	r3, #0
 8005d56:	9307      	str	r3, [sp, #28]
 8005d58:	9509      	str	r5, [sp, #36]	; 0x24
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2312      	movs	r3, #18
 8005d66:	e7d1      	b.n	8005d0c <_dtoa_r+0x274>
 8005d68:	636f4361 	.word	0x636f4361
 8005d6c:	3fd287a7 	.word	0x3fd287a7
 8005d70:	8b60c8b3 	.word	0x8b60c8b3
 8005d74:	3fc68a28 	.word	0x3fc68a28
 8005d78:	509f79fb 	.word	0x509f79fb
 8005d7c:	3fd34413 	.word	0x3fd34413
 8005d80:	080077a9 	.word	0x080077a9
 8005d84:	080077c0 	.word	0x080077c0
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	080077a5 	.word	0x080077a5
 8005d90:	0800779c 	.word	0x0800779c
 8005d94:	08007779 	.word	0x08007779
 8005d98:	3ff80000 	.word	0x3ff80000
 8005d9c:	080078b0 	.word	0x080078b0
 8005da0:	08007818 	.word	0x08007818
 8005da4:	2301      	movs	r3, #1
 8005da6:	9309      	str	r3, [sp, #36]	; 0x24
 8005da8:	e7d7      	b.n	8005d5a <_dtoa_r+0x2c2>
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	e7ba      	b.n	8005d28 <_dtoa_r+0x290>
 8005db2:	3101      	adds	r1, #1
 8005db4:	0052      	lsls	r2, r2, #1
 8005db6:	e7ba      	b.n	8005d2e <_dtoa_r+0x296>
 8005db8:	69e3      	ldr	r3, [r4, #28]
 8005dba:	9a00      	ldr	r2, [sp, #0]
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	2b0e      	cmp	r3, #14
 8005dc2:	f200 80a8 	bhi.w	8005f16 <_dtoa_r+0x47e>
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	f000 80a5 	beq.w	8005f16 <_dtoa_r+0x47e>
 8005dcc:	f1bb 0f00 	cmp.w	fp, #0
 8005dd0:	dd38      	ble.n	8005e44 <_dtoa_r+0x3ac>
 8005dd2:	4bc0      	ldr	r3, [pc, #768]	; (80060d4 <_dtoa_r+0x63c>)
 8005dd4:	f00b 020f 	and.w	r2, fp, #15
 8005dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ddc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005de0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005de4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005de8:	d019      	beq.n	8005e1e <_dtoa_r+0x386>
 8005dea:	4bbb      	ldr	r3, [pc, #748]	; (80060d8 <_dtoa_r+0x640>)
 8005dec:	ec51 0b18 	vmov	r0, r1, d8
 8005df0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005df4:	f7fa fd4a 	bl	800088c <__aeabi_ddiv>
 8005df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dfc:	f008 080f 	and.w	r8, r8, #15
 8005e00:	2503      	movs	r5, #3
 8005e02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80060d8 <_dtoa_r+0x640>
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	d10a      	bne.n	8005e22 <_dtoa_r+0x38a>
 8005e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e10:	4632      	mov	r2, r6
 8005e12:	463b      	mov	r3, r7
 8005e14:	f7fa fd3a 	bl	800088c <__aeabi_ddiv>
 8005e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e1c:	e02b      	b.n	8005e76 <_dtoa_r+0x3de>
 8005e1e:	2502      	movs	r5, #2
 8005e20:	e7ef      	b.n	8005e02 <_dtoa_r+0x36a>
 8005e22:	f018 0f01 	tst.w	r8, #1
 8005e26:	d008      	beq.n	8005e3a <_dtoa_r+0x3a2>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e30:	f7fa fc02 	bl	8000638 <__aeabi_dmul>
 8005e34:	3501      	adds	r5, #1
 8005e36:	4606      	mov	r6, r0
 8005e38:	460f      	mov	r7, r1
 8005e3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e3e:	f109 0908 	add.w	r9, r9, #8
 8005e42:	e7e0      	b.n	8005e06 <_dtoa_r+0x36e>
 8005e44:	f000 809f 	beq.w	8005f86 <_dtoa_r+0x4ee>
 8005e48:	f1cb 0600 	rsb	r6, fp, #0
 8005e4c:	4ba1      	ldr	r3, [pc, #644]	; (80060d4 <_dtoa_r+0x63c>)
 8005e4e:	4fa2      	ldr	r7, [pc, #648]	; (80060d8 <_dtoa_r+0x640>)
 8005e50:	f006 020f 	and.w	r2, r6, #15
 8005e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	ec51 0b18 	vmov	r0, r1, d8
 8005e60:	f7fa fbea 	bl	8000638 <__aeabi_dmul>
 8005e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e68:	1136      	asrs	r6, r6, #4
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2502      	movs	r5, #2
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d17e      	bne.n	8005f70 <_dtoa_r+0x4d8>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d0      	bne.n	8005e18 <_dtoa_r+0x380>
 8005e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8084 	beq.w	8005f8a <_dtoa_r+0x4f2>
 8005e82:	4b96      	ldr	r3, [pc, #600]	; (80060dc <_dtoa_r+0x644>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fe47 	bl	8000b1c <__aeabi_dcmplt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d07b      	beq.n	8005f8a <_dtoa_r+0x4f2>
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d078      	beq.n	8005f8a <_dtoa_r+0x4f2>
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dd39      	ble.n	8005f12 <_dtoa_r+0x47a>
 8005e9e:	4b90      	ldr	r3, [pc, #576]	; (80060e0 <_dtoa_r+0x648>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	f7fa fbc7 	bl	8000638 <__aeabi_dmul>
 8005eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eae:	9e01      	ldr	r6, [sp, #4]
 8005eb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7fa fb52 	bl	8000564 <__aeabi_i2d>
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f7fa fbb8 	bl	8000638 <__aeabi_dmul>
 8005ec8:	4b86      	ldr	r3, [pc, #536]	; (80060e4 <_dtoa_r+0x64c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f7fa f9fe 	bl	80002cc <__adddf3>
 8005ed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d158      	bne.n	8005f90 <_dtoa_r+0x4f8>
 8005ede:	4b82      	ldr	r3, [pc, #520]	; (80060e8 <_dtoa_r+0x650>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f7fa f9ef 	bl	80002c8 <__aeabi_dsub>
 8005eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4689      	mov	r9, r1
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f040 8296 	bne.w	8006428 <_dtoa_r+0x990>
 8005efc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f00:	4640      	mov	r0, r8
 8005f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f06:	4649      	mov	r1, r9
 8005f08:	f7fa fe08 	bl	8000b1c <__aeabi_dcmplt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f040 8289 	bne.w	8006424 <_dtoa_r+0x98c>
 8005f12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f2c0 814e 	blt.w	80061ba <_dtoa_r+0x722>
 8005f1e:	f1bb 0f0e 	cmp.w	fp, #14
 8005f22:	f300 814a 	bgt.w	80061ba <_dtoa_r+0x722>
 8005f26:	4b6b      	ldr	r3, [pc, #428]	; (80060d4 <_dtoa_r+0x63c>)
 8005f28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f280 80dc 	bge.w	80060f0 <_dtoa_r+0x658>
 8005f38:	9b04      	ldr	r3, [sp, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f300 80d8 	bgt.w	80060f0 <_dtoa_r+0x658>
 8005f40:	f040 826f 	bne.w	8006422 <_dtoa_r+0x98a>
 8005f44:	4b68      	ldr	r3, [pc, #416]	; (80060e8 <_dtoa_r+0x650>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	f7fa fb74 	bl	8000638 <__aeabi_dmul>
 8005f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f54:	f7fa fdf6 	bl	8000b44 <__aeabi_dcmpge>
 8005f58:	9e04      	ldr	r6, [sp, #16]
 8005f5a:	4637      	mov	r7, r6
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f040 8245 	bne.w	80063ec <_dtoa_r+0x954>
 8005f62:	9d00      	ldr	r5, [sp, #0]
 8005f64:	2331      	movs	r3, #49	; 0x31
 8005f66:	f805 3b01 	strb.w	r3, [r5], #1
 8005f6a:	f10b 0b01 	add.w	fp, fp, #1
 8005f6e:	e241      	b.n	80063f4 <_dtoa_r+0x95c>
 8005f70:	07f2      	lsls	r2, r6, #31
 8005f72:	d505      	bpl.n	8005f80 <_dtoa_r+0x4e8>
 8005f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f78:	f7fa fb5e 	bl	8000638 <__aeabi_dmul>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	2301      	movs	r3, #1
 8005f80:	1076      	asrs	r6, r6, #1
 8005f82:	3708      	adds	r7, #8
 8005f84:	e773      	b.n	8005e6e <_dtoa_r+0x3d6>
 8005f86:	2502      	movs	r5, #2
 8005f88:	e775      	b.n	8005e76 <_dtoa_r+0x3de>
 8005f8a:	9e04      	ldr	r6, [sp, #16]
 8005f8c:	465f      	mov	r7, fp
 8005f8e:	e792      	b.n	8005eb6 <_dtoa_r+0x41e>
 8005f90:	9900      	ldr	r1, [sp, #0]
 8005f92:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <_dtoa_r+0x63c>)
 8005f94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f98:	4431      	add	r1, r6
 8005f9a:	9102      	str	r1, [sp, #8]
 8005f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f9e:	eeb0 9a47 	vmov.f32	s18, s14
 8005fa2:	eef0 9a67 	vmov.f32	s19, s15
 8005fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d044      	beq.n	800603c <_dtoa_r+0x5a4>
 8005fb2:	494e      	ldr	r1, [pc, #312]	; (80060ec <_dtoa_r+0x654>)
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fa fc69 	bl	800088c <__aeabi_ddiv>
 8005fba:	ec53 2b19 	vmov	r2, r3, d9
 8005fbe:	f7fa f983 	bl	80002c8 <__aeabi_dsub>
 8005fc2:	9d00      	ldr	r5, [sp, #0]
 8005fc4:	ec41 0b19 	vmov	d9, r0, r1
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7fa fde4 	bl	8000b98 <__aeabi_d2iz>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	f7fa fac7 	bl	8000564 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa f973 	bl	80002c8 <__aeabi_dsub>
 8005fe2:	3630      	adds	r6, #48	; 0x30
 8005fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8005fe8:	ec53 2b19 	vmov	r2, r3, d9
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	f7fa fd94 	bl	8000b1c <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d164      	bne.n	80060c2 <_dtoa_r+0x62a>
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4937      	ldr	r1, [pc, #220]	; (80060dc <_dtoa_r+0x644>)
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7fa f962 	bl	80002c8 <__aeabi_dsub>
 8006004:	ec53 2b19 	vmov	r2, r3, d9
 8006008:	f7fa fd88 	bl	8000b1c <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80b6 	bne.w	800617e <_dtoa_r+0x6e6>
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	429d      	cmp	r5, r3
 8006016:	f43f af7c 	beq.w	8005f12 <_dtoa_r+0x47a>
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <_dtoa_r+0x648>)
 800601c:	ec51 0b19 	vmov	r0, r1, d9
 8006020:	2200      	movs	r2, #0
 8006022:	f7fa fb09 	bl	8000638 <__aeabi_dmul>
 8006026:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <_dtoa_r+0x648>)
 8006028:	ec41 0b19 	vmov	d9, r0, r1
 800602c:	2200      	movs	r2, #0
 800602e:	4640      	mov	r0, r8
 8006030:	4649      	mov	r1, r9
 8006032:	f7fa fb01 	bl	8000638 <__aeabi_dmul>
 8006036:	4680      	mov	r8, r0
 8006038:	4689      	mov	r9, r1
 800603a:	e7c5      	b.n	8005fc8 <_dtoa_r+0x530>
 800603c:	ec51 0b17 	vmov	r0, r1, d7
 8006040:	f7fa fafa 	bl	8000638 <__aeabi_dmul>
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	9d00      	ldr	r5, [sp, #0]
 8006048:	930f      	str	r3, [sp, #60]	; 0x3c
 800604a:	ec41 0b19 	vmov	d9, r0, r1
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	f7fa fda1 	bl	8000b98 <__aeabi_d2iz>
 8006056:	4606      	mov	r6, r0
 8006058:	f7fa fa84 	bl	8000564 <__aeabi_i2d>
 800605c:	3630      	adds	r6, #48	; 0x30
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa f92f 	bl	80002c8 <__aeabi_dsub>
 800606a:	f805 6b01 	strb.w	r6, [r5], #1
 800606e:	9b02      	ldr	r3, [sp, #8]
 8006070:	429d      	cmp	r5, r3
 8006072:	4680      	mov	r8, r0
 8006074:	4689      	mov	r9, r1
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	d124      	bne.n	80060c6 <_dtoa_r+0x62e>
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <_dtoa_r+0x654>)
 800607e:	ec51 0b19 	vmov	r0, r1, d9
 8006082:	f7fa f923 	bl	80002cc <__adddf3>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	f7fa fd63 	bl	8000b58 <__aeabi_dcmpgt>
 8006092:	2800      	cmp	r0, #0
 8006094:	d173      	bne.n	800617e <_dtoa_r+0x6e6>
 8006096:	ec53 2b19 	vmov	r2, r3, d9
 800609a:	4914      	ldr	r1, [pc, #80]	; (80060ec <_dtoa_r+0x654>)
 800609c:	2000      	movs	r0, #0
 800609e:	f7fa f913 	bl	80002c8 <__aeabi_dsub>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa fd37 	bl	8000b1c <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f af2f 	beq.w	8005f12 <_dtoa_r+0x47a>
 80060b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060b6:	1e6b      	subs	r3, r5, #1
 80060b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060be:	2b30      	cmp	r3, #48	; 0x30
 80060c0:	d0f8      	beq.n	80060b4 <_dtoa_r+0x61c>
 80060c2:	46bb      	mov	fp, r7
 80060c4:	e04a      	b.n	800615c <_dtoa_r+0x6c4>
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <_dtoa_r+0x648>)
 80060c8:	f7fa fab6 	bl	8000638 <__aeabi_dmul>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4689      	mov	r9, r1
 80060d0:	e7bd      	b.n	800604e <_dtoa_r+0x5b6>
 80060d2:	bf00      	nop
 80060d4:	080078b0 	.word	0x080078b0
 80060d8:	08007888 	.word	0x08007888
 80060dc:	3ff00000 	.word	0x3ff00000
 80060e0:	40240000 	.word	0x40240000
 80060e4:	401c0000 	.word	0x401c0000
 80060e8:	40140000 	.word	0x40140000
 80060ec:	3fe00000 	.word	0x3fe00000
 80060f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060f4:	9d00      	ldr	r5, [sp, #0]
 80060f6:	4642      	mov	r2, r8
 80060f8:	464b      	mov	r3, r9
 80060fa:	4630      	mov	r0, r6
 80060fc:	4639      	mov	r1, r7
 80060fe:	f7fa fbc5 	bl	800088c <__aeabi_ddiv>
 8006102:	f7fa fd49 	bl	8000b98 <__aeabi_d2iz>
 8006106:	9001      	str	r0, [sp, #4]
 8006108:	f7fa fa2c 	bl	8000564 <__aeabi_i2d>
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	f7fa fa92 	bl	8000638 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa f8d4 	bl	80002c8 <__aeabi_dsub>
 8006120:	9e01      	ldr	r6, [sp, #4]
 8006122:	9f04      	ldr	r7, [sp, #16]
 8006124:	3630      	adds	r6, #48	; 0x30
 8006126:	f805 6b01 	strb.w	r6, [r5], #1
 800612a:	9e00      	ldr	r6, [sp, #0]
 800612c:	1bae      	subs	r6, r5, r6
 800612e:	42b7      	cmp	r7, r6
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	d134      	bne.n	80061a0 <_dtoa_r+0x708>
 8006136:	f7fa f8c9 	bl	80002cc <__adddf3>
 800613a:	4642      	mov	r2, r8
 800613c:	464b      	mov	r3, r9
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	f7fa fd09 	bl	8000b58 <__aeabi_dcmpgt>
 8006146:	b9c8      	cbnz	r0, 800617c <_dtoa_r+0x6e4>
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	4630      	mov	r0, r6
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa fcda 	bl	8000b08 <__aeabi_dcmpeq>
 8006154:	b110      	cbz	r0, 800615c <_dtoa_r+0x6c4>
 8006156:	9b01      	ldr	r3, [sp, #4]
 8006158:	07db      	lsls	r3, r3, #31
 800615a:	d40f      	bmi.n	800617c <_dtoa_r+0x6e4>
 800615c:	4651      	mov	r1, sl
 800615e:	4620      	mov	r0, r4
 8006160:	f000 fbcc 	bl	80068fc <_Bfree>
 8006164:	2300      	movs	r3, #0
 8006166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006168:	702b      	strb	r3, [r5, #0]
 800616a:	f10b 0301 	add.w	r3, fp, #1
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006172:	2b00      	cmp	r3, #0
 8006174:	f43f ace2 	beq.w	8005b3c <_dtoa_r+0xa4>
 8006178:	601d      	str	r5, [r3, #0]
 800617a:	e4df      	b.n	8005b3c <_dtoa_r+0xa4>
 800617c:	465f      	mov	r7, fp
 800617e:	462b      	mov	r3, r5
 8006180:	461d      	mov	r5, r3
 8006182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006186:	2a39      	cmp	r2, #57	; 0x39
 8006188:	d106      	bne.n	8006198 <_dtoa_r+0x700>
 800618a:	9a00      	ldr	r2, [sp, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d1f7      	bne.n	8006180 <_dtoa_r+0x6e8>
 8006190:	9900      	ldr	r1, [sp, #0]
 8006192:	2230      	movs	r2, #48	; 0x30
 8006194:	3701      	adds	r7, #1
 8006196:	700a      	strb	r2, [r1, #0]
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	3201      	adds	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e790      	b.n	80060c2 <_dtoa_r+0x62a>
 80061a0:	4ba3      	ldr	r3, [pc, #652]	; (8006430 <_dtoa_r+0x998>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa fa48 	bl	8000638 <__aeabi_dmul>
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	f7fa fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d09e      	beq.n	80060f6 <_dtoa_r+0x65e>
 80061b8:	e7d0      	b.n	800615c <_dtoa_r+0x6c4>
 80061ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061bc:	2a00      	cmp	r2, #0
 80061be:	f000 80ca 	beq.w	8006356 <_dtoa_r+0x8be>
 80061c2:	9a07      	ldr	r2, [sp, #28]
 80061c4:	2a01      	cmp	r2, #1
 80061c6:	f300 80ad 	bgt.w	8006324 <_dtoa_r+0x88c>
 80061ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	f000 80a5 	beq.w	800631c <_dtoa_r+0x884>
 80061d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061d6:	9e08      	ldr	r6, [sp, #32]
 80061d8:	9d05      	ldr	r5, [sp, #20]
 80061da:	9a05      	ldr	r2, [sp, #20]
 80061dc:	441a      	add	r2, r3
 80061de:	9205      	str	r2, [sp, #20]
 80061e0:	9a06      	ldr	r2, [sp, #24]
 80061e2:	2101      	movs	r1, #1
 80061e4:	441a      	add	r2, r3
 80061e6:	4620      	mov	r0, r4
 80061e8:	9206      	str	r2, [sp, #24]
 80061ea:	f000 fc3d 	bl	8006a68 <__i2b>
 80061ee:	4607      	mov	r7, r0
 80061f0:	b165      	cbz	r5, 800620c <_dtoa_r+0x774>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dd09      	ble.n	800620c <_dtoa_r+0x774>
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	9a05      	ldr	r2, [sp, #20]
 80061fc:	bfa8      	it	ge
 80061fe:	462b      	movge	r3, r5
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	9205      	str	r2, [sp, #20]
 8006204:	9a06      	ldr	r2, [sp, #24]
 8006206:	1aed      	subs	r5, r5, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	9306      	str	r3, [sp, #24]
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	b1f3      	cbz	r3, 800624e <_dtoa_r+0x7b6>
 8006210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80a3 	beq.w	800635e <_dtoa_r+0x8c6>
 8006218:	2e00      	cmp	r6, #0
 800621a:	dd10      	ble.n	800623e <_dtoa_r+0x7a6>
 800621c:	4639      	mov	r1, r7
 800621e:	4632      	mov	r2, r6
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fce1 	bl	8006be8 <__pow5mult>
 8006226:	4652      	mov	r2, sl
 8006228:	4601      	mov	r1, r0
 800622a:	4607      	mov	r7, r0
 800622c:	4620      	mov	r0, r4
 800622e:	f000 fc31 	bl	8006a94 <__multiply>
 8006232:	4651      	mov	r1, sl
 8006234:	4680      	mov	r8, r0
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fb60 	bl	80068fc <_Bfree>
 800623c:	46c2      	mov	sl, r8
 800623e:	9b08      	ldr	r3, [sp, #32]
 8006240:	1b9a      	subs	r2, r3, r6
 8006242:	d004      	beq.n	800624e <_dtoa_r+0x7b6>
 8006244:	4651      	mov	r1, sl
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fcce 	bl	8006be8 <__pow5mult>
 800624c:	4682      	mov	sl, r0
 800624e:	2101      	movs	r1, #1
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fc09 	bl	8006a68 <__i2b>
 8006256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	4606      	mov	r6, r0
 800625c:	f340 8081 	ble.w	8006362 <_dtoa_r+0x8ca>
 8006260:	461a      	mov	r2, r3
 8006262:	4601      	mov	r1, r0
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fcbf 	bl	8006be8 <__pow5mult>
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	2b01      	cmp	r3, #1
 800626e:	4606      	mov	r6, r0
 8006270:	dd7a      	ble.n	8006368 <_dtoa_r+0x8d0>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	6933      	ldr	r3, [r6, #16]
 8006278:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800627c:	6918      	ldr	r0, [r3, #16]
 800627e:	f000 fba5 	bl	80069cc <__hi0bits>
 8006282:	f1c0 0020 	rsb	r0, r0, #32
 8006286:	9b06      	ldr	r3, [sp, #24]
 8006288:	4418      	add	r0, r3
 800628a:	f010 001f 	ands.w	r0, r0, #31
 800628e:	f000 8094 	beq.w	80063ba <_dtoa_r+0x922>
 8006292:	f1c0 0320 	rsb	r3, r0, #32
 8006296:	2b04      	cmp	r3, #4
 8006298:	f340 8085 	ble.w	80063a6 <_dtoa_r+0x90e>
 800629c:	9b05      	ldr	r3, [sp, #20]
 800629e:	f1c0 001c 	rsb	r0, r0, #28
 80062a2:	4403      	add	r3, r0
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	4403      	add	r3, r0
 80062aa:	4405      	add	r5, r0
 80062ac:	9306      	str	r3, [sp, #24]
 80062ae:	9b05      	ldr	r3, [sp, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dd05      	ble.n	80062c0 <_dtoa_r+0x828>
 80062b4:	4651      	mov	r1, sl
 80062b6:	461a      	mov	r2, r3
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fcef 	bl	8006c9c <__lshift>
 80062be:	4682      	mov	sl, r0
 80062c0:	9b06      	ldr	r3, [sp, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dd05      	ble.n	80062d2 <_dtoa_r+0x83a>
 80062c6:	4631      	mov	r1, r6
 80062c8:	461a      	mov	r2, r3
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 fce6 	bl	8006c9c <__lshift>
 80062d0:	4606      	mov	r6, r0
 80062d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d072      	beq.n	80063be <_dtoa_r+0x926>
 80062d8:	4631      	mov	r1, r6
 80062da:	4650      	mov	r0, sl
 80062dc:	f000 fd4a 	bl	8006d74 <__mcmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	da6c      	bge.n	80063be <_dtoa_r+0x926>
 80062e4:	2300      	movs	r3, #0
 80062e6:	4651      	mov	r1, sl
 80062e8:	220a      	movs	r2, #10
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fb28 	bl	8006940 <__multadd>
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062f6:	4682      	mov	sl, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 81b0 	beq.w	800665e <_dtoa_r+0xbc6>
 80062fe:	2300      	movs	r3, #0
 8006300:	4639      	mov	r1, r7
 8006302:	220a      	movs	r2, #10
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fb1b 	bl	8006940 <__multadd>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	4607      	mov	r7, r0
 8006310:	f300 8096 	bgt.w	8006440 <_dtoa_r+0x9a8>
 8006314:	9b07      	ldr	r3, [sp, #28]
 8006316:	2b02      	cmp	r3, #2
 8006318:	dc59      	bgt.n	80063ce <_dtoa_r+0x936>
 800631a:	e091      	b.n	8006440 <_dtoa_r+0x9a8>
 800631c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800631e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006322:	e758      	b.n	80061d6 <_dtoa_r+0x73e>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	1e5e      	subs	r6, r3, #1
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	42b3      	cmp	r3, r6
 800632c:	bfbf      	itttt	lt
 800632e:	9b08      	ldrlt	r3, [sp, #32]
 8006330:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006332:	9608      	strlt	r6, [sp, #32]
 8006334:	1af3      	sublt	r3, r6, r3
 8006336:	bfb4      	ite	lt
 8006338:	18d2      	addlt	r2, r2, r3
 800633a:	1b9e      	subge	r6, r3, r6
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	bfbc      	itt	lt
 8006340:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006342:	2600      	movlt	r6, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	bfb7      	itett	lt
 8006348:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800634c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006350:	1a9d      	sublt	r5, r3, r2
 8006352:	2300      	movlt	r3, #0
 8006354:	e741      	b.n	80061da <_dtoa_r+0x742>
 8006356:	9e08      	ldr	r6, [sp, #32]
 8006358:	9d05      	ldr	r5, [sp, #20]
 800635a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800635c:	e748      	b.n	80061f0 <_dtoa_r+0x758>
 800635e:	9a08      	ldr	r2, [sp, #32]
 8006360:	e770      	b.n	8006244 <_dtoa_r+0x7ac>
 8006362:	9b07      	ldr	r3, [sp, #28]
 8006364:	2b01      	cmp	r3, #1
 8006366:	dc19      	bgt.n	800639c <_dtoa_r+0x904>
 8006368:	9b02      	ldr	r3, [sp, #8]
 800636a:	b9bb      	cbnz	r3, 800639c <_dtoa_r+0x904>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006372:	b99b      	cbnz	r3, 800639c <_dtoa_r+0x904>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637a:	0d1b      	lsrs	r3, r3, #20
 800637c:	051b      	lsls	r3, r3, #20
 800637e:	b183      	cbz	r3, 80063a2 <_dtoa_r+0x90a>
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	3301      	adds	r3, #1
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	9b06      	ldr	r3, [sp, #24]
 8006388:	3301      	adds	r3, #1
 800638a:	9306      	str	r3, [sp, #24]
 800638c:	f04f 0801 	mov.w	r8, #1
 8006390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af6f 	bne.w	8006276 <_dtoa_r+0x7de>
 8006398:	2001      	movs	r0, #1
 800639a:	e774      	b.n	8006286 <_dtoa_r+0x7ee>
 800639c:	f04f 0800 	mov.w	r8, #0
 80063a0:	e7f6      	b.n	8006390 <_dtoa_r+0x8f8>
 80063a2:	4698      	mov	r8, r3
 80063a4:	e7f4      	b.n	8006390 <_dtoa_r+0x8f8>
 80063a6:	d082      	beq.n	80062ae <_dtoa_r+0x816>
 80063a8:	9a05      	ldr	r2, [sp, #20]
 80063aa:	331c      	adds	r3, #28
 80063ac:	441a      	add	r2, r3
 80063ae:	9205      	str	r2, [sp, #20]
 80063b0:	9a06      	ldr	r2, [sp, #24]
 80063b2:	441a      	add	r2, r3
 80063b4:	441d      	add	r5, r3
 80063b6:	9206      	str	r2, [sp, #24]
 80063b8:	e779      	b.n	80062ae <_dtoa_r+0x816>
 80063ba:	4603      	mov	r3, r0
 80063bc:	e7f4      	b.n	80063a8 <_dtoa_r+0x910>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	dc37      	bgt.n	8006434 <_dtoa_r+0x99c>
 80063c4:	9b07      	ldr	r3, [sp, #28]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	dd34      	ble.n	8006434 <_dtoa_r+0x99c>
 80063ca:	9b04      	ldr	r3, [sp, #16]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	b963      	cbnz	r3, 80063ec <_dtoa_r+0x954>
 80063d2:	4631      	mov	r1, r6
 80063d4:	2205      	movs	r2, #5
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fab2 	bl	8006940 <__multadd>
 80063dc:	4601      	mov	r1, r0
 80063de:	4606      	mov	r6, r0
 80063e0:	4650      	mov	r0, sl
 80063e2:	f000 fcc7 	bl	8006d74 <__mcmp>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f73f adbb 	bgt.w	8005f62 <_dtoa_r+0x4ca>
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	9d00      	ldr	r5, [sp, #0]
 80063f0:	ea6f 0b03 	mvn.w	fp, r3
 80063f4:	f04f 0800 	mov.w	r8, #0
 80063f8:	4631      	mov	r1, r6
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fa7e 	bl	80068fc <_Bfree>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f43f aeab 	beq.w	800615c <_dtoa_r+0x6c4>
 8006406:	f1b8 0f00 	cmp.w	r8, #0
 800640a:	d005      	beq.n	8006418 <_dtoa_r+0x980>
 800640c:	45b8      	cmp	r8, r7
 800640e:	d003      	beq.n	8006418 <_dtoa_r+0x980>
 8006410:	4641      	mov	r1, r8
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fa72 	bl	80068fc <_Bfree>
 8006418:	4639      	mov	r1, r7
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fa6e 	bl	80068fc <_Bfree>
 8006420:	e69c      	b.n	800615c <_dtoa_r+0x6c4>
 8006422:	2600      	movs	r6, #0
 8006424:	4637      	mov	r7, r6
 8006426:	e7e1      	b.n	80063ec <_dtoa_r+0x954>
 8006428:	46bb      	mov	fp, r7
 800642a:	4637      	mov	r7, r6
 800642c:	e599      	b.n	8005f62 <_dtoa_r+0x4ca>
 800642e:	bf00      	nop
 8006430:	40240000 	.word	0x40240000
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80c8 	beq.w	80065cc <_dtoa_r+0xb34>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	2d00      	cmp	r5, #0
 8006442:	dd05      	ble.n	8006450 <_dtoa_r+0x9b8>
 8006444:	4639      	mov	r1, r7
 8006446:	462a      	mov	r2, r5
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fc27 	bl	8006c9c <__lshift>
 800644e:	4607      	mov	r7, r0
 8006450:	f1b8 0f00 	cmp.w	r8, #0
 8006454:	d05b      	beq.n	800650e <_dtoa_r+0xa76>
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fa0f 	bl	800687c <_Balloc>
 800645e:	4605      	mov	r5, r0
 8006460:	b928      	cbnz	r0, 800646e <_dtoa_r+0x9d6>
 8006462:	4b83      	ldr	r3, [pc, #524]	; (8006670 <_dtoa_r+0xbd8>)
 8006464:	4602      	mov	r2, r0
 8006466:	f240 21ef 	movw	r1, #751	; 0x2ef
 800646a:	f7ff bb2e 	b.w	8005aca <_dtoa_r+0x32>
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	3202      	adds	r2, #2
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	f107 010c 	add.w	r1, r7, #12
 8006478:	300c      	adds	r0, #12
 800647a:	f001 f813 	bl	80074a4 <memcpy>
 800647e:	2201      	movs	r2, #1
 8006480:	4629      	mov	r1, r5
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fc0a 	bl	8006c9c <__lshift>
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006492:	4413      	add	r3, r2
 8006494:	9308      	str	r3, [sp, #32]
 8006496:	9b02      	ldr	r3, [sp, #8]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	46b8      	mov	r8, r7
 800649e:	9306      	str	r3, [sp, #24]
 80064a0:	4607      	mov	r7, r0
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	4631      	mov	r1, r6
 80064a6:	3b01      	subs	r3, #1
 80064a8:	4650      	mov	r0, sl
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f7ff fa69 	bl	8005982 <quorem>
 80064b0:	4641      	mov	r1, r8
 80064b2:	9002      	str	r0, [sp, #8]
 80064b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064b8:	4650      	mov	r0, sl
 80064ba:	f000 fc5b 	bl	8006d74 <__mcmp>
 80064be:	463a      	mov	r2, r7
 80064c0:	9005      	str	r0, [sp, #20]
 80064c2:	4631      	mov	r1, r6
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fc71 	bl	8006dac <__mdiff>
 80064ca:	68c2      	ldr	r2, [r0, #12]
 80064cc:	4605      	mov	r5, r0
 80064ce:	bb02      	cbnz	r2, 8006512 <_dtoa_r+0xa7a>
 80064d0:	4601      	mov	r1, r0
 80064d2:	4650      	mov	r0, sl
 80064d4:	f000 fc4e 	bl	8006d74 <__mcmp>
 80064d8:	4602      	mov	r2, r0
 80064da:	4629      	mov	r1, r5
 80064dc:	4620      	mov	r0, r4
 80064de:	9209      	str	r2, [sp, #36]	; 0x24
 80064e0:	f000 fa0c 	bl	80068fc <_Bfree>
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	9d04      	ldr	r5, [sp, #16]
 80064ea:	ea43 0102 	orr.w	r1, r3, r2
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	4319      	orrs	r1, r3
 80064f2:	d110      	bne.n	8006516 <_dtoa_r+0xa7e>
 80064f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064f8:	d029      	beq.n	800654e <_dtoa_r+0xab6>
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dd02      	ble.n	8006506 <_dtoa_r+0xa6e>
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	f883 9000 	strb.w	r9, [r3]
 800650c:	e774      	b.n	80063f8 <_dtoa_r+0x960>
 800650e:	4638      	mov	r0, r7
 8006510:	e7ba      	b.n	8006488 <_dtoa_r+0x9f0>
 8006512:	2201      	movs	r2, #1
 8006514:	e7e1      	b.n	80064da <_dtoa_r+0xa42>
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	db04      	blt.n	8006526 <_dtoa_r+0xa8e>
 800651c:	9907      	ldr	r1, [sp, #28]
 800651e:	430b      	orrs	r3, r1
 8006520:	9906      	ldr	r1, [sp, #24]
 8006522:	430b      	orrs	r3, r1
 8006524:	d120      	bne.n	8006568 <_dtoa_r+0xad0>
 8006526:	2a00      	cmp	r2, #0
 8006528:	dded      	ble.n	8006506 <_dtoa_r+0xa6e>
 800652a:	4651      	mov	r1, sl
 800652c:	2201      	movs	r2, #1
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fbb4 	bl	8006c9c <__lshift>
 8006534:	4631      	mov	r1, r6
 8006536:	4682      	mov	sl, r0
 8006538:	f000 fc1c 	bl	8006d74 <__mcmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	dc03      	bgt.n	8006548 <_dtoa_r+0xab0>
 8006540:	d1e1      	bne.n	8006506 <_dtoa_r+0xa6e>
 8006542:	f019 0f01 	tst.w	r9, #1
 8006546:	d0de      	beq.n	8006506 <_dtoa_r+0xa6e>
 8006548:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800654c:	d1d8      	bne.n	8006500 <_dtoa_r+0xa68>
 800654e:	9a01      	ldr	r2, [sp, #4]
 8006550:	2339      	movs	r3, #57	; 0x39
 8006552:	7013      	strb	r3, [r2, #0]
 8006554:	462b      	mov	r3, r5
 8006556:	461d      	mov	r5, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800655e:	2a39      	cmp	r2, #57	; 0x39
 8006560:	d06c      	beq.n	800663c <_dtoa_r+0xba4>
 8006562:	3201      	adds	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e747      	b.n	80063f8 <_dtoa_r+0x960>
 8006568:	2a00      	cmp	r2, #0
 800656a:	dd07      	ble.n	800657c <_dtoa_r+0xae4>
 800656c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006570:	d0ed      	beq.n	800654e <_dtoa_r+0xab6>
 8006572:	9a01      	ldr	r2, [sp, #4]
 8006574:	f109 0301 	add.w	r3, r9, #1
 8006578:	7013      	strb	r3, [r2, #0]
 800657a:	e73d      	b.n	80063f8 <_dtoa_r+0x960>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	9a08      	ldr	r2, [sp, #32]
 8006580:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006584:	4293      	cmp	r3, r2
 8006586:	d043      	beq.n	8006610 <_dtoa_r+0xb78>
 8006588:	4651      	mov	r1, sl
 800658a:	2300      	movs	r3, #0
 800658c:	220a      	movs	r2, #10
 800658e:	4620      	mov	r0, r4
 8006590:	f000 f9d6 	bl	8006940 <__multadd>
 8006594:	45b8      	cmp	r8, r7
 8006596:	4682      	mov	sl, r0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	f04f 020a 	mov.w	r2, #10
 80065a0:	4641      	mov	r1, r8
 80065a2:	4620      	mov	r0, r4
 80065a4:	d107      	bne.n	80065b6 <_dtoa_r+0xb1e>
 80065a6:	f000 f9cb 	bl	8006940 <__multadd>
 80065aa:	4680      	mov	r8, r0
 80065ac:	4607      	mov	r7, r0
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	3301      	adds	r3, #1
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	e775      	b.n	80064a2 <_dtoa_r+0xa0a>
 80065b6:	f000 f9c3 	bl	8006940 <__multadd>
 80065ba:	4639      	mov	r1, r7
 80065bc:	4680      	mov	r8, r0
 80065be:	2300      	movs	r3, #0
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f9bc 	bl	8006940 <__multadd>
 80065c8:	4607      	mov	r7, r0
 80065ca:	e7f0      	b.n	80065ae <_dtoa_r+0xb16>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	9d00      	ldr	r5, [sp, #0]
 80065d2:	4631      	mov	r1, r6
 80065d4:	4650      	mov	r0, sl
 80065d6:	f7ff f9d4 	bl	8005982 <quorem>
 80065da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	f805 9b01 	strb.w	r9, [r5], #1
 80065e4:	1aea      	subs	r2, r5, r3
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	dd07      	ble.n	80065fc <_dtoa_r+0xb64>
 80065ec:	4651      	mov	r1, sl
 80065ee:	2300      	movs	r3, #0
 80065f0:	220a      	movs	r2, #10
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 f9a4 	bl	8006940 <__multadd>
 80065f8:	4682      	mov	sl, r0
 80065fa:	e7ea      	b.n	80065d2 <_dtoa_r+0xb3a>
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfc8      	it	gt
 8006602:	461d      	movgt	r5, r3
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	bfd8      	it	le
 8006608:	2501      	movle	r5, #1
 800660a:	441d      	add	r5, r3
 800660c:	f04f 0800 	mov.w	r8, #0
 8006610:	4651      	mov	r1, sl
 8006612:	2201      	movs	r2, #1
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fb41 	bl	8006c9c <__lshift>
 800661a:	4631      	mov	r1, r6
 800661c:	4682      	mov	sl, r0
 800661e:	f000 fba9 	bl	8006d74 <__mcmp>
 8006622:	2800      	cmp	r0, #0
 8006624:	dc96      	bgt.n	8006554 <_dtoa_r+0xabc>
 8006626:	d102      	bne.n	800662e <_dtoa_r+0xb96>
 8006628:	f019 0f01 	tst.w	r9, #1
 800662c:	d192      	bne.n	8006554 <_dtoa_r+0xabc>
 800662e:	462b      	mov	r3, r5
 8006630:	461d      	mov	r5, r3
 8006632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006636:	2a30      	cmp	r2, #48	; 0x30
 8006638:	d0fa      	beq.n	8006630 <_dtoa_r+0xb98>
 800663a:	e6dd      	b.n	80063f8 <_dtoa_r+0x960>
 800663c:	9a00      	ldr	r2, [sp, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d189      	bne.n	8006556 <_dtoa_r+0xabe>
 8006642:	f10b 0b01 	add.w	fp, fp, #1
 8006646:	2331      	movs	r3, #49	; 0x31
 8006648:	e796      	b.n	8006578 <_dtoa_r+0xae0>
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <_dtoa_r+0xbdc>)
 800664c:	f7ff ba99 	b.w	8005b82 <_dtoa_r+0xea>
 8006650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006652:	2b00      	cmp	r3, #0
 8006654:	f47f aa6d 	bne.w	8005b32 <_dtoa_r+0x9a>
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <_dtoa_r+0xbe0>)
 800665a:	f7ff ba92 	b.w	8005b82 <_dtoa_r+0xea>
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	dcb5      	bgt.n	80065d0 <_dtoa_r+0xb38>
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	2b02      	cmp	r3, #2
 8006668:	f73f aeb1 	bgt.w	80063ce <_dtoa_r+0x936>
 800666c:	e7b0      	b.n	80065d0 <_dtoa_r+0xb38>
 800666e:	bf00      	nop
 8006670:	08007818 	.word	0x08007818
 8006674:	08007778 	.word	0x08007778
 8006678:	0800779c 	.word	0x0800779c

0800667c <_free_r>:
 800667c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800667e:	2900      	cmp	r1, #0
 8006680:	d044      	beq.n	800670c <_free_r+0x90>
 8006682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006686:	9001      	str	r0, [sp, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f1a1 0404 	sub.w	r4, r1, #4
 800668e:	bfb8      	it	lt
 8006690:	18e4      	addlt	r4, r4, r3
 8006692:	f000 f8e7 	bl	8006864 <__malloc_lock>
 8006696:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <_free_r+0x94>)
 8006698:	9801      	ldr	r0, [sp, #4]
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	b933      	cbnz	r3, 80066ac <_free_r+0x30>
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	6014      	str	r4, [r2, #0]
 80066a2:	b003      	add	sp, #12
 80066a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066a8:	f000 b8e2 	b.w	8006870 <__malloc_unlock>
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d908      	bls.n	80066c2 <_free_r+0x46>
 80066b0:	6825      	ldr	r5, [r4, #0]
 80066b2:	1961      	adds	r1, r4, r5
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf01      	itttt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	1949      	addeq	r1, r1, r5
 80066be:	6021      	streq	r1, [r4, #0]
 80066c0:	e7ed      	b.n	800669e <_free_r+0x22>
 80066c2:	461a      	mov	r2, r3
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	b10b      	cbz	r3, 80066cc <_free_r+0x50>
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	d9fa      	bls.n	80066c2 <_free_r+0x46>
 80066cc:	6811      	ldr	r1, [r2, #0]
 80066ce:	1855      	adds	r5, r2, r1
 80066d0:	42a5      	cmp	r5, r4
 80066d2:	d10b      	bne.n	80066ec <_free_r+0x70>
 80066d4:	6824      	ldr	r4, [r4, #0]
 80066d6:	4421      	add	r1, r4
 80066d8:	1854      	adds	r4, r2, r1
 80066da:	42a3      	cmp	r3, r4
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	d1e0      	bne.n	80066a2 <_free_r+0x26>
 80066e0:	681c      	ldr	r4, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	6053      	str	r3, [r2, #4]
 80066e6:	440c      	add	r4, r1
 80066e8:	6014      	str	r4, [r2, #0]
 80066ea:	e7da      	b.n	80066a2 <_free_r+0x26>
 80066ec:	d902      	bls.n	80066f4 <_free_r+0x78>
 80066ee:	230c      	movs	r3, #12
 80066f0:	6003      	str	r3, [r0, #0]
 80066f2:	e7d6      	b.n	80066a2 <_free_r+0x26>
 80066f4:	6825      	ldr	r5, [r4, #0]
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf04      	itt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	bf04      	itt	eq
 8006704:	1949      	addeq	r1, r1, r5
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	6054      	str	r4, [r2, #4]
 800670a:	e7ca      	b.n	80066a2 <_free_r+0x26>
 800670c:	b003      	add	sp, #12
 800670e:	bd30      	pop	{r4, r5, pc}
 8006710:	2000046c 	.word	0x2000046c

08006714 <malloc>:
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <malloc+0xc>)
 8006716:	4601      	mov	r1, r0
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f000 b823 	b.w	8006764 <_malloc_r>
 800671e:	bf00      	nop
 8006720:	20000094 	.word	0x20000094

08006724 <sbrk_aligned>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4e0e      	ldr	r6, [pc, #56]	; (8006760 <sbrk_aligned+0x3c>)
 8006728:	460c      	mov	r4, r1
 800672a:	6831      	ldr	r1, [r6, #0]
 800672c:	4605      	mov	r5, r0
 800672e:	b911      	cbnz	r1, 8006736 <sbrk_aligned+0x12>
 8006730:	f000 fea8 	bl	8007484 <_sbrk_r>
 8006734:	6030      	str	r0, [r6, #0]
 8006736:	4621      	mov	r1, r4
 8006738:	4628      	mov	r0, r5
 800673a:	f000 fea3 	bl	8007484 <_sbrk_r>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d00a      	beq.n	8006758 <sbrk_aligned+0x34>
 8006742:	1cc4      	adds	r4, r0, #3
 8006744:	f024 0403 	bic.w	r4, r4, #3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d007      	beq.n	800675c <sbrk_aligned+0x38>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	4628      	mov	r0, r5
 8006750:	f000 fe98 	bl	8007484 <_sbrk_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d101      	bne.n	800675c <sbrk_aligned+0x38>
 8006758:	f04f 34ff 	mov.w	r4, #4294967295
 800675c:	4620      	mov	r0, r4
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	20000470 	.word	0x20000470

08006764 <_malloc_r>:
 8006764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006768:	1ccd      	adds	r5, r1, #3
 800676a:	f025 0503 	bic.w	r5, r5, #3
 800676e:	3508      	adds	r5, #8
 8006770:	2d0c      	cmp	r5, #12
 8006772:	bf38      	it	cc
 8006774:	250c      	movcc	r5, #12
 8006776:	2d00      	cmp	r5, #0
 8006778:	4607      	mov	r7, r0
 800677a:	db01      	blt.n	8006780 <_malloc_r+0x1c>
 800677c:	42a9      	cmp	r1, r5
 800677e:	d905      	bls.n	800678c <_malloc_r+0x28>
 8006780:	230c      	movs	r3, #12
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	2600      	movs	r6, #0
 8006786:	4630      	mov	r0, r6
 8006788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006860 <_malloc_r+0xfc>
 8006790:	f000 f868 	bl	8006864 <__malloc_lock>
 8006794:	f8d8 3000 	ldr.w	r3, [r8]
 8006798:	461c      	mov	r4, r3
 800679a:	bb5c      	cbnz	r4, 80067f4 <_malloc_r+0x90>
 800679c:	4629      	mov	r1, r5
 800679e:	4638      	mov	r0, r7
 80067a0:	f7ff ffc0 	bl	8006724 <sbrk_aligned>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	4604      	mov	r4, r0
 80067a8:	d155      	bne.n	8006856 <_malloc_r+0xf2>
 80067aa:	f8d8 4000 	ldr.w	r4, [r8]
 80067ae:	4626      	mov	r6, r4
 80067b0:	2e00      	cmp	r6, #0
 80067b2:	d145      	bne.n	8006840 <_malloc_r+0xdc>
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d048      	beq.n	800684a <_malloc_r+0xe6>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	4631      	mov	r1, r6
 80067bc:	4638      	mov	r0, r7
 80067be:	eb04 0903 	add.w	r9, r4, r3
 80067c2:	f000 fe5f 	bl	8007484 <_sbrk_r>
 80067c6:	4581      	cmp	r9, r0
 80067c8:	d13f      	bne.n	800684a <_malloc_r+0xe6>
 80067ca:	6821      	ldr	r1, [r4, #0]
 80067cc:	1a6d      	subs	r5, r5, r1
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff ffa7 	bl	8006724 <sbrk_aligned>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d037      	beq.n	800684a <_malloc_r+0xe6>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	442b      	add	r3, r5
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	f8d8 3000 	ldr.w	r3, [r8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d038      	beq.n	800685a <_malloc_r+0xf6>
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	42a2      	cmp	r2, r4
 80067ec:	d12b      	bne.n	8006846 <_malloc_r+0xe2>
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e00f      	b.n	8006814 <_malloc_r+0xb0>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	1b52      	subs	r2, r2, r5
 80067f8:	d41f      	bmi.n	800683a <_malloc_r+0xd6>
 80067fa:	2a0b      	cmp	r2, #11
 80067fc:	d917      	bls.n	800682e <_malloc_r+0xca>
 80067fe:	1961      	adds	r1, r4, r5
 8006800:	42a3      	cmp	r3, r4
 8006802:	6025      	str	r5, [r4, #0]
 8006804:	bf18      	it	ne
 8006806:	6059      	strne	r1, [r3, #4]
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	bf08      	it	eq
 800680c:	f8c8 1000 	streq.w	r1, [r8]
 8006810:	5162      	str	r2, [r4, r5]
 8006812:	604b      	str	r3, [r1, #4]
 8006814:	4638      	mov	r0, r7
 8006816:	f104 060b 	add.w	r6, r4, #11
 800681a:	f000 f829 	bl	8006870 <__malloc_unlock>
 800681e:	f026 0607 	bic.w	r6, r6, #7
 8006822:	1d23      	adds	r3, r4, #4
 8006824:	1af2      	subs	r2, r6, r3
 8006826:	d0ae      	beq.n	8006786 <_malloc_r+0x22>
 8006828:	1b9b      	subs	r3, r3, r6
 800682a:	50a3      	str	r3, [r4, r2]
 800682c:	e7ab      	b.n	8006786 <_malloc_r+0x22>
 800682e:	42a3      	cmp	r3, r4
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	d1dd      	bne.n	80067f0 <_malloc_r+0x8c>
 8006834:	f8c8 2000 	str.w	r2, [r8]
 8006838:	e7ec      	b.n	8006814 <_malloc_r+0xb0>
 800683a:	4623      	mov	r3, r4
 800683c:	6864      	ldr	r4, [r4, #4]
 800683e:	e7ac      	b.n	800679a <_malloc_r+0x36>
 8006840:	4634      	mov	r4, r6
 8006842:	6876      	ldr	r6, [r6, #4]
 8006844:	e7b4      	b.n	80067b0 <_malloc_r+0x4c>
 8006846:	4613      	mov	r3, r2
 8006848:	e7cc      	b.n	80067e4 <_malloc_r+0x80>
 800684a:	230c      	movs	r3, #12
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4638      	mov	r0, r7
 8006850:	f000 f80e 	bl	8006870 <__malloc_unlock>
 8006854:	e797      	b.n	8006786 <_malloc_r+0x22>
 8006856:	6025      	str	r5, [r4, #0]
 8006858:	e7dc      	b.n	8006814 <_malloc_r+0xb0>
 800685a:	605b      	str	r3, [r3, #4]
 800685c:	deff      	udf	#255	; 0xff
 800685e:	bf00      	nop
 8006860:	2000046c 	.word	0x2000046c

08006864 <__malloc_lock>:
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <__malloc_lock+0x8>)
 8006866:	f7ff b88a 	b.w	800597e <__retarget_lock_acquire_recursive>
 800686a:	bf00      	nop
 800686c:	20000468 	.word	0x20000468

08006870 <__malloc_unlock>:
 8006870:	4801      	ldr	r0, [pc, #4]	; (8006878 <__malloc_unlock+0x8>)
 8006872:	f7ff b885 	b.w	8005980 <__retarget_lock_release_recursive>
 8006876:	bf00      	nop
 8006878:	20000468 	.word	0x20000468

0800687c <_Balloc>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	69c6      	ldr	r6, [r0, #28]
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	b976      	cbnz	r6, 80068a4 <_Balloc+0x28>
 8006886:	2010      	movs	r0, #16
 8006888:	f7ff ff44 	bl	8006714 <malloc>
 800688c:	4602      	mov	r2, r0
 800688e:	61e0      	str	r0, [r4, #28]
 8006890:	b920      	cbnz	r0, 800689c <_Balloc+0x20>
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <_Balloc+0x78>)
 8006894:	4818      	ldr	r0, [pc, #96]	; (80068f8 <_Balloc+0x7c>)
 8006896:	216b      	movs	r1, #107	; 0x6b
 8006898:	f000 fe12 	bl	80074c0 <__assert_func>
 800689c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a0:	6006      	str	r6, [r0, #0]
 80068a2:	60c6      	str	r6, [r0, #12]
 80068a4:	69e6      	ldr	r6, [r4, #28]
 80068a6:	68f3      	ldr	r3, [r6, #12]
 80068a8:	b183      	cbz	r3, 80068cc <_Balloc+0x50>
 80068aa:	69e3      	ldr	r3, [r4, #28]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068b2:	b9b8      	cbnz	r0, 80068e4 <_Balloc+0x68>
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f605 	lsl.w	r6, r1, r5
 80068ba:	1d72      	adds	r2, r6, #5
 80068bc:	0092      	lsls	r2, r2, #2
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fe1c 	bl	80074fc <_calloc_r>
 80068c4:	b160      	cbz	r0, 80068e0 <_Balloc+0x64>
 80068c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068ca:	e00e      	b.n	80068ea <_Balloc+0x6e>
 80068cc:	2221      	movs	r2, #33	; 0x21
 80068ce:	2104      	movs	r1, #4
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fe13 	bl	80074fc <_calloc_r>
 80068d6:	69e3      	ldr	r3, [r4, #28]
 80068d8:	60f0      	str	r0, [r6, #12]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e4      	bne.n	80068aa <_Balloc+0x2e>
 80068e0:	2000      	movs	r0, #0
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	6802      	ldr	r2, [r0, #0]
 80068e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068ea:	2300      	movs	r3, #0
 80068ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068f0:	e7f7      	b.n	80068e2 <_Balloc+0x66>
 80068f2:	bf00      	nop
 80068f4:	080077a9 	.word	0x080077a9
 80068f8:	08007829 	.word	0x08007829

080068fc <_Bfree>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	69c6      	ldr	r6, [r0, #28]
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	b976      	cbnz	r6, 8006924 <_Bfree+0x28>
 8006906:	2010      	movs	r0, #16
 8006908:	f7ff ff04 	bl	8006714 <malloc>
 800690c:	4602      	mov	r2, r0
 800690e:	61e8      	str	r0, [r5, #28]
 8006910:	b920      	cbnz	r0, 800691c <_Bfree+0x20>
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <_Bfree+0x3c>)
 8006914:	4809      	ldr	r0, [pc, #36]	; (800693c <_Bfree+0x40>)
 8006916:	218f      	movs	r1, #143	; 0x8f
 8006918:	f000 fdd2 	bl	80074c0 <__assert_func>
 800691c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006920:	6006      	str	r6, [r0, #0]
 8006922:	60c6      	str	r6, [r0, #12]
 8006924:	b13c      	cbz	r4, 8006936 <_Bfree+0x3a>
 8006926:	69eb      	ldr	r3, [r5, #28]
 8006928:	6862      	ldr	r2, [r4, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006930:	6021      	str	r1, [r4, #0]
 8006932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	080077a9 	.word	0x080077a9
 800693c:	08007829 	.word	0x08007829

08006940 <__multadd>:
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006944:	690d      	ldr	r5, [r1, #16]
 8006946:	4607      	mov	r7, r0
 8006948:	460c      	mov	r4, r1
 800694a:	461e      	mov	r6, r3
 800694c:	f101 0c14 	add.w	ip, r1, #20
 8006950:	2000      	movs	r0, #0
 8006952:	f8dc 3000 	ldr.w	r3, [ip]
 8006956:	b299      	uxth	r1, r3
 8006958:	fb02 6101 	mla	r1, r2, r1, r6
 800695c:	0c1e      	lsrs	r6, r3, #16
 800695e:	0c0b      	lsrs	r3, r1, #16
 8006960:	fb02 3306 	mla	r3, r2, r6, r3
 8006964:	b289      	uxth	r1, r1
 8006966:	3001      	adds	r0, #1
 8006968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800696c:	4285      	cmp	r5, r0
 800696e:	f84c 1b04 	str.w	r1, [ip], #4
 8006972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006976:	dcec      	bgt.n	8006952 <__multadd+0x12>
 8006978:	b30e      	cbz	r6, 80069be <__multadd+0x7e>
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	42ab      	cmp	r3, r5
 800697e:	dc19      	bgt.n	80069b4 <__multadd+0x74>
 8006980:	6861      	ldr	r1, [r4, #4]
 8006982:	4638      	mov	r0, r7
 8006984:	3101      	adds	r1, #1
 8006986:	f7ff ff79 	bl	800687c <_Balloc>
 800698a:	4680      	mov	r8, r0
 800698c:	b928      	cbnz	r0, 800699a <__multadd+0x5a>
 800698e:	4602      	mov	r2, r0
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <__multadd+0x84>)
 8006992:	480d      	ldr	r0, [pc, #52]	; (80069c8 <__multadd+0x88>)
 8006994:	21ba      	movs	r1, #186	; 0xba
 8006996:	f000 fd93 	bl	80074c0 <__assert_func>
 800699a:	6922      	ldr	r2, [r4, #16]
 800699c:	3202      	adds	r2, #2
 800699e:	f104 010c 	add.w	r1, r4, #12
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	300c      	adds	r0, #12
 80069a6:	f000 fd7d 	bl	80074a4 <memcpy>
 80069aa:	4621      	mov	r1, r4
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7ff ffa5 	bl	80068fc <_Bfree>
 80069b2:	4644      	mov	r4, r8
 80069b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069b8:	3501      	adds	r5, #1
 80069ba:	615e      	str	r6, [r3, #20]
 80069bc:	6125      	str	r5, [r4, #16]
 80069be:	4620      	mov	r0, r4
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c4:	08007818 	.word	0x08007818
 80069c8:	08007829 	.word	0x08007829

080069cc <__hi0bits>:
 80069cc:	0c03      	lsrs	r3, r0, #16
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	b9d3      	cbnz	r3, 8006a08 <__hi0bits+0x3c>
 80069d2:	0400      	lsls	r0, r0, #16
 80069d4:	2310      	movs	r3, #16
 80069d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069da:	bf04      	itt	eq
 80069dc:	0200      	lsleq	r0, r0, #8
 80069de:	3308      	addeq	r3, #8
 80069e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069e4:	bf04      	itt	eq
 80069e6:	0100      	lsleq	r0, r0, #4
 80069e8:	3304      	addeq	r3, #4
 80069ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069ee:	bf04      	itt	eq
 80069f0:	0080      	lsleq	r0, r0, #2
 80069f2:	3302      	addeq	r3, #2
 80069f4:	2800      	cmp	r0, #0
 80069f6:	db05      	blt.n	8006a04 <__hi0bits+0x38>
 80069f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069fc:	f103 0301 	add.w	r3, r3, #1
 8006a00:	bf08      	it	eq
 8006a02:	2320      	moveq	r3, #32
 8006a04:	4618      	mov	r0, r3
 8006a06:	4770      	bx	lr
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e7e4      	b.n	80069d6 <__hi0bits+0xa>

08006a0c <__lo0bits>:
 8006a0c:	6803      	ldr	r3, [r0, #0]
 8006a0e:	f013 0207 	ands.w	r2, r3, #7
 8006a12:	d00c      	beq.n	8006a2e <__lo0bits+0x22>
 8006a14:	07d9      	lsls	r1, r3, #31
 8006a16:	d422      	bmi.n	8006a5e <__lo0bits+0x52>
 8006a18:	079a      	lsls	r2, r3, #30
 8006a1a:	bf49      	itett	mi
 8006a1c:	085b      	lsrmi	r3, r3, #1
 8006a1e:	089b      	lsrpl	r3, r3, #2
 8006a20:	6003      	strmi	r3, [r0, #0]
 8006a22:	2201      	movmi	r2, #1
 8006a24:	bf5c      	itt	pl
 8006a26:	6003      	strpl	r3, [r0, #0]
 8006a28:	2202      	movpl	r2, #2
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4770      	bx	lr
 8006a2e:	b299      	uxth	r1, r3
 8006a30:	b909      	cbnz	r1, 8006a36 <__lo0bits+0x2a>
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	2210      	movs	r2, #16
 8006a36:	b2d9      	uxtb	r1, r3
 8006a38:	b909      	cbnz	r1, 8006a3e <__lo0bits+0x32>
 8006a3a:	3208      	adds	r2, #8
 8006a3c:	0a1b      	lsrs	r3, r3, #8
 8006a3e:	0719      	lsls	r1, r3, #28
 8006a40:	bf04      	itt	eq
 8006a42:	091b      	lsreq	r3, r3, #4
 8006a44:	3204      	addeq	r2, #4
 8006a46:	0799      	lsls	r1, r3, #30
 8006a48:	bf04      	itt	eq
 8006a4a:	089b      	lsreq	r3, r3, #2
 8006a4c:	3202      	addeq	r2, #2
 8006a4e:	07d9      	lsls	r1, r3, #31
 8006a50:	d403      	bmi.n	8006a5a <__lo0bits+0x4e>
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	f102 0201 	add.w	r2, r2, #1
 8006a58:	d003      	beq.n	8006a62 <__lo0bits+0x56>
 8006a5a:	6003      	str	r3, [r0, #0]
 8006a5c:	e7e5      	b.n	8006a2a <__lo0bits+0x1e>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	e7e3      	b.n	8006a2a <__lo0bits+0x1e>
 8006a62:	2220      	movs	r2, #32
 8006a64:	e7e1      	b.n	8006a2a <__lo0bits+0x1e>
	...

08006a68 <__i2b>:
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	f7ff ff05 	bl	800687c <_Balloc>
 8006a72:	4602      	mov	r2, r0
 8006a74:	b928      	cbnz	r0, 8006a82 <__i2b+0x1a>
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <__i2b+0x24>)
 8006a78:	4805      	ldr	r0, [pc, #20]	; (8006a90 <__i2b+0x28>)
 8006a7a:	f240 1145 	movw	r1, #325	; 0x145
 8006a7e:	f000 fd1f 	bl	80074c0 <__assert_func>
 8006a82:	2301      	movs	r3, #1
 8006a84:	6144      	str	r4, [r0, #20]
 8006a86:	6103      	str	r3, [r0, #16]
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08007818 	.word	0x08007818
 8006a90:	08007829 	.word	0x08007829

08006a94 <__multiply>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	4691      	mov	r9, r2
 8006a9a:	690a      	ldr	r2, [r1, #16]
 8006a9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bfb8      	it	lt
 8006aa4:	460b      	movlt	r3, r1
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	bfbc      	itt	lt
 8006aaa:	464c      	movlt	r4, r9
 8006aac:	4699      	movlt	r9, r3
 8006aae:	6927      	ldr	r7, [r4, #16]
 8006ab0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	6861      	ldr	r1, [r4, #4]
 8006ab8:	eb07 060a 	add.w	r6, r7, sl
 8006abc:	42b3      	cmp	r3, r6
 8006abe:	b085      	sub	sp, #20
 8006ac0:	bfb8      	it	lt
 8006ac2:	3101      	addlt	r1, #1
 8006ac4:	f7ff feda 	bl	800687c <_Balloc>
 8006ac8:	b930      	cbnz	r0, 8006ad8 <__multiply+0x44>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <__multiply+0x14c>)
 8006ace:	4845      	ldr	r0, [pc, #276]	; (8006be4 <__multiply+0x150>)
 8006ad0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ad4:	f000 fcf4 	bl	80074c0 <__assert_func>
 8006ad8:	f100 0514 	add.w	r5, r0, #20
 8006adc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	d321      	bcc.n	8006b2c <__multiply+0x98>
 8006ae8:	f104 0314 	add.w	r3, r4, #20
 8006aec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006af0:	f109 0314 	add.w	r3, r9, #20
 8006af4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006af8:	9202      	str	r2, [sp, #8]
 8006afa:	1b3a      	subs	r2, r7, r4
 8006afc:	3a15      	subs	r2, #21
 8006afe:	f022 0203 	bic.w	r2, r2, #3
 8006b02:	3204      	adds	r2, #4
 8006b04:	f104 0115 	add.w	r1, r4, #21
 8006b08:	428f      	cmp	r7, r1
 8006b0a:	bf38      	it	cc
 8006b0c:	2204      	movcc	r2, #4
 8006b0e:	9201      	str	r2, [sp, #4]
 8006b10:	9a02      	ldr	r2, [sp, #8]
 8006b12:	9303      	str	r3, [sp, #12]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d80c      	bhi.n	8006b32 <__multiply+0x9e>
 8006b18:	2e00      	cmp	r6, #0
 8006b1a:	dd03      	ble.n	8006b24 <__multiply+0x90>
 8006b1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05b      	beq.n	8006bdc <__multiply+0x148>
 8006b24:	6106      	str	r6, [r0, #16]
 8006b26:	b005      	add	sp, #20
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	f843 2b04 	str.w	r2, [r3], #4
 8006b30:	e7d8      	b.n	8006ae4 <__multiply+0x50>
 8006b32:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b36:	f1ba 0f00 	cmp.w	sl, #0
 8006b3a:	d024      	beq.n	8006b86 <__multiply+0xf2>
 8006b3c:	f104 0e14 	add.w	lr, r4, #20
 8006b40:	46a9      	mov	r9, r5
 8006b42:	f04f 0c00 	mov.w	ip, #0
 8006b46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b4a:	f8d9 1000 	ldr.w	r1, [r9]
 8006b4e:	fa1f fb82 	uxth.w	fp, r2
 8006b52:	b289      	uxth	r1, r1
 8006b54:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b60:	4461      	add	r1, ip
 8006b62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b66:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b6e:	b289      	uxth	r1, r1
 8006b70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b74:	4577      	cmp	r7, lr
 8006b76:	f849 1b04 	str.w	r1, [r9], #4
 8006b7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b7e:	d8e2      	bhi.n	8006b46 <__multiply+0xb2>
 8006b80:	9a01      	ldr	r2, [sp, #4]
 8006b82:	f845 c002 	str.w	ip, [r5, r2]
 8006b86:	9a03      	ldr	r2, [sp, #12]
 8006b88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	f1b9 0f00 	cmp.w	r9, #0
 8006b92:	d021      	beq.n	8006bd8 <__multiply+0x144>
 8006b94:	6829      	ldr	r1, [r5, #0]
 8006b96:	f104 0c14 	add.w	ip, r4, #20
 8006b9a:	46ae      	mov	lr, r5
 8006b9c:	f04f 0a00 	mov.w	sl, #0
 8006ba0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ba4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ba8:	fb09 220b 	mla	r2, r9, fp, r2
 8006bac:	4452      	add	r2, sl
 8006bae:	b289      	uxth	r1, r1
 8006bb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bb4:	f84e 1b04 	str.w	r1, [lr], #4
 8006bb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006bbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc0:	f8be 1000 	ldrh.w	r1, [lr]
 8006bc4:	fb09 110a 	mla	r1, r9, sl, r1
 8006bc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bcc:	4567      	cmp	r7, ip
 8006bce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bd2:	d8e5      	bhi.n	8006ba0 <__multiply+0x10c>
 8006bd4:	9a01      	ldr	r2, [sp, #4]
 8006bd6:	50a9      	str	r1, [r5, r2]
 8006bd8:	3504      	adds	r5, #4
 8006bda:	e799      	b.n	8006b10 <__multiply+0x7c>
 8006bdc:	3e01      	subs	r6, #1
 8006bde:	e79b      	b.n	8006b18 <__multiply+0x84>
 8006be0:	08007818 	.word	0x08007818
 8006be4:	08007829 	.word	0x08007829

08006be8 <__pow5mult>:
 8006be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bec:	4615      	mov	r5, r2
 8006bee:	f012 0203 	ands.w	r2, r2, #3
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	460f      	mov	r7, r1
 8006bf6:	d007      	beq.n	8006c08 <__pow5mult+0x20>
 8006bf8:	4c25      	ldr	r4, [pc, #148]	; (8006c90 <__pow5mult+0xa8>)
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c02:	f7ff fe9d 	bl	8006940 <__multadd>
 8006c06:	4607      	mov	r7, r0
 8006c08:	10ad      	asrs	r5, r5, #2
 8006c0a:	d03d      	beq.n	8006c88 <__pow5mult+0xa0>
 8006c0c:	69f4      	ldr	r4, [r6, #28]
 8006c0e:	b97c      	cbnz	r4, 8006c30 <__pow5mult+0x48>
 8006c10:	2010      	movs	r0, #16
 8006c12:	f7ff fd7f 	bl	8006714 <malloc>
 8006c16:	4602      	mov	r2, r0
 8006c18:	61f0      	str	r0, [r6, #28]
 8006c1a:	b928      	cbnz	r0, 8006c28 <__pow5mult+0x40>
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <__pow5mult+0xac>)
 8006c1e:	481e      	ldr	r0, [pc, #120]	; (8006c98 <__pow5mult+0xb0>)
 8006c20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c24:	f000 fc4c 	bl	80074c0 <__assert_func>
 8006c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c2c:	6004      	str	r4, [r0, #0]
 8006c2e:	60c4      	str	r4, [r0, #12]
 8006c30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c38:	b94c      	cbnz	r4, 8006c4e <__pow5mult+0x66>
 8006c3a:	f240 2171 	movw	r1, #625	; 0x271
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ff12 	bl	8006a68 <__i2b>
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	f04f 0900 	mov.w	r9, #0
 8006c52:	07eb      	lsls	r3, r5, #31
 8006c54:	d50a      	bpl.n	8006c6c <__pow5mult+0x84>
 8006c56:	4639      	mov	r1, r7
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff1a 	bl	8006a94 <__multiply>
 8006c60:	4639      	mov	r1, r7
 8006c62:	4680      	mov	r8, r0
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff fe49 	bl	80068fc <_Bfree>
 8006c6a:	4647      	mov	r7, r8
 8006c6c:	106d      	asrs	r5, r5, #1
 8006c6e:	d00b      	beq.n	8006c88 <__pow5mult+0xa0>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	b938      	cbnz	r0, 8006c84 <__pow5mult+0x9c>
 8006c74:	4622      	mov	r2, r4
 8006c76:	4621      	mov	r1, r4
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff ff0b 	bl	8006a94 <__multiply>
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	f8c0 9000 	str.w	r9, [r0]
 8006c84:	4604      	mov	r4, r0
 8006c86:	e7e4      	b.n	8006c52 <__pow5mult+0x6a>
 8006c88:	4638      	mov	r0, r7
 8006c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8e:	bf00      	nop
 8006c90:	08007978 	.word	0x08007978
 8006c94:	080077a9 	.word	0x080077a9
 8006c98:	08007829 	.word	0x08007829

08006c9c <__lshift>:
 8006c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	6849      	ldr	r1, [r1, #4]
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	4607      	mov	r7, r0
 8006cae:	4691      	mov	r9, r2
 8006cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cb4:	f108 0601 	add.w	r6, r8, #1
 8006cb8:	42b3      	cmp	r3, r6
 8006cba:	db0b      	blt.n	8006cd4 <__lshift+0x38>
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff fddd 	bl	800687c <_Balloc>
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	b948      	cbnz	r0, 8006cda <__lshift+0x3e>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <__lshift+0xd0>)
 8006cca:	4829      	ldr	r0, [pc, #164]	; (8006d70 <__lshift+0xd4>)
 8006ccc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cd0:	f000 fbf6 	bl	80074c0 <__assert_func>
 8006cd4:	3101      	adds	r1, #1
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__lshift+0x1c>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f100 0114 	add.w	r1, r0, #20
 8006ce0:	f100 0210 	add.w	r2, r0, #16
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	4553      	cmp	r3, sl
 8006ce8:	db33      	blt.n	8006d52 <__lshift+0xb6>
 8006cea:	6920      	ldr	r0, [r4, #16]
 8006cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cf0:	f104 0314 	add.w	r3, r4, #20
 8006cf4:	f019 091f 	ands.w	r9, r9, #31
 8006cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d00:	d02b      	beq.n	8006d5a <__lshift+0xbe>
 8006d02:	f1c9 0e20 	rsb	lr, r9, #32
 8006d06:	468a      	mov	sl, r1
 8006d08:	2200      	movs	r2, #0
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8006d10:	4310      	orrs	r0, r2
 8006d12:	f84a 0b04 	str.w	r0, [sl], #4
 8006d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d1a:	459c      	cmp	ip, r3
 8006d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d20:	d8f3      	bhi.n	8006d0a <__lshift+0x6e>
 8006d22:	ebac 0304 	sub.w	r3, ip, r4
 8006d26:	3b15      	subs	r3, #21
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	f104 0015 	add.w	r0, r4, #21
 8006d32:	4584      	cmp	ip, r0
 8006d34:	bf38      	it	cc
 8006d36:	2304      	movcc	r3, #4
 8006d38:	50ca      	str	r2, [r1, r3]
 8006d3a:	b10a      	cbz	r2, 8006d40 <__lshift+0xa4>
 8006d3c:	f108 0602 	add.w	r6, r8, #2
 8006d40:	3e01      	subs	r6, #1
 8006d42:	4638      	mov	r0, r7
 8006d44:	612e      	str	r6, [r5, #16]
 8006d46:	4621      	mov	r1, r4
 8006d48:	f7ff fdd8 	bl	80068fc <_Bfree>
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d56:	3301      	adds	r3, #1
 8006d58:	e7c5      	b.n	8006ce6 <__lshift+0x4a>
 8006d5a:	3904      	subs	r1, #4
 8006d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d64:	459c      	cmp	ip, r3
 8006d66:	d8f9      	bhi.n	8006d5c <__lshift+0xc0>
 8006d68:	e7ea      	b.n	8006d40 <__lshift+0xa4>
 8006d6a:	bf00      	nop
 8006d6c:	08007818 	.word	0x08007818
 8006d70:	08007829 	.word	0x08007829

08006d74 <__mcmp>:
 8006d74:	b530      	push	{r4, r5, lr}
 8006d76:	6902      	ldr	r2, [r0, #16]
 8006d78:	690c      	ldr	r4, [r1, #16]
 8006d7a:	1b12      	subs	r2, r2, r4
 8006d7c:	d10e      	bne.n	8006d9c <__mcmp+0x28>
 8006d7e:	f100 0314 	add.w	r3, r0, #20
 8006d82:	3114      	adds	r1, #20
 8006d84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d003      	beq.n	8006da0 <__mcmp+0x2c>
 8006d98:	d305      	bcc.n	8006da6 <__mcmp+0x32>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	bd30      	pop	{r4, r5, pc}
 8006da0:	4283      	cmp	r3, r0
 8006da2:	d3f3      	bcc.n	8006d8c <__mcmp+0x18>
 8006da4:	e7fa      	b.n	8006d9c <__mcmp+0x28>
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	e7f7      	b.n	8006d9c <__mcmp+0x28>

08006dac <__mdiff>:
 8006dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	460c      	mov	r4, r1
 8006db2:	4606      	mov	r6, r0
 8006db4:	4611      	mov	r1, r2
 8006db6:	4620      	mov	r0, r4
 8006db8:	4690      	mov	r8, r2
 8006dba:	f7ff ffdb 	bl	8006d74 <__mcmp>
 8006dbe:	1e05      	subs	r5, r0, #0
 8006dc0:	d110      	bne.n	8006de4 <__mdiff+0x38>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff fd59 	bl	800687c <_Balloc>
 8006dca:	b930      	cbnz	r0, 8006dda <__mdiff+0x2e>
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <__mdiff+0x10c>)
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f240 2137 	movw	r1, #567	; 0x237
 8006dd4:	4839      	ldr	r0, [pc, #228]	; (8006ebc <__mdiff+0x110>)
 8006dd6:	f000 fb73 	bl	80074c0 <__assert_func>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	bfa4      	itt	ge
 8006de6:	4643      	movge	r3, r8
 8006de8:	46a0      	movge	r8, r4
 8006dea:	4630      	mov	r0, r6
 8006dec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006df0:	bfa6      	itte	ge
 8006df2:	461c      	movge	r4, r3
 8006df4:	2500      	movge	r5, #0
 8006df6:	2501      	movlt	r5, #1
 8006df8:	f7ff fd40 	bl	800687c <_Balloc>
 8006dfc:	b920      	cbnz	r0, 8006e08 <__mdiff+0x5c>
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <__mdiff+0x10c>)
 8006e00:	4602      	mov	r2, r0
 8006e02:	f240 2145 	movw	r1, #581	; 0x245
 8006e06:	e7e5      	b.n	8006dd4 <__mdiff+0x28>
 8006e08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e0c:	6926      	ldr	r6, [r4, #16]
 8006e0e:	60c5      	str	r5, [r0, #12]
 8006e10:	f104 0914 	add.w	r9, r4, #20
 8006e14:	f108 0514 	add.w	r5, r8, #20
 8006e18:	f100 0e14 	add.w	lr, r0, #20
 8006e1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e24:	f108 0210 	add.w	r2, r8, #16
 8006e28:	46f2      	mov	sl, lr
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e34:	fa11 f88b 	uxtah	r8, r1, fp
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	0c1b      	lsrs	r3, r3, #16
 8006e3c:	eba8 0801 	sub.w	r8, r8, r1
 8006e40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e48:	fa1f f888 	uxth.w	r8, r8
 8006e4c:	1419      	asrs	r1, r3, #16
 8006e4e:	454e      	cmp	r6, r9
 8006e50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e54:	f84a 3b04 	str.w	r3, [sl], #4
 8006e58:	d8e8      	bhi.n	8006e2c <__mdiff+0x80>
 8006e5a:	1b33      	subs	r3, r6, r4
 8006e5c:	3b15      	subs	r3, #21
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	3304      	adds	r3, #4
 8006e64:	3415      	adds	r4, #21
 8006e66:	42a6      	cmp	r6, r4
 8006e68:	bf38      	it	cc
 8006e6a:	2304      	movcc	r3, #4
 8006e6c:	441d      	add	r5, r3
 8006e6e:	4473      	add	r3, lr
 8006e70:	469e      	mov	lr, r3
 8006e72:	462e      	mov	r6, r5
 8006e74:	4566      	cmp	r6, ip
 8006e76:	d30e      	bcc.n	8006e96 <__mdiff+0xea>
 8006e78:	f10c 0203 	add.w	r2, ip, #3
 8006e7c:	1b52      	subs	r2, r2, r5
 8006e7e:	f022 0203 	bic.w	r2, r2, #3
 8006e82:	3d03      	subs	r5, #3
 8006e84:	45ac      	cmp	ip, r5
 8006e86:	bf38      	it	cc
 8006e88:	2200      	movcc	r2, #0
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e90:	b17a      	cbz	r2, 8006eb2 <__mdiff+0x106>
 8006e92:	6107      	str	r7, [r0, #16]
 8006e94:	e7a4      	b.n	8006de0 <__mdiff+0x34>
 8006e96:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e9a:	fa11 f288 	uxtah	r2, r1, r8
 8006e9e:	1414      	asrs	r4, r2, #16
 8006ea0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006eaa:	f84e 2b04 	str.w	r2, [lr], #4
 8006eae:	1421      	asrs	r1, r4, #16
 8006eb0:	e7e0      	b.n	8006e74 <__mdiff+0xc8>
 8006eb2:	3f01      	subs	r7, #1
 8006eb4:	e7ea      	b.n	8006e8c <__mdiff+0xe0>
 8006eb6:	bf00      	nop
 8006eb8:	08007818 	.word	0x08007818
 8006ebc:	08007829 	.word	0x08007829

08006ec0 <__d2b>:
 8006ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	ec59 8b10 	vmov	r8, r9, d0
 8006ecc:	4616      	mov	r6, r2
 8006ece:	f7ff fcd5 	bl	800687c <_Balloc>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	b930      	cbnz	r0, 8006ee4 <__d2b+0x24>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <__d2b+0xac>)
 8006eda:	4825      	ldr	r0, [pc, #148]	; (8006f70 <__d2b+0xb0>)
 8006edc:	f240 310f 	movw	r1, #783	; 0x30f
 8006ee0:	f000 faee 	bl	80074c0 <__assert_func>
 8006ee4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eec:	bb2d      	cbnz	r5, 8006f3a <__d2b+0x7a>
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ef4:	d026      	beq.n	8006f44 <__d2b+0x84>
 8006ef6:	4668      	mov	r0, sp
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	f7ff fd87 	bl	8006a0c <__lo0bits>
 8006efe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f02:	b1e8      	cbz	r0, 8006f40 <__d2b+0x80>
 8006f04:	f1c0 0320 	rsb	r3, r0, #32
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	40c2      	lsrs	r2, r0
 8006f10:	6163      	str	r3, [r4, #20]
 8006f12:	9201      	str	r2, [sp, #4]
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	61a3      	str	r3, [r4, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2202      	movne	r2, #2
 8006f1e:	2201      	moveq	r2, #1
 8006f20:	6122      	str	r2, [r4, #16]
 8006f22:	b1bd      	cbz	r5, 8006f54 <__d2b+0x94>
 8006f24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f28:	4405      	add	r5, r0
 8006f2a:	603d      	str	r5, [r7, #0]
 8006f2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f30:	6030      	str	r0, [r6, #0]
 8006f32:	4620      	mov	r0, r4
 8006f34:	b003      	add	sp, #12
 8006f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f3e:	e7d6      	b.n	8006eee <__d2b+0x2e>
 8006f40:	6161      	str	r1, [r4, #20]
 8006f42:	e7e7      	b.n	8006f14 <__d2b+0x54>
 8006f44:	a801      	add	r0, sp, #4
 8006f46:	f7ff fd61 	bl	8006a0c <__lo0bits>
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	6163      	str	r3, [r4, #20]
 8006f4e:	3020      	adds	r0, #32
 8006f50:	2201      	movs	r2, #1
 8006f52:	e7e5      	b.n	8006f20 <__d2b+0x60>
 8006f54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f5c:	6038      	str	r0, [r7, #0]
 8006f5e:	6918      	ldr	r0, [r3, #16]
 8006f60:	f7ff fd34 	bl	80069cc <__hi0bits>
 8006f64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f68:	e7e2      	b.n	8006f30 <__d2b+0x70>
 8006f6a:	bf00      	nop
 8006f6c:	08007818 	.word	0x08007818
 8006f70:	08007829 	.word	0x08007829

08006f74 <__sfputc_r>:
 8006f74:	6893      	ldr	r3, [r2, #8]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	b410      	push	{r4}
 8006f7c:	6093      	str	r3, [r2, #8]
 8006f7e:	da08      	bge.n	8006f92 <__sfputc_r+0x1e>
 8006f80:	6994      	ldr	r4, [r2, #24]
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	db01      	blt.n	8006f8a <__sfputc_r+0x16>
 8006f86:	290a      	cmp	r1, #10
 8006f88:	d103      	bne.n	8006f92 <__sfputc_r+0x1e>
 8006f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f8e:	f000 b9e3 	b.w	8007358 <__swbuf_r>
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	1c58      	adds	r0, r3, #1
 8006f96:	6010      	str	r0, [r2, #0]
 8006f98:	7019      	strb	r1, [r3, #0]
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <__sfputs_r>:
 8006fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	460f      	mov	r7, r1
 8006fa8:	4614      	mov	r4, r2
 8006faa:	18d5      	adds	r5, r2, r3
 8006fac:	42ac      	cmp	r4, r5
 8006fae:	d101      	bne.n	8006fb4 <__sfputs_r+0x12>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e007      	b.n	8006fc4 <__sfputs_r+0x22>
 8006fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb8:	463a      	mov	r2, r7
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffda 	bl	8006f74 <__sfputc_r>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d1f3      	bne.n	8006fac <__sfputs_r+0xa>
 8006fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fc8 <_vfiprintf_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	460d      	mov	r5, r1
 8006fce:	b09d      	sub	sp, #116	; 0x74
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	4698      	mov	r8, r3
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	b118      	cbz	r0, 8006fe0 <_vfiprintf_r+0x18>
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <_vfiprintf_r+0x18>
 8006fdc:	f7fe fbc6 	bl	800576c <__sinit>
 8006fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d405      	bmi.n	8006ff2 <_vfiprintf_r+0x2a>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_vfiprintf_r+0x2a>
 8006fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fee:	f7fe fcc6 	bl	800597e <__retarget_lock_acquire_recursive>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	071b      	lsls	r3, r3, #28
 8006ff6:	d501      	bpl.n	8006ffc <_vfiprintf_r+0x34>
 8006ff8:	692b      	ldr	r3, [r5, #16]
 8006ffa:	b99b      	cbnz	r3, 8007024 <_vfiprintf_r+0x5c>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4630      	mov	r0, r6
 8007000:	f000 f9e8 	bl	80073d4 <__swsetup_r>
 8007004:	b170      	cbz	r0, 8007024 <_vfiprintf_r+0x5c>
 8007006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007008:	07dc      	lsls	r4, r3, #31
 800700a:	d504      	bpl.n	8007016 <_vfiprintf_r+0x4e>
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	b01d      	add	sp, #116	; 0x74
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	0598      	lsls	r0, r3, #22
 800701a:	d4f7      	bmi.n	800700c <_vfiprintf_r+0x44>
 800701c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701e:	f7fe fcaf 	bl	8005980 <__retarget_lock_release_recursive>
 8007022:	e7f3      	b.n	800700c <_vfiprintf_r+0x44>
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007032:	2330      	movs	r3, #48	; 0x30
 8007034:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80071e8 <_vfiprintf_r+0x220>
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703c:	f04f 0901 	mov.w	r9, #1
 8007040:	4623      	mov	r3, r4
 8007042:	469a      	mov	sl, r3
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	b10a      	cbz	r2, 800704e <_vfiprintf_r+0x86>
 800704a:	2a25      	cmp	r2, #37	; 0x25
 800704c:	d1f9      	bne.n	8007042 <_vfiprintf_r+0x7a>
 800704e:	ebba 0b04 	subs.w	fp, sl, r4
 8007052:	d00b      	beq.n	800706c <_vfiprintf_r+0xa4>
 8007054:	465b      	mov	r3, fp
 8007056:	4622      	mov	r2, r4
 8007058:	4629      	mov	r1, r5
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ffa1 	bl	8006fa2 <__sfputs_r>
 8007060:	3001      	adds	r0, #1
 8007062:	f000 80a9 	beq.w	80071b8 <_vfiprintf_r+0x1f0>
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	445a      	add	r2, fp
 800706a:	9209      	str	r2, [sp, #36]	; 0x24
 800706c:	f89a 3000 	ldrb.w	r3, [sl]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a1 	beq.w	80071b8 <_vfiprintf_r+0x1f0>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708c:	931a      	str	r3, [sp, #104]	; 0x68
 800708e:	4654      	mov	r4, sl
 8007090:	2205      	movs	r2, #5
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4854      	ldr	r0, [pc, #336]	; (80071e8 <_vfiprintf_r+0x220>)
 8007098:	f7f9 f8ba 	bl	8000210 <memchr>
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	b9d8      	cbnz	r0, 80070d8 <_vfiprintf_r+0x110>
 80070a0:	06d1      	lsls	r1, r2, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2320      	movmi	r3, #32
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070aa:	0713      	lsls	r3, r2, #28
 80070ac:	bf44      	itt	mi
 80070ae:	232b      	movmi	r3, #43	; 0x2b
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d015      	beq.n	80070e8 <_vfiprintf_r+0x120>
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	4654      	mov	r4, sl
 80070c0:	2000      	movs	r0, #0
 80070c2:	f04f 0c0a 	mov.w	ip, #10
 80070c6:	4621      	mov	r1, r4
 80070c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070cc:	3b30      	subs	r3, #48	; 0x30
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d94d      	bls.n	800716e <_vfiprintf_r+0x1a6>
 80070d2:	b1b0      	cbz	r0, 8007102 <_vfiprintf_r+0x13a>
 80070d4:	9207      	str	r2, [sp, #28]
 80070d6:	e014      	b.n	8007102 <_vfiprintf_r+0x13a>
 80070d8:	eba0 0308 	sub.w	r3, r0, r8
 80070dc:	fa09 f303 	lsl.w	r3, r9, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	46a2      	mov	sl, r4
 80070e6:	e7d2      	b.n	800708e <_vfiprintf_r+0xc6>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfbb      	ittet	lt
 80070f4:	425b      	neglt	r3, r3
 80070f6:	f042 0202 	orrlt.w	r2, r2, #2
 80070fa:	9307      	strge	r3, [sp, #28]
 80070fc:	9307      	strlt	r3, [sp, #28]
 80070fe:	bfb8      	it	lt
 8007100:	9204      	strlt	r2, [sp, #16]
 8007102:	7823      	ldrb	r3, [r4, #0]
 8007104:	2b2e      	cmp	r3, #46	; 0x2e
 8007106:	d10c      	bne.n	8007122 <_vfiprintf_r+0x15a>
 8007108:	7863      	ldrb	r3, [r4, #1]
 800710a:	2b2a      	cmp	r3, #42	; 0x2a
 800710c:	d134      	bne.n	8007178 <_vfiprintf_r+0x1b0>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfb8      	it	lt
 800711a:	f04f 33ff 	movlt.w	r3, #4294967295
 800711e:	3402      	adds	r4, #2
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80071f8 <_vfiprintf_r+0x230>
 8007126:	7821      	ldrb	r1, [r4, #0]
 8007128:	2203      	movs	r2, #3
 800712a:	4650      	mov	r0, sl
 800712c:	f7f9 f870 	bl	8000210 <memchr>
 8007130:	b138      	cbz	r0, 8007142 <_vfiprintf_r+0x17a>
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	eba0 000a 	sub.w	r0, r0, sl
 8007138:	2240      	movs	r2, #64	; 0x40
 800713a:	4082      	lsls	r2, r0
 800713c:	4313      	orrs	r3, r2
 800713e:	3401      	adds	r4, #1
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007146:	4829      	ldr	r0, [pc, #164]	; (80071ec <_vfiprintf_r+0x224>)
 8007148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714c:	2206      	movs	r2, #6
 800714e:	f7f9 f85f 	bl	8000210 <memchr>
 8007152:	2800      	cmp	r0, #0
 8007154:	d03f      	beq.n	80071d6 <_vfiprintf_r+0x20e>
 8007156:	4b26      	ldr	r3, [pc, #152]	; (80071f0 <_vfiprintf_r+0x228>)
 8007158:	bb1b      	cbnz	r3, 80071a2 <_vfiprintf_r+0x1da>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	3307      	adds	r3, #7
 800715e:	f023 0307 	bic.w	r3, r3, #7
 8007162:	3308      	adds	r3, #8
 8007164:	9303      	str	r3, [sp, #12]
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	443b      	add	r3, r7
 800716a:	9309      	str	r3, [sp, #36]	; 0x24
 800716c:	e768      	b.n	8007040 <_vfiprintf_r+0x78>
 800716e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007172:	460c      	mov	r4, r1
 8007174:	2001      	movs	r0, #1
 8007176:	e7a6      	b.n	80070c6 <_vfiprintf_r+0xfe>
 8007178:	2300      	movs	r3, #0
 800717a:	3401      	adds	r4, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4620      	mov	r0, r4
 8007186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718a:	3a30      	subs	r2, #48	; 0x30
 800718c:	2a09      	cmp	r2, #9
 800718e:	d903      	bls.n	8007198 <_vfiprintf_r+0x1d0>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0c6      	beq.n	8007122 <_vfiprintf_r+0x15a>
 8007194:	9105      	str	r1, [sp, #20]
 8007196:	e7c4      	b.n	8007122 <_vfiprintf_r+0x15a>
 8007198:	fb0c 2101 	mla	r1, ip, r1, r2
 800719c:	4604      	mov	r4, r0
 800719e:	2301      	movs	r3, #1
 80071a0:	e7f0      	b.n	8007184 <_vfiprintf_r+0x1bc>
 80071a2:	ab03      	add	r3, sp, #12
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	462a      	mov	r2, r5
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <_vfiprintf_r+0x22c>)
 80071aa:	a904      	add	r1, sp, #16
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7fd fe8b 	bl	8004ec8 <_printf_float>
 80071b2:	4607      	mov	r7, r0
 80071b4:	1c78      	adds	r0, r7, #1
 80071b6:	d1d6      	bne.n	8007166 <_vfiprintf_r+0x19e>
 80071b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_vfiprintf_r+0x202>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_vfiprintf_r+0x202>
 80071c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c6:	f7fe fbdb 	bl	8005980 <__retarget_lock_release_recursive>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	065b      	lsls	r3, r3, #25
 80071ce:	f53f af1d 	bmi.w	800700c <_vfiprintf_r+0x44>
 80071d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d4:	e71c      	b.n	8007010 <_vfiprintf_r+0x48>
 80071d6:	ab03      	add	r3, sp, #12
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	462a      	mov	r2, r5
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <_vfiprintf_r+0x22c>)
 80071de:	a904      	add	r1, sp, #16
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7fe f915 	bl	8005410 <_printf_i>
 80071e6:	e7e4      	b.n	80071b2 <_vfiprintf_r+0x1ea>
 80071e8:	08007984 	.word	0x08007984
 80071ec:	0800798e 	.word	0x0800798e
 80071f0:	08004ec9 	.word	0x08004ec9
 80071f4:	08006fa3 	.word	0x08006fa3
 80071f8:	0800798a 	.word	0x0800798a

080071fc <__sflush_r>:
 80071fc:	898a      	ldrh	r2, [r1, #12]
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	0710      	lsls	r0, r2, #28
 8007206:	460c      	mov	r4, r1
 8007208:	d458      	bmi.n	80072bc <__sflush_r+0xc0>
 800720a:	684b      	ldr	r3, [r1, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc05      	bgt.n	800721c <__sflush_r+0x20>
 8007210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc02      	bgt.n	800721c <__sflush_r+0x20>
 8007216:	2000      	movs	r0, #0
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800721e:	2e00      	cmp	r6, #0
 8007220:	d0f9      	beq.n	8007216 <__sflush_r+0x1a>
 8007222:	2300      	movs	r3, #0
 8007224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007228:	682f      	ldr	r7, [r5, #0]
 800722a:	6a21      	ldr	r1, [r4, #32]
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	d032      	beq.n	8007296 <__sflush_r+0x9a>
 8007230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	075a      	lsls	r2, r3, #29
 8007236:	d505      	bpl.n	8007244 <__sflush_r+0x48>
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	1ac0      	subs	r0, r0, r3
 800723c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800723e:	b10b      	cbz	r3, 8007244 <__sflush_r+0x48>
 8007240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007242:	1ac0      	subs	r0, r0, r3
 8007244:	2300      	movs	r3, #0
 8007246:	4602      	mov	r2, r0
 8007248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800724a:	6a21      	ldr	r1, [r4, #32]
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	d106      	bne.n	8007264 <__sflush_r+0x68>
 8007256:	6829      	ldr	r1, [r5, #0]
 8007258:	291d      	cmp	r1, #29
 800725a:	d82b      	bhi.n	80072b4 <__sflush_r+0xb8>
 800725c:	4a29      	ldr	r2, [pc, #164]	; (8007304 <__sflush_r+0x108>)
 800725e:	410a      	asrs	r2, r1
 8007260:	07d6      	lsls	r6, r2, #31
 8007262:	d427      	bmi.n	80072b4 <__sflush_r+0xb8>
 8007264:	2200      	movs	r2, #0
 8007266:	6062      	str	r2, [r4, #4]
 8007268:	04d9      	lsls	r1, r3, #19
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	d504      	bpl.n	800727a <__sflush_r+0x7e>
 8007270:	1c42      	adds	r2, r0, #1
 8007272:	d101      	bne.n	8007278 <__sflush_r+0x7c>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b903      	cbnz	r3, 800727a <__sflush_r+0x7e>
 8007278:	6560      	str	r0, [r4, #84]	; 0x54
 800727a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800727c:	602f      	str	r7, [r5, #0]
 800727e:	2900      	cmp	r1, #0
 8007280:	d0c9      	beq.n	8007216 <__sflush_r+0x1a>
 8007282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007286:	4299      	cmp	r1, r3
 8007288:	d002      	beq.n	8007290 <__sflush_r+0x94>
 800728a:	4628      	mov	r0, r5
 800728c:	f7ff f9f6 	bl	800667c <_free_r>
 8007290:	2000      	movs	r0, #0
 8007292:	6360      	str	r0, [r4, #52]	; 0x34
 8007294:	e7c0      	b.n	8007218 <__sflush_r+0x1c>
 8007296:	2301      	movs	r3, #1
 8007298:	4628      	mov	r0, r5
 800729a:	47b0      	blx	r6
 800729c:	1c41      	adds	r1, r0, #1
 800729e:	d1c8      	bne.n	8007232 <__sflush_r+0x36>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0c5      	beq.n	8007232 <__sflush_r+0x36>
 80072a6:	2b1d      	cmp	r3, #29
 80072a8:	d001      	beq.n	80072ae <__sflush_r+0xb2>
 80072aa:	2b16      	cmp	r3, #22
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0xb6>
 80072ae:	602f      	str	r7, [r5, #0]
 80072b0:	e7b1      	b.n	8007216 <__sflush_r+0x1a>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	e7ad      	b.n	8007218 <__sflush_r+0x1c>
 80072bc:	690f      	ldr	r7, [r1, #16]
 80072be:	2f00      	cmp	r7, #0
 80072c0:	d0a9      	beq.n	8007216 <__sflush_r+0x1a>
 80072c2:	0793      	lsls	r3, r2, #30
 80072c4:	680e      	ldr	r6, [r1, #0]
 80072c6:	bf08      	it	eq
 80072c8:	694b      	ldreq	r3, [r1, #20]
 80072ca:	600f      	str	r7, [r1, #0]
 80072cc:	bf18      	it	ne
 80072ce:	2300      	movne	r3, #0
 80072d0:	eba6 0807 	sub.w	r8, r6, r7
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	dd9c      	ble.n	8007216 <__sflush_r+0x1a>
 80072dc:	6a21      	ldr	r1, [r4, #32]
 80072de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072e0:	4643      	mov	r3, r8
 80072e2:	463a      	mov	r2, r7
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dc06      	bgt.n	80072fa <__sflush_r+0xfe>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e78e      	b.n	8007218 <__sflush_r+0x1c>
 80072fa:	4407      	add	r7, r0
 80072fc:	eba8 0800 	sub.w	r8, r8, r0
 8007300:	e7e9      	b.n	80072d6 <__sflush_r+0xda>
 8007302:	bf00      	nop
 8007304:	dfbffffe 	.word	0xdfbffffe

08007308 <_fflush_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	690b      	ldr	r3, [r1, #16]
 800730c:	4605      	mov	r5, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b913      	cbnz	r3, 8007318 <_fflush_r+0x10>
 8007312:	2500      	movs	r5, #0
 8007314:	4628      	mov	r0, r5
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	b118      	cbz	r0, 8007322 <_fflush_r+0x1a>
 800731a:	6a03      	ldr	r3, [r0, #32]
 800731c:	b90b      	cbnz	r3, 8007322 <_fflush_r+0x1a>
 800731e:	f7fe fa25 	bl	800576c <__sinit>
 8007322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f3      	beq.n	8007312 <_fflush_r+0xa>
 800732a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800732c:	07d0      	lsls	r0, r2, #31
 800732e:	d404      	bmi.n	800733a <_fflush_r+0x32>
 8007330:	0599      	lsls	r1, r3, #22
 8007332:	d402      	bmi.n	800733a <_fflush_r+0x32>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f7fe fb22 	bl	800597e <__retarget_lock_acquire_recursive>
 800733a:	4628      	mov	r0, r5
 800733c:	4621      	mov	r1, r4
 800733e:	f7ff ff5d 	bl	80071fc <__sflush_r>
 8007342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007344:	07da      	lsls	r2, r3, #31
 8007346:	4605      	mov	r5, r0
 8007348:	d4e4      	bmi.n	8007314 <_fflush_r+0xc>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	059b      	lsls	r3, r3, #22
 800734e:	d4e1      	bmi.n	8007314 <_fflush_r+0xc>
 8007350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007352:	f7fe fb15 	bl	8005980 <__retarget_lock_release_recursive>
 8007356:	e7dd      	b.n	8007314 <_fflush_r+0xc>

08007358 <__swbuf_r>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	460e      	mov	r6, r1
 800735c:	4614      	mov	r4, r2
 800735e:	4605      	mov	r5, r0
 8007360:	b118      	cbz	r0, 800736a <__swbuf_r+0x12>
 8007362:	6a03      	ldr	r3, [r0, #32]
 8007364:	b90b      	cbnz	r3, 800736a <__swbuf_r+0x12>
 8007366:	f7fe fa01 	bl	800576c <__sinit>
 800736a:	69a3      	ldr	r3, [r4, #24]
 800736c:	60a3      	str	r3, [r4, #8]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	071a      	lsls	r2, r3, #28
 8007372:	d525      	bpl.n	80073c0 <__swbuf_r+0x68>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	b31b      	cbz	r3, 80073c0 <__swbuf_r+0x68>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	6922      	ldr	r2, [r4, #16]
 800737c:	1a98      	subs	r0, r3, r2
 800737e:	6963      	ldr	r3, [r4, #20]
 8007380:	b2f6      	uxtb	r6, r6
 8007382:	4283      	cmp	r3, r0
 8007384:	4637      	mov	r7, r6
 8007386:	dc04      	bgt.n	8007392 <__swbuf_r+0x3a>
 8007388:	4621      	mov	r1, r4
 800738a:	4628      	mov	r0, r5
 800738c:	f7ff ffbc 	bl	8007308 <_fflush_r>
 8007390:	b9e0      	cbnz	r0, 80073cc <__swbuf_r+0x74>
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	3b01      	subs	r3, #1
 8007396:	60a3      	str	r3, [r4, #8]
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	6022      	str	r2, [r4, #0]
 800739e:	701e      	strb	r6, [r3, #0]
 80073a0:	6962      	ldr	r2, [r4, #20]
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d004      	beq.n	80073b2 <__swbuf_r+0x5a>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d506      	bpl.n	80073bc <__swbuf_r+0x64>
 80073ae:	2e0a      	cmp	r6, #10
 80073b0:	d104      	bne.n	80073bc <__swbuf_r+0x64>
 80073b2:	4621      	mov	r1, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	f7ff ffa7 	bl	8007308 <_fflush_r>
 80073ba:	b938      	cbnz	r0, 80073cc <__swbuf_r+0x74>
 80073bc:	4638      	mov	r0, r7
 80073be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f806 	bl	80073d4 <__swsetup_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0d5      	beq.n	8007378 <__swbuf_r+0x20>
 80073cc:	f04f 37ff 	mov.w	r7, #4294967295
 80073d0:	e7f4      	b.n	80073bc <__swbuf_r+0x64>
	...

080073d4 <__swsetup_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <__swsetup_r+0xac>)
 80073d8:	4605      	mov	r5, r0
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	460c      	mov	r4, r1
 80073de:	b118      	cbz	r0, 80073e8 <__swsetup_r+0x14>
 80073e0:	6a03      	ldr	r3, [r0, #32]
 80073e2:	b90b      	cbnz	r3, 80073e8 <__swsetup_r+0x14>
 80073e4:	f7fe f9c2 	bl	800576c <__sinit>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073ee:	0718      	lsls	r0, r3, #28
 80073f0:	d422      	bmi.n	8007438 <__swsetup_r+0x64>
 80073f2:	06d9      	lsls	r1, r3, #27
 80073f4:	d407      	bmi.n	8007406 <__swsetup_r+0x32>
 80073f6:	2309      	movs	r3, #9
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	e034      	b.n	8007470 <__swsetup_r+0x9c>
 8007406:	0758      	lsls	r0, r3, #29
 8007408:	d512      	bpl.n	8007430 <__swsetup_r+0x5c>
 800740a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800740c:	b141      	cbz	r1, 8007420 <__swsetup_r+0x4c>
 800740e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007412:	4299      	cmp	r1, r3
 8007414:	d002      	beq.n	800741c <__swsetup_r+0x48>
 8007416:	4628      	mov	r0, r5
 8007418:	f7ff f930 	bl	800667c <_free_r>
 800741c:	2300      	movs	r3, #0
 800741e:	6363      	str	r3, [r4, #52]	; 0x34
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	2300      	movs	r3, #0
 800742a:	6063      	str	r3, [r4, #4]
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	f043 0308 	orr.w	r3, r3, #8
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	b94b      	cbnz	r3, 8007450 <__swsetup_r+0x7c>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007446:	d003      	beq.n	8007450 <__swsetup_r+0x7c>
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 f8c4 	bl	80075d8 <__smakebuf_r>
 8007450:	89a0      	ldrh	r0, [r4, #12]
 8007452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007456:	f010 0301 	ands.w	r3, r0, #1
 800745a:	d00a      	beq.n	8007472 <__swsetup_r+0x9e>
 800745c:	2300      	movs	r3, #0
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	6963      	ldr	r3, [r4, #20]
 8007462:	425b      	negs	r3, r3
 8007464:	61a3      	str	r3, [r4, #24]
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	b943      	cbnz	r3, 800747c <__swsetup_r+0xa8>
 800746a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800746e:	d1c4      	bne.n	80073fa <__swsetup_r+0x26>
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	0781      	lsls	r1, r0, #30
 8007474:	bf58      	it	pl
 8007476:	6963      	ldrpl	r3, [r4, #20]
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	e7f4      	b.n	8007466 <__swsetup_r+0x92>
 800747c:	2000      	movs	r0, #0
 800747e:	e7f7      	b.n	8007470 <__swsetup_r+0x9c>
 8007480:	20000094 	.word	0x20000094

08007484 <_sbrk_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	; (80074a0 <_sbrk_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fa f9a6 	bl	80017e0 <_sbrk>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_sbrk_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_sbrk_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20000464 	.word	0x20000464

080074a4 <memcpy>:
 80074a4:	440a      	add	r2, r1
 80074a6:	4291      	cmp	r1, r2
 80074a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ac:	d100      	bne.n	80074b0 <memcpy+0xc>
 80074ae:	4770      	bx	lr
 80074b0:	b510      	push	{r4, lr}
 80074b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ba:	4291      	cmp	r1, r2
 80074bc:	d1f9      	bne.n	80074b2 <memcpy+0xe>
 80074be:	bd10      	pop	{r4, pc}

080074c0 <__assert_func>:
 80074c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074c2:	4614      	mov	r4, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <__assert_func+0x2c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4605      	mov	r5, r0
 80074cc:	68d8      	ldr	r0, [r3, #12]
 80074ce:	b14c      	cbz	r4, 80074e4 <__assert_func+0x24>
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <__assert_func+0x30>)
 80074d2:	9100      	str	r1, [sp, #0]
 80074d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074d8:	4906      	ldr	r1, [pc, #24]	; (80074f4 <__assert_func+0x34>)
 80074da:	462b      	mov	r3, r5
 80074dc:	f000 f844 	bl	8007568 <fiprintf>
 80074e0:	f000 f8d8 	bl	8007694 <abort>
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <__assert_func+0x38>)
 80074e6:	461c      	mov	r4, r3
 80074e8:	e7f3      	b.n	80074d2 <__assert_func+0x12>
 80074ea:	bf00      	nop
 80074ec:	20000094 	.word	0x20000094
 80074f0:	0800799f 	.word	0x0800799f
 80074f4:	080079ac 	.word	0x080079ac
 80074f8:	080079da 	.word	0x080079da

080074fc <_calloc_r>:
 80074fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074fe:	fba1 2402 	umull	r2, r4, r1, r2
 8007502:	b94c      	cbnz	r4, 8007518 <_calloc_r+0x1c>
 8007504:	4611      	mov	r1, r2
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	f7ff f92c 	bl	8006764 <_malloc_r>
 800750c:	9a01      	ldr	r2, [sp, #4]
 800750e:	4605      	mov	r5, r0
 8007510:	b930      	cbnz	r0, 8007520 <_calloc_r+0x24>
 8007512:	4628      	mov	r0, r5
 8007514:	b003      	add	sp, #12
 8007516:	bd30      	pop	{r4, r5, pc}
 8007518:	220c      	movs	r2, #12
 800751a:	6002      	str	r2, [r0, #0]
 800751c:	2500      	movs	r5, #0
 800751e:	e7f8      	b.n	8007512 <_calloc_r+0x16>
 8007520:	4621      	mov	r1, r4
 8007522:	f7fe f9ae 	bl	8005882 <memset>
 8007526:	e7f4      	b.n	8007512 <_calloc_r+0x16>

08007528 <__ascii_mbtowc>:
 8007528:	b082      	sub	sp, #8
 800752a:	b901      	cbnz	r1, 800752e <__ascii_mbtowc+0x6>
 800752c:	a901      	add	r1, sp, #4
 800752e:	b142      	cbz	r2, 8007542 <__ascii_mbtowc+0x1a>
 8007530:	b14b      	cbz	r3, 8007546 <__ascii_mbtowc+0x1e>
 8007532:	7813      	ldrb	r3, [r2, #0]
 8007534:	600b      	str	r3, [r1, #0]
 8007536:	7812      	ldrb	r2, [r2, #0]
 8007538:	1e10      	subs	r0, r2, #0
 800753a:	bf18      	it	ne
 800753c:	2001      	movne	r0, #1
 800753e:	b002      	add	sp, #8
 8007540:	4770      	bx	lr
 8007542:	4610      	mov	r0, r2
 8007544:	e7fb      	b.n	800753e <__ascii_mbtowc+0x16>
 8007546:	f06f 0001 	mvn.w	r0, #1
 800754a:	e7f8      	b.n	800753e <__ascii_mbtowc+0x16>

0800754c <__ascii_wctomb>:
 800754c:	b149      	cbz	r1, 8007562 <__ascii_wctomb+0x16>
 800754e:	2aff      	cmp	r2, #255	; 0xff
 8007550:	bf85      	ittet	hi
 8007552:	238a      	movhi	r3, #138	; 0x8a
 8007554:	6003      	strhi	r3, [r0, #0]
 8007556:	700a      	strbls	r2, [r1, #0]
 8007558:	f04f 30ff 	movhi.w	r0, #4294967295
 800755c:	bf98      	it	ls
 800755e:	2001      	movls	r0, #1
 8007560:	4770      	bx	lr
 8007562:	4608      	mov	r0, r1
 8007564:	4770      	bx	lr
	...

08007568 <fiprintf>:
 8007568:	b40e      	push	{r1, r2, r3}
 800756a:	b503      	push	{r0, r1, lr}
 800756c:	4601      	mov	r1, r0
 800756e:	ab03      	add	r3, sp, #12
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <fiprintf+0x20>)
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	f7ff fd25 	bl	8006fc8 <_vfiprintf_r>
 800757e:	b002      	add	sp, #8
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	20000094 	.word	0x20000094

0800758c <__swhatbuf_r>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	460c      	mov	r4, r1
 8007590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007594:	2900      	cmp	r1, #0
 8007596:	b096      	sub	sp, #88	; 0x58
 8007598:	4615      	mov	r5, r2
 800759a:	461e      	mov	r6, r3
 800759c:	da0d      	bge.n	80075ba <__swhatbuf_r+0x2e>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075a4:	f04f 0100 	mov.w	r1, #0
 80075a8:	bf0c      	ite	eq
 80075aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075ae:	2340      	movne	r3, #64	; 0x40
 80075b0:	2000      	movs	r0, #0
 80075b2:	6031      	str	r1, [r6, #0]
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	b016      	add	sp, #88	; 0x58
 80075b8:	bd70      	pop	{r4, r5, r6, pc}
 80075ba:	466a      	mov	r2, sp
 80075bc:	f000 f848 	bl	8007650 <_fstat_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dbec      	blt.n	800759e <__swhatbuf_r+0x12>
 80075c4:	9901      	ldr	r1, [sp, #4]
 80075c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075ce:	4259      	negs	r1, r3
 80075d0:	4159      	adcs	r1, r3
 80075d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d6:	e7eb      	b.n	80075b0 <__swhatbuf_r+0x24>

080075d8 <__smakebuf_r>:
 80075d8:	898b      	ldrh	r3, [r1, #12]
 80075da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075dc:	079d      	lsls	r5, r3, #30
 80075de:	4606      	mov	r6, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	d507      	bpl.n	80075f4 <__smakebuf_r+0x1c>
 80075e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	2301      	movs	r3, #1
 80075ee:	6163      	str	r3, [r4, #20]
 80075f0:	b002      	add	sp, #8
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	ab01      	add	r3, sp, #4
 80075f6:	466a      	mov	r2, sp
 80075f8:	f7ff ffc8 	bl	800758c <__swhatbuf_r>
 80075fc:	9900      	ldr	r1, [sp, #0]
 80075fe:	4605      	mov	r5, r0
 8007600:	4630      	mov	r0, r6
 8007602:	f7ff f8af 	bl	8006764 <_malloc_r>
 8007606:	b948      	cbnz	r0, 800761c <__smakebuf_r+0x44>
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	059a      	lsls	r2, r3, #22
 800760e:	d4ef      	bmi.n	80075f0 <__smakebuf_r+0x18>
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	f043 0302 	orr.w	r3, r3, #2
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e7e3      	b.n	80075e4 <__smakebuf_r+0xc>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	6020      	str	r0, [r4, #0]
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	6163      	str	r3, [r4, #20]
 800762a:	9b01      	ldr	r3, [sp, #4]
 800762c:	6120      	str	r0, [r4, #16]
 800762e:	b15b      	cbz	r3, 8007648 <__smakebuf_r+0x70>
 8007630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007634:	4630      	mov	r0, r6
 8007636:	f000 f81d 	bl	8007674 <_isatty_r>
 800763a:	b128      	cbz	r0, 8007648 <__smakebuf_r+0x70>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	f043 0301 	orr.w	r3, r3, #1
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	431d      	orrs	r5, r3
 800764c:	81a5      	strh	r5, [r4, #12]
 800764e:	e7cf      	b.n	80075f0 <__smakebuf_r+0x18>

08007650 <_fstat_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_fstat_r+0x20>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f7fa f896 	bl	800178e <_fstat>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d102      	bne.n	800766c <_fstat_r+0x1c>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b103      	cbz	r3, 800766c <_fstat_r+0x1c>
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	20000464 	.word	0x20000464

08007674 <_isatty_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d06      	ldr	r5, [pc, #24]	; (8007690 <_isatty_r+0x1c>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	f7fa f895 	bl	80017ae <_isatty>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_isatty_r+0x1a>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_isatty_r+0x1a>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	20000464 	.word	0x20000464

08007694 <abort>:
 8007694:	b508      	push	{r3, lr}
 8007696:	2006      	movs	r0, #6
 8007698:	f000 f82c 	bl	80076f4 <raise>
 800769c:	2001      	movs	r0, #1
 800769e:	f7fa f843 	bl	8001728 <_exit>

080076a2 <_raise_r>:
 80076a2:	291f      	cmp	r1, #31
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	d904      	bls.n	80076b6 <_raise_r+0x14>
 80076ac:	2316      	movs	r3, #22
 80076ae:	6003      	str	r3, [r0, #0]
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076b8:	b112      	cbz	r2, 80076c0 <_raise_r+0x1e>
 80076ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076be:	b94b      	cbnz	r3, 80076d4 <_raise_r+0x32>
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 f831 	bl	8007728 <_getpid_r>
 80076c6:	462a      	mov	r2, r5
 80076c8:	4601      	mov	r1, r0
 80076ca:	4620      	mov	r0, r4
 80076cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d0:	f000 b818 	b.w	8007704 <_kill_r>
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d00a      	beq.n	80076ee <_raise_r+0x4c>
 80076d8:	1c59      	adds	r1, r3, #1
 80076da:	d103      	bne.n	80076e4 <_raise_r+0x42>
 80076dc:	2316      	movs	r3, #22
 80076de:	6003      	str	r3, [r0, #0]
 80076e0:	2001      	movs	r0, #1
 80076e2:	e7e7      	b.n	80076b4 <_raise_r+0x12>
 80076e4:	2400      	movs	r4, #0
 80076e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076ea:	4628      	mov	r0, r5
 80076ec:	4798      	blx	r3
 80076ee:	2000      	movs	r0, #0
 80076f0:	e7e0      	b.n	80076b4 <_raise_r+0x12>
	...

080076f4 <raise>:
 80076f4:	4b02      	ldr	r3, [pc, #8]	; (8007700 <raise+0xc>)
 80076f6:	4601      	mov	r1, r0
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	f7ff bfd2 	b.w	80076a2 <_raise_r>
 80076fe:	bf00      	nop
 8007700:	20000094 	.word	0x20000094

08007704 <_kill_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d07      	ldr	r5, [pc, #28]	; (8007724 <_kill_r+0x20>)
 8007708:	2300      	movs	r3, #0
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	4611      	mov	r1, r2
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	f7f9 fff9 	bl	8001708 <_kill>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	d102      	bne.n	8007720 <_kill_r+0x1c>
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	b103      	cbz	r3, 8007720 <_kill_r+0x1c>
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	bd38      	pop	{r3, r4, r5, pc}
 8007722:	bf00      	nop
 8007724:	20000464 	.word	0x20000464

08007728 <_getpid_r>:
 8007728:	f7f9 bfe6 	b.w	80016f8 <_getpid>

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
