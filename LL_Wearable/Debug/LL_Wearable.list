
LL_Wearable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008da8  08008da8  00018da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009238  08009238  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009240  08009240  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000204  0800944c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800944c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001103c  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000292d  00000000  00000000  000312b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3c  00000000  00000000  00034b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024edc  00000000  00000000  000357cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013eff  00000000  00000000  0005a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e136f  00000000  00000000  0006e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b4  00000000  00000000  0014f918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00154dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d8c 	.word	0x08008d8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08008d8c 	.word	0x08008d8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <_write+0x24>)
 8000f9a:	f004 f8f3 	bl	8005184 <HAL_UART_Transmit>
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200003b8 	.word	0x200003b8

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f000 fe47 	bl	8001c44 <HAL_Init>
  //KMF_Init(&kf, 0.0, 1.0, 0.1); // kf ?��?��?��?�� 초기?��
  //HighPassFilter_Init;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f8c1 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 fa9d 	bl	80014f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbe:	f000 fa73 	bl	80014a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fc2:	f000 fa47 	bl	8001454 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fc6:	f000 f92b 	bl	8001220 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fca:	f000 f9cd 	bl	8001368 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000fce:	f000 f979 	bl	80012c4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000fd2:	484d      	ldr	r0, [pc, #308]	; (8001108 <main+0x15c>)
 8000fd4:	f003 f89c 	bl	8004110 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adcval1, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	494c      	ldr	r1, [pc, #304]	; (800110c <main+0x160>)
 8000fdc:	484c      	ldr	r0, [pc, #304]	; (8001110 <main+0x164>)
 8000fde:	f000 fff7 	bl	8001fd0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adcval2, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	494b      	ldr	r1, [pc, #300]	; (8001114 <main+0x168>)
 8000fe6:	484c      	ldr	r0, [pc, #304]	; (8001118 <main+0x16c>)
 8000fe8:	f000 fff2 	bl	8001fd0 <HAL_ADC_Start_DMA>
  //HAL_ADC_Start_DMA(&hadc2, adcval2, 1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4846      	ldr	r0, [pc, #280]	; (8001108 <main+0x15c>)
 8000ff0:	f003 f958 	bl	80042a4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adcFlag1 == 1 && adcFlag2 == 1){
 8000ff4:	4b49      	ldr	r3, [pc, #292]	; (800111c <main+0x170>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d1fa      	bne.n	8000ff4 <main+0x48>
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <main+0x174>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d1f5      	bne.n	8000ff4 <main+0x48>
		  adcFlag1 = 0;
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <main+0x170>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		  adcFlag2 = 0;
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <main+0x174>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

		  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4842      	ldr	r0, [pc, #264]	; (8001124 <main+0x178>)
 800101a:	f002 f9d7 	bl	80033cc <HAL_GPIO_WritePin>

		  	emg_raw = adcval1[0];
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <main+0x160>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <main+0x17c>)
 8001024:	6013      	str	r3, [r2, #0]
		  	stretch_raw = adcval2[0];
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <main+0x168>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a40      	ldr	r2, [pc, #256]	; (800112c <main+0x180>)
 800102c:	6013      	str	r3, [r2, #0]

		  	C = (float)stretch_raw*IN_STRAY_CAP_TO_GND / (float)(MAX_ADC_VALUE - stretch_raw);
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <main+0x180>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800103e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001042:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001046:	461a      	mov	r2, r3
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <main+0x180>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <main+0x184>)
 800105c:	edc3 7a00 	vstr	s15, [r3]

			float filtered_emg_raw =BWHPF((float)emg_raw, 20);
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <main+0x17c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106c:	2014      	movs	r0, #20
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	f004 fc43 	bl	80058fc <BWHPF>
 8001076:	ed87 0a05 	vstr	s0, [r7, #20]
			float emg_rec = fabs(filtered_emg_raw);
 800107a:	edd7 7a05 	vldr	s15, [r7, #20]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	edc7 7a04 	vstr	s15, [r7, #16]
			float filtered_emg = BWLPF(emg_rec);
 8001086:	ed97 0a04 	vldr	s0, [r7, #16]
 800108a:	f004 fd9b 	bl	8005bc4 <BWLPF>
 800108e:	ed87 0a03 	vstr	s0, [r7, #12]

			float neural_activation = NEURAL_ACTIVATION(filtered_emg);
 8001092:	ed97 0a03 	vldr	s0, [r7, #12]
 8001096:	f004 fe41 	bl	8005d1c <NEURAL_ACTIVATION>
 800109a:	ed87 0a02 	vstr	s0, [r7, #8]
			float muscle_activation = MUSCLE_ACTIVATION(neural_activation);
 800109e:	ed97 0a02 	vldr	s0, [r7, #8]
 80010a2:	f004 fea7 	bl	8005df4 <MUSCLE_ACTIVATION>
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, muscle_activation);
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0x15c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b6:	ee17 2a90 	vmov	r2, s15
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34

			float stretch_hpf = BWHPF((float) stretch_raw, 50);
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <main+0x180>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c8:	2032      	movs	r0, #50	; 0x32
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f004 fc15 	bl	80058fc <BWHPF>
 80010d2:	ed87 0a00 	vstr	s0, [r7]
			//float l_knee_F = FORCE_GENERATION(muscle_activation, );
			//printf("%f", neural_activation);
			//printf("%"PRIu32, emg_raw);
			//printf(",");
			printf("%f", filtered_emg_raw);
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff fa56 	bl	8000588 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <main+0x188>)
 80010e2:	f005 fc1d 	bl	8006920 <iprintf>
			//printf("%f\r\n", muscle_activation);
			//printf("%f\r\n", C);
			//printf(",");
			//printf("%f\r\n", C_filtered);
		  	//printf("%"PRIu32, emg_raw);
		  	printf(",");
 80010e6:	202c      	movs	r0, #44	; 0x2c
 80010e8:	f005 fc2c 	bl	8006944 <putchar>
		  	printf("%f\r\n", stretch_hpf);
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f7ff fa4b 	bl	8000588 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <main+0x18c>)
 80010f8:	f005 fc12 	bl	8006920 <iprintf>
		  	//printf("%f\r\n", C);
		  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2110      	movs	r1, #16
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <main+0x178>)
 8001102:	f002 f963 	bl	80033cc <HAL_GPIO_WritePin>
	  if(adcFlag1 == 1 && adcFlag2 == 1){
 8001106:	e775      	b.n	8000ff4 <main+0x48>
 8001108:	20000370 	.word	0x20000370
 800110c:	20000404 	.word	0x20000404
 8001110:	20000220 	.word	0x20000220
 8001114:	20000408 	.word	0x20000408
 8001118:	20000268 	.word	0x20000268
 800111c:	20000400 	.word	0x20000400
 8001120:	20000401 	.word	0x20000401
 8001124:	40020800 	.word	0x40020800
 8001128:	2000040c 	.word	0x2000040c
 800112c:	20000410 	.word	0x20000410
 8001130:	20000414 	.word	0x20000414
 8001134:	08008da8 	.word	0x08008da8
 8001138:	08008dac 	.word	0x08008dac

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2234      	movs	r2, #52	; 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fc45 	bl	80069da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <SystemClock_Config+0xdc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <SystemClock_Config+0xdc>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <SystemClock_Config+0xdc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <SystemClock_Config+0xe0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <SystemClock_Config+0xe0>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <SystemClock_Config+0xe0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011b0:	23b4      	movs	r3, #180	; 0xb4
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fcb5 	bl	8003b34 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d0:	f000 fa38 	bl	8001644 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d4:	f002 f914 	bl	8003400 <HAL_PWREx_EnableOverDrive>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011de:	f000 fa31 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2105      	movs	r1, #5
 8001200:	4618      	mov	r0, r3
 8001202:	f002 f94d 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800120c:	f000 fa1a 	bl	8001644 <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <MX_ADC1_Init+0xa0>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_ADC1_Init+0x9c>)
 800123a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800123e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_ADC1_Init+0x9c>)
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_ADC1_Init+0x9c>)
 800125c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_ADC1_Init+0x9c>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001272:	2201      	movs	r2, #1
 8001274:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001286:	f000 fd4f 	bl	8001d28 <HAL_ADC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001290:	f000 f9d8 	bl	8001644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001294:	230d      	movs	r3, #13
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800129c:	2307      	movs	r3, #7
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_ADC1_Init+0x9c>)
 80012a6:	f000 ffc1 	bl	800222c <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012b0:	f000 f9c8 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000220 	.word	0x20000220
 80012c0:	40012000 	.word	0x40012000

080012c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012d8:	4a22      	ldr	r2, [pc, #136]	; (8001364 <MX_ADC2_Init+0xa0>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_ADC2_Init+0x9c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_ADC2_Init+0x9c>)
 8001300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_ADC2_Init+0x9c>)
 8001308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_ADC2_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_ADC2_Init+0x9c>)
 8001316:	2201      	movs	r2, #1
 8001318:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_ADC2_Init+0x9c>)
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_ADC2_Init+0x9c>)
 8001324:	2201      	movs	r2, #1
 8001326:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC2_Init+0x9c>)
 800132a:	f000 fcfd 	bl	8001d28 <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001334:	f000 f986 	bl	8001644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001338:	230c      	movs	r3, #12
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001340:	2307      	movs	r3, #7
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_ADC2_Init+0x9c>)
 800134a:	f000 ff6f 	bl	800222c <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001354:	f000 f976 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000268 	.word	0x20000268
 8001364:	40012100 	.word	0x40012100

08001368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_TIM3_Init+0xe4>)
 800139a:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <MX_TIM3_Init+0xe8>)
 800139c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900;
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_TIM3_Init+0xe4>)
 80013a0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <MX_TIM3_Init+0xe4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_TIM3_Init+0xe4>)
 80013ae:	2264      	movs	r2, #100	; 0x64
 80013b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_TIM3_Init+0xe4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_TIM3_Init+0xe4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <MX_TIM3_Init+0xe4>)
 80013c0:	f002 fe56 	bl	8004070 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013ca:	f000 f93b 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d8:	4619      	mov	r1, r3
 80013da:	481c      	ldr	r0, [pc, #112]	; (800144c <MX_TIM3_Init+0xe4>)
 80013dc:	f003 f9dc 	bl	8004798 <HAL_TIM_ConfigClockSource>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013e6:	f000 f92d 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_TIM3_Init+0xe4>)
 80013ec:	f002 ff00 	bl	80041f0 <HAL_TIM_PWM_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013f6:	f000 f925 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013fa:	2320      	movs	r3, #32
 80013fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <MX_TIM3_Init+0xe4>)
 800140a:	f003 fddb 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001414:	f000 f916 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM3_Init+0xe4>)
 8001430:	f003 f8f0 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800143a:	f000 f903 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM3_Init+0xe4>)
 8001440:	f000 fa42 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	; 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000370 	.word	0x20000370
 8001450:	40000400 	.word	0x40000400

08001454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_USART2_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001460:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800148c:	f003 fe2a 	bl	80050e4 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 f8d5 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200003b8 	.word	0x200003b8
 80014a4:	40004400 	.word	0x40004400

080014a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_DMA_Init+0x4c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <MX_DMA_Init+0x4c>)
 80014b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MX_DMA_Init+0x4c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2038      	movs	r0, #56	; 0x38
 80014d0:	f001 fa41 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d4:	2038      	movs	r0, #56	; 0x38
 80014d6:	f001 fa5a 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	203a      	movs	r0, #58	; 0x3a
 80014e0:	f001 fa39 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014e4:	203a      	movs	r0, #58	; 0x3a
 80014e6:	f001 fa52 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2120      	movs	r1, #32
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <MX_GPIO_Init+0xfc>)
 8001584:	f001 ff22 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2110      	movs	r1, #16
 800158c:	481a      	ldr	r0, [pc, #104]	; (80015f8 <MX_GPIO_Init+0x100>)
 800158e:	f001 ff1d 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_GPIO_Init+0x100>)
 80015aa:	f001 fd7b 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ae:	2320      	movs	r3, #32
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <MX_GPIO_Init+0xfc>)
 80015c6:	f001 fd6d 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ca:	2310      	movs	r3, #16
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_GPIO_Init+0x100>)
 80015e2:	f001 fd5f 	bl	80030a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800

080015fc <HAL_ADC_ConvCpltCallback>:
/*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance==TIM3){
		Tim3Flag = 1;
	}
}*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_ADC_ConvCpltCallback+0x38>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d103      	bne.n	8001616 <HAL_ADC_ConvCpltCallback+0x1a>
		adcFlag1 = 1;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
	    }
	else if (hadc->Instance == ADC2){
		adcFlag2 = 1;
		}
}
 8001614:	e007      	b.n	8001626 <HAL_ADC_ConvCpltCallback+0x2a>
	else if (hadc->Instance == ADC2){
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_ADC_ConvCpltCallback+0x40>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_ADC_ConvCpltCallback+0x2a>
		adcFlag2 = 1;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_ADC_ConvCpltCallback+0x44>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40012000 	.word	0x40012000
 8001638:	20000400 	.word	0x20000400
 800163c:	40012100 	.word	0x40012100
 8001640:	20000401 	.word	0x20000401

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168e:	2007      	movs	r0, #7
 8001690:	f001 f956 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_ADC_MspInit+0x1b8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d160      	bne.n	8001784 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a64      	ldr	r2, [pc, #400]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016fa:	2308      	movs	r3, #8
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4854      	ldr	r0, [pc, #336]	; (8001860 <HAL_ADC_MspInit+0x1c0>)
 800170e:	f001 fcc9 	bl	80030a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001712:	4b54      	ldr	r3, [pc, #336]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001714:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_ADC_MspInit+0x1c8>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001718:	4b52      	ldr	r3, [pc, #328]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800172c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800173c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001742:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001756:	4843      	ldr	r0, [pc, #268]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 8001758:	f001 f934 	bl	80029c4 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001762:	f7ff ff6f 	bl	8001644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
 800176c:	4a3d      	ldr	r2, [pc, #244]	; (8001864 <HAL_ADC_MspInit+0x1c4>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2012      	movs	r0, #18
 8001778:	f001 f8ed 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800177c:	2012      	movs	r0, #18
 800177e:	f001 f906 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001782:	e065      	b.n	8001850 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a38      	ldr	r2, [pc, #224]	; (800186c <HAL_ADC_MspInit+0x1cc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d160      	bne.n	8001850 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 8001798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a2a      	ldr	r2, [pc, #168]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_ADC_MspInit+0x1bc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c6:	2304      	movs	r3, #4
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <HAL_ADC_MspInit+0x1c0>)
 80017da:	f001 fc63 	bl	80030a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 80017e0:	4a24      	ldr	r2, [pc, #144]	; (8001874 <HAL_ADC_MspInit+0x1d4>)
 80017e2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 80017e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 80017fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 8001802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001806:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 8001812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001816:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 8001826:	f001 f8cd 	bl	80029c4 <HAL_DMA_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8001830:	f7ff ff08 	bl	8001644 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
 800183a:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_ADC_MspInit+0x1d0>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2012      	movs	r0, #18
 8001846:	f001 f886 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800184a:	2012      	movs	r0, #18
 800184c:	f001 f89f 	bl	800298e <HAL_NVIC_EnableIRQ>
}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40012000 	.word	0x40012000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020800 	.word	0x40020800
 8001864:	200002b0 	.word	0x200002b0
 8001868:	40026410 	.word	0x40026410
 800186c:	40012100 	.word	0x40012100
 8001870:	20000310 	.word	0x20000310
 8001874:	40026440 	.word	0x40026440

08001878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_TIM_Base_MspInit+0x48>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d115      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	201d      	movs	r0, #29
 80018ac:	f001 f853 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018b0:	201d      	movs	r0, #29
 80018b2:	f001 f86c 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11d      	bne.n	8001926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001906:	2310      	movs	r3, #16
 8001908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_TIM_MspPostInit+0x70>)
 8001922:	f001 fbbf 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40000400 	.word	0x40000400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020400 	.word	0x40020400

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_UART_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_UART_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001996:	230c      	movs	r3, #12
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a6:	2307      	movs	r3, #7
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_MspInit+0x8c>)
 80019b2:	f001 fb77 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004400 	.word	0x40004400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f966 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <ADC_IRQHandler+0x14>)
 8001a26:	f000 f9c2 	bl	8001dae <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <ADC_IRQHandler+0x18>)
 8001a2c:	f000 f9bf 	bl	8001dae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000220 	.word	0x20000220
 8001a38:	20000268 	.word	0x20000268

08001a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM3_IRQHandler+0x10>)
 8001a42:	f002 fcf7 	bl	8004434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000370 	.word	0x20000370

08001a50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA2_Stream0_IRQHandler+0x10>)
 8001a56:	f001 f8bb 	bl	8002bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002b0 	.word	0x200002b0

08001a64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA2_Stream2_IRQHandler+0x10>)
 8001a6a:	f001 f8b1 	bl	8002bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000310 	.word	0x20000310

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	f004 fff5 	bl	8006a80 <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2216      	movs	r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe7 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	e7fe      	b.n	8001aba <_exit+0x12>

08001abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ace:	f3af 8000 	nop.w
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
  }

  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f004 ff76 	bl	8006a80 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20020000 	.word	0x20020000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	20000418 	.word	0x20000418
 8001bc8:	200005b8 	.word	0x200005b8

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0xe>
 8001bf4:	f7ff ffea 	bl	8001bcc <SystemInit>
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopFillZerobss+0x1a>)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:
 8001c02:	58d4      	ldr	r4, [r2, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:
 8001c08:	18c4      	adds	r4, r0, r3
 8001c0a:	428c      	cmp	r4, r1
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopFillZerobss+0x1e>)
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopFillZerobss+0x22>)
 8001c12:	2300      	movs	r3, #0
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:
 8001c1a:	42a2      	cmp	r2, r4
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>
 8001c1e:	f004 ff35 	bl	8006a8c <__libc_init_array>
 8001c22:	f7ff f9c3 	bl	8000fac <main>
 8001c26:	4770      	bx	lr
 8001c28:	20020000 	.word	0x20020000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000204 	.word	0x20000204
 8001c34:	08009248 	.word	0x08009248
 8001c38:	20000204 	.word	0x20000204
 8001c3c:	200005b8 	.word	0x200005b8

08001c40 <CAN1_RX0_IRQHandler>:
 8001c40:	e7fe      	b.n	8001c40 <CAN1_RX0_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_Init+0x40>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_Init+0x40>)
 8001c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x40>)
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 fe67 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff fcea 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fe7f 	bl	80029aa <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fe47 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	2000041c 	.word	0x2000041c

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2000041c 	.word	0x2000041c

08001d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e033      	b.n	8001da6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fcaa 	bl	80016a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d6e:	f023 0302 	bic.w	r3, r3, #2
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fb88 	bl	8002490 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
 8001d96:	e001      	b.n	8001d9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d049      	beq.n	8001e78 <HAL_ADC_IRQHandler+0xca>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d046      	beq.n	8001e78 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12b      	bne.n	8001e68 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d127      	bne.n	8001e68 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d119      	bne.n	8001e68 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0220 	bic.w	r2, r2, #32
 8001e42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fbc7 	bl	80015fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f06f 0212 	mvn.w	r2, #18
 8001e76:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d057      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x190>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d054      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d139      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d12b      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d124      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11d      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f08:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fc2c 	bl	800278c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 020c 	mvn.w	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x1d6>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d014      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10d      	bne.n	8001f84 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f945 	bl	8002204 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0201 	mvn.w	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f92:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d015      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x218>
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f043 0202 	orr.w	r2, r3, #2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0220 	mvn.w	r2, #32
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f92e 	bl	8002218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0220 	mvn.w	r2, #32
 8001fc4:	601a      	str	r2, [r3, #0]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Start_DMA+0x1e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e0e9      	b.n	80021c2 <HAL_ADC_Start_DMA+0x1f2>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d018      	beq.n	8002036 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002014:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <HAL_ADC_Start_DMA+0x1fc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6d      	ldr	r2, [pc, #436]	; (80021d0 <HAL_ADC_Start_DMA+0x200>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9a      	lsrs	r2, r3, #18
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002028:	e002      	b.n	8002030 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	3b01      	subs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002044:	d107      	bne.n	8002056 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	f040 80a1 	bne.w	80021a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002090:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a4:	d106      	bne.n	80020b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f023 0206 	bic.w	r2, r3, #6
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
 80020b2:	e002      	b.n	80020ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <HAL_ADC_Start_DMA+0x204>)
 80020c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4a43      	ldr	r2, [pc, #268]	; (80021d8 <HAL_ADC_Start_DMA+0x208>)
 80020cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	4a42      	ldr	r2, [pc, #264]	; (80021dc <HAL_ADC_Start_DMA+0x20c>)
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_ADC_Start_DMA+0x210>)
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002106:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	334c      	adds	r3, #76	; 0x4c
 8002112:	4619      	mov	r1, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f000 fd02 	bl	8002b20 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b00      	cmp	r3, #0
 8002126:	d12a      	bne.n	800217e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2d      	ldr	r2, [pc, #180]	; (80021e4 <HAL_ADC_Start_DMA+0x214>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d015      	beq.n	800215e <HAL_ADC_Start_DMA+0x18e>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <HAL_ADC_Start_DMA+0x218>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d105      	bne.n	8002148 <HAL_ADC_Start_DMA+0x178>
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_ADC_Start_DMA+0x204>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_ADC_Start_DMA+0x21c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d136      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_ADC_Start_DMA+0x204>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d130      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d129      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e020      	b.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ADC_Start_DMA+0x214>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d11b      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d114      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	e00b      	b.n	80021c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	40012300 	.word	0x40012300
 80021d8:	08002689 	.word	0x08002689
 80021dc:	08002743 	.word	0x08002743
 80021e0:	0800275f 	.word	0x0800275f
 80021e4:	40012000 	.word	0x40012000
 80021e8:	40012100 	.word	0x40012100
 80021ec:	40012200 	.word	0x40012200

080021f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1c>
 8002244:	2302      	movs	r3, #2
 8002246:	e113      	b.n	8002470 <HAL_ADC_ConfigChannel+0x244>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d925      	bls.n	80022a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68d9      	ldr	r1, [r3, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	3b1e      	subs	r3, #30
 800226e:	2207      	movs	r2, #7
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43da      	mvns	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	400a      	ands	r2, r1
 800227c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68d9      	ldr	r1, [r3, #12]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	4603      	mov	r3, r0
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4403      	add	r3, r0
 8002296:	3b1e      	subs	r3, #30
 8002298:	409a      	lsls	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	e022      	b.n	80022ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6919      	ldr	r1, [r3, #16]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	2207      	movs	r2, #7
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	400a      	ands	r2, r1
 80022c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4403      	add	r3, r0
 80022e0:	409a      	lsls	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d824      	bhi.n	800233c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b05      	subs	r3, #5
 8002304:	221f      	movs	r2, #31
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	400a      	ands	r2, r1
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	3b05      	subs	r3, #5
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	635a      	str	r2, [r3, #52]	; 0x34
 800233a:	e04c      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d824      	bhi.n	800238e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b23      	subs	r3, #35	; 0x23
 8002356:	221f      	movs	r2, #31
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43da      	mvns	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	400a      	ands	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b23      	subs	r3, #35	; 0x23
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
 800238c:	e023      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3b41      	subs	r3, #65	; 0x41
 80023a0:	221f      	movs	r2, #31
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	400a      	ands	r2, r1
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b41      	subs	r3, #65	; 0x41
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_ADC_ConfigChannel+0x250>)
 80023d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a28      	ldr	r2, [pc, #160]	; (8002480 <HAL_ADC_ConfigChannel+0x254>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d10f      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d8>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_ADC_ConfigChannel+0x254>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12b      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x23a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_ADC_ConfigChannel+0x258>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <HAL_ADC_ConfigChannel+0x1f4>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b11      	cmp	r3, #17
 800241e:	d122      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_ADC_ConfigChannel+0x258>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d111      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_ADC_ConfigChannel+0x25c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_ADC_ConfigChannel+0x260>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9a      	lsrs	r2, r3, #18
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012300 	.word	0x40012300
 8002480:	40012000 	.word	0x40012000
 8002484:	10000012 	.word	0x10000012
 8002488:	20000000 	.word	0x20000000
 800248c:	431bde83 	.word	0x431bde83

08002490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002498:	4b79      	ldr	r3, [pc, #484]	; (8002680 <ADC_Init+0x1f0>)
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <ADC_Init+0x1f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e00f      	b.n	800258e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800257c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800258c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0202 	bic.w	r2, r2, #2
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e1b      	ldrb	r3, [r3, #24]
 80025a8:	005a      	lsls	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	035a      	lsls	r2, r3, #13
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e007      	b.n	8002604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	3b01      	subs	r3, #1
 8002620:	051a      	lsls	r2, r3, #20
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002646:	025a      	lsls	r2, r3, #9
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	029a      	lsls	r2, r3, #10
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40012300 	.word	0x40012300
 8002684:	0f000001 	.word	0x0f000001

08002688 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13c      	bne.n	800271c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12b      	bne.n	8002714 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d127      	bne.n	8002714 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d119      	bne.n	8002714 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0220 	bic.w	r2, r2, #32
 80026ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7fe ff71 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800271a:	e00e      	b.n	800273a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fd75 	bl	8002218 <HAL_ADC_ErrorCallback>
}
 800272e:	e004      	b.n	800273a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fd4d 	bl	80021f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fd4a 	bl	8002218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff f99e 	bl	8001d10 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff f985 	bl	8001d10 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa6f 	bl	8002fac <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa26 	bl	8002f40 <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f010803f 	.word	0xf010803f

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e040      	b.n	8002bc8 <HAL_DMA_Start_IT+0xa8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12f      	bne.n	8002bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9b8 	bl	8002ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0216 	orr.w	r2, r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bdc:	4b8e      	ldr	r3, [pc, #568]	; (8002e18 <HAL_DMA_IRQHandler+0x248>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a8e      	ldr	r2, [pc, #568]	; (8002e1c <HAL_DMA_IRQHandler+0x24c>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0a9b      	lsrs	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01a      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2208      	movs	r2, #8
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2201      	movs	r2, #1
 8002c60:	409a      	lsls	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	2204      	movs	r2, #4
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d012      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2204      	movs	r2, #4
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	2210      	movs	r2, #16
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d043      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03c      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2210      	movs	r2, #16
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d024      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
 8002cfe:	e01f      	b.n	8002d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e016      	b.n	8002d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0208 	bic.w	r2, r2, #8
 8002d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2220      	movs	r2, #32
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 808f 	beq.w	8002e70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8087 	beq.w	8002e70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	2220      	movs	r2, #32
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d136      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0216 	bic.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_DMA_IRQHandler+0x1da>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	223f      	movs	r2, #63	; 0x3f
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d07e      	beq.n	8002edc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
        }
        return;
 8002de6:	e079      	b.n	8002edc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d031      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	e02c      	b.n	8002e70 <HAL_DMA_IRQHandler+0x2a0>
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
 8002e30:	e01e      	b.n	8002e70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0210 	bic.w	r2, r2, #16
 8002e4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d032      	beq.n	8002ede <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2205      	movs	r2, #5
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d307      	bcc.n	8002eb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f2      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x2cc>
 8002eb6:	e000      	b.n	8002eba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002eb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
 8002eda:	e000      	b.n	8002ede <HAL_DMA_IRQHandler+0x30e>
        return;
 8002edc:	bf00      	nop
    }
  }
}
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d108      	bne.n	8002f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f22:	e007      	b.n	8002f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3b10      	subs	r3, #16
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d909      	bls.n	8002f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f80:	e007      	b.n	8002f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	aaaaaaab 	.word	0xaaaaaaab
 8002fa8:	08008e8c 	.word	0x08008e8c

08002fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11f      	bne.n	8003006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d856      	bhi.n	800307a <DMA_CheckFifoParam+0xce>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <DMA_CheckFifoParam+0x28>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002fe5 	.word	0x08002fe5
 8002fd8:	08002ff7 	.word	0x08002ff7
 8002fdc:	08002fe5 	.word	0x08002fe5
 8002fe0:	0800307b 	.word	0x0800307b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d046      	beq.n	800307e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff4:	e043      	b.n	800307e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ffe:	d140      	bne.n	8003082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e03d      	b.n	8003082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300e:	d121      	bne.n	8003054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d837      	bhi.n	8003086 <DMA_CheckFifoParam+0xda>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <DMA_CheckFifoParam+0x70>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003033 	.word	0x08003033
 8003024:	0800302d 	.word	0x0800302d
 8003028:	08003045 	.word	0x08003045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e030      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d025      	beq.n	800308a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003042:	e022      	b.n	800308a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800304c:	d11f      	bne.n	800308e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003052:	e01c      	b.n	800308e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d903      	bls.n	8003062 <DMA_CheckFifoParam+0xb6>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d003      	beq.n	8003068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003060:	e018      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      break;
 8003066:	e015      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e00b      	b.n	8003092 <DMA_CheckFifoParam+0xe6>
      break;
 800307a:	bf00      	nop
 800307c:	e00a      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;
 800307e:	bf00      	nop
 8003080:	e008      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;
 8003082:	bf00      	nop
 8003084:	e006      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;
 8003086:	bf00      	nop
 8003088:	e004      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;
 800308a:	bf00      	nop
 800308c:	e002      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;   
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
    }
  } 
  
  return status; 
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e165      	b.n	800338c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 8154 	bne.w	8003386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d005      	beq.n	80030f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d130      	bne.n	8003158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312c:	2201      	movs	r2, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0201 	and.w	r2, r3, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d017      	beq.n	8003194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80ae 	beq.w	8003386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a5c      	ldr	r2, [pc, #368]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_GPIO_Init+0x300>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003246:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_GPIO_Init+0x304>)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4f      	ldr	r2, [pc, #316]	; (80033ac <HAL_GPIO_Init+0x308>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x21a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4e      	ldr	r2, [pc, #312]	; (80033b0 <HAL_GPIO_Init+0x30c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x216>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <HAL_GPIO_Init+0x310>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x212>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <HAL_GPIO_Init+0x314>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_GPIO_Init+0x318>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x20a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_GPIO_Init+0x31c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x206>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x202>
 80032a2:	2306      	movs	r3, #6
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032be:	2300      	movs	r3, #0
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d0:	4935      	ldr	r1, [pc, #212]	; (80033a8 <HAL_GPIO_Init+0x304>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_GPIO_Init+0x324>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003302:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_GPIO_Init+0x324>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_GPIO_Init+0x324>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <HAL_GPIO_Init+0x324>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_GPIO_Init+0x324>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_GPIO_Init+0x324>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_GPIO_Init+0x324>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_GPIO_Init+0x324>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	f67f ae96 	bls.w	80030c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40013800 	.word	0x40013800
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020c00 	.word	0x40020c00
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40021400 	.word	0x40021400
 80033c4:	40021800 	.word	0x40021800
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	4613      	mov	r3, r2
 80033da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033dc:	787b      	ldrb	r3, [r7, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e8:	e003      	b.n	80033f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_PWREx_EnableOverDrive+0x90>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_PWREx_EnableOverDrive+0x90>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_PWREx_EnableOverDrive+0x90>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_PWREx_EnableOverDrive+0x94>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342c:	f7fe fc70 	bl	8001d10 <HAL_GetTick>
 8003430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003432:	e009      	b.n	8003448 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003434:	f7fe fc6c 	bl	8001d10 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003442:	d901      	bls.n	8003448 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e01f      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_PWREx_EnableOverDrive+0x98>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d1ee      	bne.n	8003434 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800345c:	f7fe fc58 	bl	8001d10 <HAL_GetTick>
 8003460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003462:	e009      	b.n	8003478 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003464:	f7fe fc54 	bl	8001d10 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003472:	d901      	bls.n	8003478 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e007      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_PWREx_EnableOverDrive+0x98>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003484:	d1ee      	bne.n	8003464 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	420e0040 	.word	0x420e0040
 8003498:	40007000 	.word	0x40007000
 800349c:	420e0044 	.word	0x420e0044

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0cc      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b68      	ldr	r3, [pc, #416]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d90c      	bls.n	80034dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b8      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	494d      	ldr	r1, [pc, #308]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d044      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d119      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d003      	beq.n	800355e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e067      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4934      	ldr	r1, [pc, #208]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe fbbe 	bl	8001d10 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe fbba 	bl	8001d10 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e04f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20c      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e032      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4916      	ldr	r1, [pc, #88]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490e      	ldr	r1, [pc, #56]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003626:	f000 f855 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 800362a:	4602      	mov	r2, r0
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	490a      	ldr	r1, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	5ccb      	ldrb	r3, [r1, r3]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fb1e 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00
 800365c:	40023800 	.word	0x40023800
 8003660:	08008e74 	.word	0x08008e74
 8003664:	20000000 	.word	0x20000000
 8003668:	20000004 	.word	0x20000004

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4903      	ldr	r1, [pc, #12]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08008e84 	.word	0x08008e84

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff ffdc 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08008e84 	.word	0x08008e84

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b0ae      	sub	sp, #184	; 0xb8
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fa:	4bcb      	ldr	r3, [pc, #812]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b0c      	cmp	r3, #12
 8003704:	f200 8206 	bhi.w	8003b14 <HAL_RCC_GetSysClockFreq+0x440>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_RCC_GetSysClockFreq+0x3c>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003745 	.word	0x08003745
 8003714:	08003b15 	.word	0x08003b15
 8003718:	08003b15 	.word	0x08003b15
 800371c:	08003b15 	.word	0x08003b15
 8003720:	0800374d 	.word	0x0800374d
 8003724:	08003b15 	.word	0x08003b15
 8003728:	08003b15 	.word	0x08003b15
 800372c:	08003b15 	.word	0x08003b15
 8003730:	08003755 	.word	0x08003755
 8003734:	08003b15 	.word	0x08003b15
 8003738:	08003b15 	.word	0x08003b15
 800373c:	08003b15 	.word	0x08003b15
 8003740:	08003945 	.word	0x08003945
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4bb9      	ldr	r3, [pc, #740]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800374a:	e1e7      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4bb8      	ldr	r3, [pc, #736]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800374e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003752:	e1e3      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003754:	4bb4      	ldr	r3, [pc, #720]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003760:	4bb1      	ldr	r3, [pc, #708]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d071      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4bae      	ldr	r3, [pc, #696]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003778:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800377c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800378e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	f04f 0000 	mov.w	r0, #0
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	0159      	lsls	r1, r3, #5
 80037a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a4:	0150      	lsls	r0, r2, #5
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4621      	mov	r1, r4
 80037ac:	1a51      	subs	r1, r2, r1
 80037ae:	6439      	str	r1, [r7, #64]	; 0x40
 80037b0:	4629      	mov	r1, r5
 80037b2:	eb63 0301 	sbc.w	r3, r3, r1
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037c4:	4649      	mov	r1, r9
 80037c6:	018b      	lsls	r3, r1, #6
 80037c8:	4641      	mov	r1, r8
 80037ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ce:	4641      	mov	r1, r8
 80037d0:	018a      	lsls	r2, r1, #6
 80037d2:	4641      	mov	r1, r8
 80037d4:	1a51      	subs	r1, r2, r1
 80037d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d8:	4649      	mov	r1, r9
 80037da:	eb63 0301 	sbc.w	r3, r3, r1
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037ec:	4649      	mov	r1, r9
 80037ee:	00cb      	lsls	r3, r1, #3
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f6:	4641      	mov	r1, r8
 80037f8:	00ca      	lsls	r2, r1, #3
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	4622      	mov	r2, r4
 8003802:	189b      	adds	r3, r3, r2
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
 8003806:	462b      	mov	r3, r5
 8003808:	460a      	mov	r2, r1
 800380a:	eb42 0303 	adc.w	r3, r2, r3
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800381c:	4629      	mov	r1, r5
 800381e:	024b      	lsls	r3, r1, #9
 8003820:	4621      	mov	r1, r4
 8003822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003826:	4621      	mov	r1, r4
 8003828:	024a      	lsls	r2, r1, #9
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800383c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003840:	f7fd fa22 	bl	8000c88 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800384e:	e067      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003850:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800385c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	67bb      	str	r3, [r7, #120]	; 0x78
 800386a:	2300      	movs	r3, #0
 800386c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800386e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4621      	mov	r1, r4
 800388c:	1a51      	subs	r1, r2, r1
 800388e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003890:	4629      	mov	r1, r5
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038a4:	4649      	mov	r1, r9
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ae:	4641      	mov	r1, r8
 80038b0:	018a      	lsls	r2, r1, #6
 80038b2:	4641      	mov	r1, r8
 80038b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b8:	4649      	mov	r1, r9
 80038ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d2:	4692      	mov	sl, r2
 80038d4:	469b      	mov	fp, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	eb1a 0303 	adds.w	r3, sl, r3
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	462b      	mov	r3, r5
 80038e0:	eb4b 0303 	adc.w	r3, fp, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003908:	2200      	movs	r2, #0
 800390a:	673b      	str	r3, [r7, #112]	; 0x70
 800390c:	677a      	str	r2, [r7, #116]	; 0x74
 800390e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003912:	f7fd f9b9 	bl	8000c88 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003942:	e0eb      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800394c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d06b      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x354>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	2200      	movs	r2, #0
 8003964:	66bb      	str	r3, [r7, #104]	; 0x68
 8003966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	663b      	str	r3, [r7, #96]	; 0x60
 8003970:	2300      	movs	r3, #0
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
 8003974:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	f04f 0000 	mov.w	r0, #0
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	0159      	lsls	r1, r3, #5
 8003986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398a:	0150      	lsls	r0, r2, #5
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4621      	mov	r1, r4
 8003992:	1a51      	subs	r1, r2, r1
 8003994:	61b9      	str	r1, [r7, #24]
 8003996:	4629      	mov	r1, r5
 8003998:	eb63 0301 	sbc.w	r3, r3, r1
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039aa:	4659      	mov	r1, fp
 80039ac:	018b      	lsls	r3, r1, #6
 80039ae:	4651      	mov	r1, sl
 80039b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b4:	4651      	mov	r1, sl
 80039b6:	018a      	lsls	r2, r1, #6
 80039b8:	4651      	mov	r1, sl
 80039ba:	ebb2 0801 	subs.w	r8, r2, r1
 80039be:	4659      	mov	r1, fp
 80039c0:	eb63 0901 	sbc.w	r9, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d8:	4690      	mov	r8, r2
 80039da:	4699      	mov	r9, r3
 80039dc:	4623      	mov	r3, r4
 80039de:	eb18 0303 	adds.w	r3, r8, r3
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039f8:	4629      	mov	r1, r5
 80039fa:	024b      	lsls	r3, r1, #9
 80039fc:	4621      	mov	r1, r4
 80039fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a02:	4621      	mov	r1, r4
 8003a04:	024a      	lsls	r2, r1, #9
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a0e:	2200      	movs	r2, #0
 8003a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a18:	f7fd f936 	bl	8000c88 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a26:	e065      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x420>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	4611      	mov	r1, r2
 8003a40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
 8003a46:	2300      	movs	r3, #0
 8003a48:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a4e:	4642      	mov	r2, r8
 8003a50:	464b      	mov	r3, r9
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	0159      	lsls	r1, r3, #5
 8003a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a60:	0150      	lsls	r0, r2, #5
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4641      	mov	r1, r8
 8003a68:	1a51      	subs	r1, r2, r1
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a80:	4659      	mov	r1, fp
 8003a82:	018b      	lsls	r3, r1, #6
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	018a      	lsls	r2, r1, #6
 8003a8e:	4651      	mov	r1, sl
 8003a90:	1a54      	subs	r4, r2, r1
 8003a92:	4659      	mov	r1, fp
 8003a94:	eb63 0501 	sbc.w	r5, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	00eb      	lsls	r3, r5, #3
 8003aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa6:	00e2      	lsls	r2, r4, #3
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	461d      	mov	r5, r3
 8003aac:	4643      	mov	r3, r8
 8003aae:	18e3      	adds	r3, r4, r3
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	eb45 0303 	adc.w	r3, r5, r3
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003adc:	2200      	movs	r2, #0
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ae2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ae6:	f7fd f8cf 	bl	8000c88 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0f1b      	lsrs	r3, r3, #28
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b12:	e003      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	37b8      	adds	r7, #184	; 0xb8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00f42400 	.word	0x00f42400

08003b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e28d      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8083 	beq.w	8003c5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b54:	4b94      	ldr	r3, [pc, #592]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d019      	beq.n	8003b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b60:	4b91      	ldr	r3, [pc, #580]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b6c:	4b8e      	ldr	r3, [pc, #568]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b78:	d00c      	beq.n	8003b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7a:	4b8b      	ldr	r3, [pc, #556]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d112      	bne.n	8003bac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4b88      	ldr	r3, [pc, #544]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b92:	d10b      	bne.n	8003bac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	4b84      	ldr	r3, [pc, #528]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d05b      	beq.n	8003c58 <HAL_RCC_OscConfig+0x124>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d157      	bne.n	8003c58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e25a      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x90>
 8003bb6:	4b7c      	ldr	r3, [pc, #496]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7b      	ldr	r2, [pc, #492]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e01d      	b.n	8003c00 <HAL_RCC_OscConfig+0xcc>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0xb4>
 8003bce:	4b76      	ldr	r3, [pc, #472]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a75      	ldr	r2, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a72      	ldr	r2, [pc, #456]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0xcc>
 8003be8:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6e      	ldr	r2, [pc, #440]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b6c      	ldr	r3, [pc, #432]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6b      	ldr	r2, [pc, #428]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe f882 	bl	8001d10 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe f87e 	bl	8001d10 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e21f      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0xdc>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe f86e 	bl	8001d10 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe f86a 	bl	8001d10 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e20b      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4a:	4b57      	ldr	r3, [pc, #348]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x104>
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06f      	beq.n	8003d46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c66:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d017      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c72:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d11c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d116      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x186>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e1d3      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	e03a      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd8:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x278>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fe f817 	bl	8001d10 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fe f813 	bl	8001d10 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1b4      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4925      	ldr	r1, [pc, #148]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_OscConfig+0x278>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fff6 	bl	8001d10 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d28:	f7fd fff2 	bl	8001d10 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e193      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d036      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd ffd6 	bl	8001d10 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fd ffd2 	bl	8001d10 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e173      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x234>
 8003d86:	e01b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd ffbf 	bl	8001d10 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	e00e      	b.n	8003db4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fd ffbb 	bl	8001d10 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d907      	bls.n	8003db4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e15c      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470000 	.word	0x42470000
 8003db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	4b8a      	ldr	r3, [pc, #552]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ea      	bne.n	8003d96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8097 	beq.w	8003efc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b83      	ldr	r3, [pc, #524]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b7f      	ldr	r3, [pc, #508]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a7e      	ldr	r2, [pc, #504]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b7c      	ldr	r3, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b79      	ldr	r3, [pc, #484]	; (8003fe4 <HAL_RCC_OscConfig+0x4b0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x4b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	; (8003fe4 <HAL_RCC_OscConfig+0x4b0>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fd ff7b 	bl	8001d10 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fd ff77 	bl	8001d10 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e118      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x4b0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x31e>
 8003e44:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a65      	ldr	r2, [pc, #404]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e01c      	b.n	8003e8c <HAL_RCC_OscConfig+0x358>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x340>
 8003e5a:	4b61      	ldr	r3, [pc, #388]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a60      	ldr	r2, [pc, #384]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b5e      	ldr	r3, [pc, #376]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0x358>
 8003e74:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a59      	ldr	r2, [pc, #356]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a56      	ldr	r2, [pc, #344]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	f023 0304 	bic.w	r3, r3, #4
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd ff3c 	bl	8001d10 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd ff38 	bl	8001d10 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0d7      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ee      	beq.n	8003e9c <HAL_RCC_OscConfig+0x368>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd ff26 	bl	8001d10 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd ff22 	bl	8001d10 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0c1      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ede:	4b40      	ldr	r3, [pc, #256]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80ad 	beq.w	8004060 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d060      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d145      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <HAL_RCC_OscConfig+0x4b4>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fef6 	bl	8001d10 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd fef2 	bl	8001d10 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e093      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	491b      	ldr	r1, [pc, #108]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4b4>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fec7 	bl	8001d10 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd fec3 	bl	8001d10 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e064      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x452>
 8003fa4:	e05c      	b.n	8004060 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <HAL_RCC_OscConfig+0x4b4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd feb0 	bl	8001d10 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fd feac 	bl	8001d10 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e04d      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x480>
 8003fd2:	e045      	b.n	8004060 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e040      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_RCC_OscConfig+0x538>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d030      	beq.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d129      	bne.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d122      	bne.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004024:	4293      	cmp	r3, r2
 8004026:	d119      	bne.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d10f      	bne.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800

08004070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fbee 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fc6c 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e04e      	b.n	80041c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d01d      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_TIM_Base_Start_IT+0xdc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d111      	bne.n	80041b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d010      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	e007      	b.n	80041c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40001800 	.word	0x40001800

080041f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f839 	bl	800428e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fbac 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_TIM_PWM_Start+0x24>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e022      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d109      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x3e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e015      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x58>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e07c      	b.n	8004410 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0x82>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	e013      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Start+0x92>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	e00b      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xa2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004344:	e003      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fe0e 	bl	8004f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_TIM_PWM_Start+0x174>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_PWM_Start+0xcc>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2c      	ldr	r2, [pc, #176]	; (800441c <HAL_TIM_PWM_Start+0x178>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d101      	bne.n	8004374 <HAL_TIM_PWM_Start+0xd0>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_TIM_PWM_Start+0xd2>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_TIM_PWM_Start+0x174>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d01d      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_TIM_PWM_Start+0x17c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_TIM_PWM_Start+0x180>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_TIM_PWM_Start+0x184>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_PWM_Start+0x178>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_TIM_PWM_Start+0x188>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIM_PWM_Start+0x136>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a16      	ldr	r2, [pc, #88]	; (8004430 <HAL_TIM_PWM_Start+0x18c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d111      	bne.n	80043fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d010      	beq.n	800440e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	e007      	b.n	800440e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40010000 	.word	0x40010000
 800441c:	40010400 	.word	0x40010400
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000
 8004430:	40001800 	.word	0x40001800

08004434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d020      	beq.n	8004498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01b      	beq.n	8004498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0202 	mvn.w	r2, #2
 8004468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa65 	bl	800494e <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa57 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fa68 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d020      	beq.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0204 	mvn.w	r2, #4
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa3f 	bl	800494e <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa31 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fa42 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa19 	bl	800494e <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa0b 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa1c 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9f3 	bl	800494e <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9e5 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9f6 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0201 	mvn.w	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9c3 	bl	8004926 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fd86 	bl	80050d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f9c7 	bl	8004976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0220 	mvn.w	r2, #32
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fd58 	bl	80050bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0ae      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	f200 809f 	bhi.w	8004780 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800467d 	.word	0x0800467d
 800464c:	08004781 	.word	0x08004781
 8004650:	08004781 	.word	0x08004781
 8004654:	08004781 	.word	0x08004781
 8004658:	080046bd 	.word	0x080046bd
 800465c:	08004781 	.word	0x08004781
 8004660:	08004781 	.word	0x08004781
 8004664:	08004781 	.word	0x08004781
 8004668:	080046ff 	.word	0x080046ff
 800466c:	08004781 	.word	0x08004781
 8004670:	08004781 	.word	0x08004781
 8004674:	08004781 	.word	0x08004781
 8004678:	0800473f 	.word	0x0800473f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fa2e 	bl	8004ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
      break;
 80046ba:	e064      	b.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa7e 	bl	8004bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	619a      	str	r2, [r3, #24]
      break;
 80046fc:	e043      	b.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fad3 	bl	8004cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0208 	orr.w	r2, r2, #8
 8004718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0204 	bic.w	r2, r2, #4
 8004728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	61da      	str	r2, [r3, #28]
      break;
 800473c:	e023      	b.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb27 	bl	8004d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	61da      	str	r2, [r3, #28]
      break;
 800477e:	e002      	b.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
      break;
 8004784:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_ConfigClockSource+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0b4      	b.n	800491e <HAL_TIM_ConfigClockSource+0x186>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ec:	d03e      	beq.n	800486c <HAL_TIM_ConfigClockSource+0xd4>
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	f200 8087 	bhi.w	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	f000 8086 	beq.w	800490a <HAL_TIM_ConfigClockSource+0x172>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	d87f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b70      	cmp	r3, #112	; 0x70
 8004806:	d01a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xa6>
 8004808:	2b70      	cmp	r3, #112	; 0x70
 800480a:	d87b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d050      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004810:	2b60      	cmp	r3, #96	; 0x60
 8004812:	d877      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b50      	cmp	r3, #80	; 0x50
 8004816:	d03c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0xfa>
 8004818:	2b50      	cmp	r3, #80	; 0x50
 800481a:	d873      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d058      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d86f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d064      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d86b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d060      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d867      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d05c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d05a      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	e062      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	f000 fb73 	bl	8004f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	609a      	str	r2, [r3, #8]
      break;
 800486a:	e04f      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800487c:	f000 fb5c 	bl	8004f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488e:	609a      	str	r2, [r3, #8]
      break;
 8004890:	e03c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fad0 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2150      	movs	r1, #80	; 0x50
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb29 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e02c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 faef 	bl	8004ea2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2160      	movs	r1, #96	; 0x60
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb19 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e01c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fab0 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2140      	movs	r1, #64	; 0x40
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fb09 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e00c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fb00 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004902:	e003      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	e000      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800490a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <TIM_Base_SetConfig+0x12c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a43      	ldr	r2, [pc, #268]	; (8004abc <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a42      	ldr	r2, [pc, #264]	; (8004ac0 <TIM_Base_SetConfig+0x134>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <TIM_Base_SetConfig+0x138>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a40      	ldr	r2, [pc, #256]	; (8004ac8 <TIM_Base_SetConfig+0x13c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d027      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a32      	ldr	r2, [pc, #200]	; (8004abc <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d023      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a31      	ldr	r2, [pc, #196]	; (8004ac0 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01f      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d017      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <TIM_Base_SetConfig+0x140>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2d      	ldr	r2, [pc, #180]	; (8004ad0 <TIM_Base_SetConfig+0x144>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <TIM_Base_SetConfig+0x148>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <TIM_Base_SetConfig+0x14c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	; (8004adc <TIM_Base_SetConfig+0x150>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <TIM_Base_SetConfig+0x154>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <TIM_Base_SetConfig+0x12c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0xf8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <TIM_Base_SetConfig+0x13c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d103      	bne.n	8004a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800
 8004ad8:	40001800 	.word	0x40001800
 8004adc:	40001c00 	.word	0x40001c00
 8004ae0:	40002000 	.word	0x40002000

08004ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f023 0201 	bic.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <TIM_OC1_SetConfig+0xd8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC1_SetConfig+0x64>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <TIM_OC1_SetConfig+0xdc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0308 	bic.w	r3, r3, #8
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <TIM_OC1_SetConfig+0xd8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC1_SetConfig+0x8e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <TIM_OC1_SetConfig+0xdc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d111      	bne.n	8004b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0320 	bic.w	r3, r3, #32
 8004c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <TIM_OC2_SetConfig+0xe4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC2_SetConfig+0x68>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a21      	ldr	r2, [pc, #132]	; (8004cac <TIM_OC2_SetConfig+0xe8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10d      	bne.n	8004c48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <TIM_OC2_SetConfig+0xe4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC2_SetConfig+0x94>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <TIM_OC2_SetConfig+0xe8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d113      	bne.n	8004c80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40010400 	.word	0x40010400

08004cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <TIM_OC3_SetConfig+0xe0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC3_SetConfig+0x66>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <TIM_OC3_SetConfig+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10d      	bne.n	8004d32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <TIM_OC3_SetConfig+0xe0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC3_SetConfig+0x92>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <TIM_OC3_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d113      	bne.n	8004d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	621a      	str	r2, [r3, #32]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40010400 	.word	0x40010400

08004d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <TIM_OC4_SetConfig+0xa4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC4_SetConfig+0x68>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <TIM_OC4_SetConfig+0xa8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d109      	bne.n	8004e14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400

08004e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 030a 	bic.w	r3, r3, #10
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f023 0210 	bic.w	r2, r3, #16
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ede:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f043 0307 	orr.w	r3, r3, #7
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e05a      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d01d      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40001800 	.word	0x40001800

080050bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e042      	b.n	800517c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc fc16 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f973 	bl	8005414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800515c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d175      	bne.n	8005290 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_Transmit+0x2c>
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e06e      	b.n	8005292 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2221      	movs	r2, #33	; 0x21
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c2:	f7fc fda5 	bl	8001d10 <HAL_GetTick>
 80051c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	d108      	bne.n	80051f0 <HAL_UART_Transmit+0x6c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e003      	b.n	80051f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051f8:	e02e      	b.n	8005258 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f848 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e03a      	b.n	8005292 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3302      	adds	r3, #2
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e007      	b.n	800524a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1cb      	bne.n	80051fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	2140      	movs	r1, #64	; 0x40
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f814 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e006      	b.n	8005292 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	e03b      	b.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d037      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fc fd2c 	bl	8001d10 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <UART_WaitOnFlagUntilTimeout+0x30>
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e03a      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d023      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d020      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d01d      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d116      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f81d 	bl	800534c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2208      	movs	r2, #8
 8005316:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e00f      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	429a      	cmp	r2, r3
 8005340:	d0b4      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b095      	sub	sp, #84	; 0x54
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005374:	643a      	str	r2, [r7, #64]	; 0x40
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800537a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	61fb      	str	r3, [r7, #28]
   return(result);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3314      	adds	r3, #20
 80053a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d119      	bne.n	80053f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	647b      	str	r3, [r7, #68]	; 0x44
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	61ba      	str	r2, [r7, #24]
 80053e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	613b      	str	r3, [r7, #16]
   return(result);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e5      	bne.n	80053c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005406:	bf00      	nop
 8005408:	3754      	adds	r7, #84	; 0x54
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b0c0      	sub	sp, #256	; 0x100
 800541a:	af00      	add	r7, sp, #0
 800541c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	ea40 0301 	orr.w	r3, r0, r1
 800543c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	431a      	orrs	r2, r3
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	431a      	orrs	r2, r3
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800546c:	f021 010c 	bic.w	r1, r1, #12
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547a:	430b      	orrs	r3, r1
 800547c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	6999      	ldr	r1, [r3, #24]
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	ea40 0301 	orr.w	r3, r0, r1
 800549a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b8f      	ldr	r3, [pc, #572]	; (80056e0 <UART_SetConfig+0x2cc>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d005      	beq.n	80054b4 <UART_SetConfig+0xa0>
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <UART_SetConfig+0x2d0>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d104      	bne.n	80054be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fe f8fa 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 80054b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054bc:	e003      	b.n	80054c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054be:	f7fe f8e1 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80054c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	f040 810c 	bne.w	80056ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054e6:	4622      	mov	r2, r4
 80054e8:	462b      	mov	r3, r5
 80054ea:	1891      	adds	r1, r2, r2
 80054ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ee:	415b      	adcs	r3, r3
 80054f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f6:	4621      	mov	r1, r4
 80054f8:	eb12 0801 	adds.w	r8, r2, r1
 80054fc:	4629      	mov	r1, r5
 80054fe:	eb43 0901 	adc.w	r9, r3, r1
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005516:	4690      	mov	r8, r2
 8005518:	4699      	mov	r9, r3
 800551a:	4623      	mov	r3, r4
 800551c:	eb18 0303 	adds.w	r3, r8, r3
 8005520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005524:	462b      	mov	r3, r5
 8005526:	eb49 0303 	adc.w	r3, r9, r3
 800552a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800553a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800553e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005542:	460b      	mov	r3, r1
 8005544:	18db      	adds	r3, r3, r3
 8005546:	653b      	str	r3, [r7, #80]	; 0x50
 8005548:	4613      	mov	r3, r2
 800554a:	eb42 0303 	adc.w	r3, r2, r3
 800554e:	657b      	str	r3, [r7, #84]	; 0x54
 8005550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005558:	f7fb fb96 	bl	8000c88 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4b61      	ldr	r3, [pc, #388]	; (80056e8 <UART_SetConfig+0x2d4>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011c      	lsls	r4, r3, #4
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	1891      	adds	r1, r2, r2
 8005582:	64b9      	str	r1, [r7, #72]	; 0x48
 8005584:	415b      	adcs	r3, r3
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800558c:	4641      	mov	r1, r8
 800558e:	eb12 0a01 	adds.w	sl, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb43 0b01 	adc.w	fp, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ac:	4692      	mov	sl, r2
 80055ae:	469b      	mov	fp, r3
 80055b0:	4643      	mov	r3, r8
 80055b2:	eb1a 0303 	adds.w	r3, sl, r3
 80055b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ba:	464b      	mov	r3, r9
 80055bc:	eb4b 0303 	adc.w	r3, fp, r3
 80055c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d8:	460b      	mov	r3, r1
 80055da:	18db      	adds	r3, r3, r3
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	4613      	mov	r3, r2
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	647b      	str	r3, [r7, #68]	; 0x44
 80055e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ee:	f7fb fb4b 	bl	8000c88 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <UART_SetConfig+0x2d4>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2264      	movs	r2, #100	; 0x64
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <UART_SetConfig+0x2d4>)
 8005610:	fba3 2302 	umull	r2, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800561c:	441c      	add	r4, r3
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800562c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	1891      	adds	r1, r2, r2
 8005636:	63b9      	str	r1, [r7, #56]	; 0x38
 8005638:	415b      	adcs	r3, r3
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005640:	4641      	mov	r1, r8
 8005642:	1851      	adds	r1, r2, r1
 8005644:	6339      	str	r1, [r7, #48]	; 0x30
 8005646:	4649      	mov	r1, r9
 8005648:	414b      	adcs	r3, r1
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005658:	4659      	mov	r1, fp
 800565a:	00cb      	lsls	r3, r1, #3
 800565c:	4651      	mov	r1, sl
 800565e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005662:	4651      	mov	r1, sl
 8005664:	00ca      	lsls	r2, r1, #3
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	4603      	mov	r3, r0
 800566c:	4642      	mov	r2, r8
 800566e:	189b      	adds	r3, r3, r2
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	464b      	mov	r3, r9
 8005676:	460a      	mov	r2, r1
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800568c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005694:	460b      	mov	r3, r1
 8005696:	18db      	adds	r3, r3, r3
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
 800569a:	4613      	mov	r3, r2
 800569c:	eb42 0303 	adc.w	r3, r2, r3
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056aa:	f7fb faed 	bl	8000c88 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <UART_SetConfig+0x2d4>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <UART_SetConfig+0x2d4>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4422      	add	r2, r4
 80056da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056dc:	e106      	b.n	80058ec <UART_SetConfig+0x4d8>
 80056de:	bf00      	nop
 80056e0:	40011000 	.word	0x40011000
 80056e4:	40011400 	.word	0x40011400
 80056e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056fe:	4642      	mov	r2, r8
 8005700:	464b      	mov	r3, r9
 8005702:	1891      	adds	r1, r2, r2
 8005704:	6239      	str	r1, [r7, #32]
 8005706:	415b      	adcs	r3, r3
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800570e:	4641      	mov	r1, r8
 8005710:	1854      	adds	r4, r2, r1
 8005712:	4649      	mov	r1, r9
 8005714:	eb43 0501 	adc.w	r5, r3, r1
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	00eb      	lsls	r3, r5, #3
 8005722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005726:	00e2      	lsls	r2, r4, #3
 8005728:	4614      	mov	r4, r2
 800572a:	461d      	mov	r5, r3
 800572c:	4643      	mov	r3, r8
 800572e:	18e3      	adds	r3, r4, r3
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005734:	464b      	mov	r3, r9
 8005736:	eb45 0303 	adc.w	r3, r5, r3
 800573a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800574a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800575a:	4629      	mov	r1, r5
 800575c:	008b      	lsls	r3, r1, #2
 800575e:	4621      	mov	r1, r4
 8005760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005764:	4621      	mov	r1, r4
 8005766:	008a      	lsls	r2, r1, #2
 8005768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800576c:	f7fb fa8c 	bl	8000c88 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4b60      	ldr	r3, [pc, #384]	; (80058f8 <UART_SetConfig+0x4e4>)
 8005776:	fba3 2302 	umull	r2, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	011c      	lsls	r4, r3, #4
 800577e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005782:	2200      	movs	r2, #0
 8005784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800578c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005790:	4642      	mov	r2, r8
 8005792:	464b      	mov	r3, r9
 8005794:	1891      	adds	r1, r2, r2
 8005796:	61b9      	str	r1, [r7, #24]
 8005798:	415b      	adcs	r3, r3
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a0:	4641      	mov	r1, r8
 80057a2:	1851      	adds	r1, r2, r1
 80057a4:	6139      	str	r1, [r7, #16]
 80057a6:	4649      	mov	r1, r9
 80057a8:	414b      	adcs	r3, r1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b8:	4659      	mov	r1, fp
 80057ba:	00cb      	lsls	r3, r1, #3
 80057bc:	4651      	mov	r1, sl
 80057be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c2:	4651      	mov	r1, sl
 80057c4:	00ca      	lsls	r2, r1, #3
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	4642      	mov	r2, r8
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d4:	464b      	mov	r3, r9
 80057d6:	460a      	mov	r2, r1
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f8:	4649      	mov	r1, r9
 80057fa:	008b      	lsls	r3, r1, #2
 80057fc:	4641      	mov	r1, r8
 80057fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005802:	4641      	mov	r1, r8
 8005804:	008a      	lsls	r2, r1, #2
 8005806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800580a:	f7fb fa3d 	bl	8000c88 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4611      	mov	r1, r2
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <UART_SetConfig+0x4e4>)
 8005816:	fba3 2301 	umull	r2, r3, r3, r1
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2264      	movs	r2, #100	; 0x64
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	1acb      	subs	r3, r1, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <UART_SetConfig+0x4e4>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005834:	441c      	add	r4, r3
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	673b      	str	r3, [r7, #112]	; 0x70
 800583e:	677a      	str	r2, [r7, #116]	; 0x74
 8005840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	1891      	adds	r1, r2, r2
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	415b      	adcs	r3, r3
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005854:	4641      	mov	r1, r8
 8005856:	1851      	adds	r1, r2, r1
 8005858:	6039      	str	r1, [r7, #0]
 800585a:	4649      	mov	r1, r9
 800585c:	414b      	adcs	r3, r1
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800586c:	4659      	mov	r1, fp
 800586e:	00cb      	lsls	r3, r1, #3
 8005870:	4651      	mov	r1, sl
 8005872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005876:	4651      	mov	r1, sl
 8005878:	00ca      	lsls	r2, r1, #3
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	4603      	mov	r3, r0
 8005880:	4642      	mov	r2, r8
 8005882:	189b      	adds	r3, r3, r2
 8005884:	66bb      	str	r3, [r7, #104]	; 0x68
 8005886:	464b      	mov	r3, r9
 8005888:	460a      	mov	r2, r1
 800588a:	eb42 0303 	adc.w	r3, r2, r3
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	663b      	str	r3, [r7, #96]	; 0x60
 800589a:	667a      	str	r2, [r7, #100]	; 0x64
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058a8:	4649      	mov	r1, r9
 80058aa:	008b      	lsls	r3, r1, #2
 80058ac:	4641      	mov	r1, r8
 80058ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b2:	4641      	mov	r1, r8
 80058b4:	008a      	lsls	r2, r1, #2
 80058b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058ba:	f7fb f9e5 	bl	8000c88 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <UART_SetConfig+0x4e4>)
 80058c4:	fba3 1302 	umull	r1, r3, r3, r2
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	3332      	adds	r3, #50	; 0x32
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <UART_SetConfig+0x4e4>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	f003 020f 	and.w	r2, r3, #15
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4422      	add	r2, r4
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	bf00      	nop
 80058ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f8:	51eb851f 	.word	0x51eb851f

080058fc <BWHPF>:
#include <inttypes.h>

/************************************************BUTTERWORTH HIGH PASS FILTER*************************************************/
	float hpf_x_buffer[SECTIONS][2] = {0};
	float hpf_y_buffer[SECTIONS][2] = {0};
float BWHPF(float input, int8_t Hz) {
 80058fc:	b4b0      	push	{r4, r5, r7}
 80058fe:	b0c3      	sub	sp, #268	; 0x10c
 8005900:	af00      	add	r7, sp, #0
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800590a:	ed83 0a00 	vstr	s0, [r3]
 800590e:	4602      	mov	r2, r0
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8005918:	701a      	strb	r2, [r3, #0]
	float output = 0;
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float hpf_sos[SECTIONS][6];

	float hpf_sos_50[SECTIONS][6] = {
 8005922:	4ba2      	ldr	r3, [pc, #648]	; (8005bac <BWHPF+0x2b0>)
 8005924:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8005928:	461d      	mov	r5, r3
 800592a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800592c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800592e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0.8484753, -1.69695059,  0.8686753, 1.0, -1.77831349, 0.79244747},
			{1.0, -2.0,  1.0, 1.0, -1.8934156, 0.90846441}
	};
	float hpf_sos_30[SECTIONS][6] = {
 800593a:	4b9d      	ldr	r3, [pc, #628]	; (8005bb0 <BWHPF+0x2b4>)
 800593c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8005940:	461d      	mov	r5, r3
 8005942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800594a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800594e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0.78136727, -1.56273453,  0.78136727, 1.0, -1.67466095, 0.70485868},
			{1.0, -2.0,  1.0, 1.0, -1.83312526, 0.86618045}
	};
	float hpf_sos_20[SECTIONS][6] = {
 8005952:	4b98      	ldr	r3, [pc, #608]	; (8005bb4 <BWHPF+0x2b8>)
 8005954:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005958:	461d      	mov	r5, r3
 800595a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800595c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800595e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0.8484753, -1.69695059, 0.8484753, 1.0, -1.77831349, 0.79244747},
			{1.0, -2.0, 1.0, 1.0, -1.8934156, 0.90846441}
	};
	float hpf_sos_15[SECTIONS][6] = {
 800596a:	4b93      	ldr	r3, [pc, #588]	; (8005bb8 <BWHPF+0x2bc>)
 800596c:	f107 040c 	add.w	r4, r7, #12
 8005970:	461d      	mov	r5, r3
 8005972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800597a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800597e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0.88409204, -1.76818409, 0.88409204, 1.0, -1.83185386, 0.84001994},
			{1.0, -2.0, 1.0, 1.0, -1.92190889, 0.93047642}
	};

	if (Hz == 50){
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800598a:	f993 3000 	ldrsb.w	r3, [r3]
 800598e:	2b32      	cmp	r3, #50	; 0x32
 8005990:	d10c      	bne.n	80059ac <BWHPF+0xb0>
	        memcpy(hpf_sos, hpf_sos_50, sizeof(hpf_sos_50));
 8005992:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8005996:	f107 059c 	add.w	r5, r7, #156	; 0x9c
 800599a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800599c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800599e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059aa:	e03d      	b.n	8005a28 <BWHPF+0x12c>
	    }
	else if (Hz == 30){
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80059b4:	f993 3000 	ldrsb.w	r3, [r3]
 80059b8:	2b1e      	cmp	r3, #30
 80059ba:	d10c      	bne.n	80059d6 <BWHPF+0xda>
	        memcpy(hpf_sos, hpf_sos_30, sizeof(hpf_sos_30));
 80059bc:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80059c0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80059c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059d4:	e028      	b.n	8005a28 <BWHPF+0x12c>
	    }
	else if (Hz == 20){
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80059de:	f993 3000 	ldrsb.w	r3, [r3]
 80059e2:	2b14      	cmp	r3, #20
 80059e4:	d10c      	bne.n	8005a00 <BWHPF+0x104>
	        memcpy(hpf_sos, hpf_sos_20, sizeof(hpf_sos_20));
 80059e6:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80059ea:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80059ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059fe:	e013      	b.n	8005a28 <BWHPF+0x12c>
	    }
	else if (Hz == 15){
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8005a08:	f993 3000 	ldrsb.w	r3, [r3]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d10b      	bne.n	8005a28 <BWHPF+0x12c>
	        memcpy(hpf_sos, hpf_sos_15, sizeof(hpf_sos_15));
 8005a10:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8005a14:	f107 050c 	add.w	r5, r7, #12
 8005a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    }


    for (int i = 0; i < SECTIONS; i++) {
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a2e:	e0ac      	b.n	8005b8a <BWHPF+0x28e>
    	float xn = (i == 0) ? input : output;
 8005a30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <BWHPF+0x148>
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	e001      	b.n	8005a48 <BWHPF+0x14c>
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

        output = hpf_sos[i][0] * xn + hpf_sos[i][1] * hpf_x_buffer[i][0] + hpf_sos[i][2] * hpf_x_buffer[i][1]
 8005a4c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005a5c:	443b      	add	r3, r7
 8005a5e:	3b3c      	subs	r3, #60	; 0x3c
 8005a60:	ed93 7a00 	vldr	s14, [r3]
 8005a64:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8005a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a6c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005a7c:	443b      	add	r3, r7
 8005a7e:	3b38      	subs	r3, #56	; 0x38
 8005a80:	edd3 6a00 	vldr	s13, [r3]
 8005a84:	4a4d      	ldr	r2, [pc, #308]	; (8005bbc <BWHPF+0x2c0>)
 8005a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	edd3 7a00 	vldr	s15, [r3]
 8005a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a9a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005aaa:	443b      	add	r3, r7
 8005aac:	3b34      	subs	r3, #52	; 0x34
 8005aae:	edd3 6a00 	vldr	s13, [r3]
 8005ab2:	4a42      	ldr	r2, [pc, #264]	; (8005bbc <BWHPF+0x2c0>)
 8005ab4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	edd3 7a00 	vldr	s15, [r3]
 8005ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - hpf_sos[i][4] * hpf_y_buffer[i][0] - hpf_sos[i][5] * hpf_y_buffer[i][1];
 8005aca:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ada:	443b      	add	r3, r7
 8005adc:	3b2c      	subs	r3, #44	; 0x2c
 8005ade:	edd3 6a00 	vldr	s13, [r3]
 8005ae2:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <BWHPF+0x2c4>)
 8005ae4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4413      	add	r3, r2
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005af8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b08:	443b      	add	r3, r7
 8005b0a:	3b28      	subs	r3, #40	; 0x28
 8005b0c:	edd3 6a00 	vldr	s13, [r3]
 8005b10:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <BWHPF+0x2c4>)
 8005b12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	edd3 7a00 	vldr	s15, [r3]
 8005b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
        output = hpf_sos[i][0] * xn + hpf_sos[i][1] * hpf_x_buffer[i][0] + hpf_sos[i][2] * hpf_x_buffer[i][1]
 8005b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b28:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104

        hpf_x_buffer[i][1] = hpf_x_buffer[i][0];
 8005b2c:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <BWHPF+0x2c0>)
 8005b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4920      	ldr	r1, [pc, #128]	; (8005bbc <BWHPF+0x2c0>)
 8005b3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	3304      	adds	r3, #4
 8005b44:	601a      	str	r2, [r3, #0]
        hpf_x_buffer[i][0] = xn;
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <BWHPF+0x2c0>)
 8005b48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005b54:	601a      	str	r2, [r3, #0]
        hpf_y_buffer[i][1] = hpf_y_buffer[i][0];
 8005b56:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <BWHPF+0x2c4>)
 8005b58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4917      	ldr	r1, [pc, #92]	; (8005bc0 <BWHPF+0x2c4>)
 8005b64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	601a      	str	r2, [r3, #0]
        hpf_y_buffer[i][0] = output;
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <BWHPF+0x2c4>)
 8005b72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005b7e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SECTIONS; i++) {
 8005b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b84:	3301      	adds	r3, #1
 8005b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	f77f af4e 	ble.w	8005a30 <BWHPF+0x134>
    }
    return output;
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b98:	ee07 3a90 	vmov	s15, r3
}
 8005b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bcb0      	pop	{r4, r5, r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	08008db4 	.word	0x08008db4
 8005bb0:	08008de4 	.word	0x08008de4
 8005bb4:	08008e14 	.word	0x08008e14
 8005bb8:	08008e44 	.word	0x08008e44
 8005bbc:	20000420 	.word	0x20000420
 8005bc0:	20000430 	.word	0x20000430

08005bc4 <BWLPF>:
	{1.00000000, 2.00000000, 1.00000000, 1.00000000, -1.99516324, 0.99520262}*/ //1Hz
    /*{9.73291699e-15, 1.94658340e-14, 9.73291699e-15, 1.0, -1.99883930, 0.99883969},
	{1.0, 2.0, 1.0, 1.0, -1.99951883, 0.99951922}*/ //0.1Hz
};

float BWLPF(float input) {
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	ed87 0a01 	vstr	s0, [r7, #4]
	float output = 0;
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < SECTIONS; i++) {
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	e08c      	b.n	8005cf4 <BWLPF+0x130>
    	float xn = (i == 0) ? input : output;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <BWLPF+0x20>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	e000      	b.n	8005be6 <BWLPF+0x22>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	60fb      	str	r3, [r7, #12]

        output = lpf_sos[i][0] * xn + lpf_sos[i][1] * lpf_x_buffer[i][0] + lpf_sos[i][2] * lpf_x_buffer[i][1]
 8005be8:	4949      	ldr	r1, [pc, #292]	; (8005d10 <BWLPF+0x14c>)
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	440b      	add	r3, r1
 8005bf6:	ed93 7a00 	vldr	s14, [r3]
 8005bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c02:	4943      	ldr	r1, [pc, #268]	; (8005d10 <BWLPF+0x14c>)
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	3304      	adds	r3, #4
 8005c12:	edd3 6a00 	vldr	s13, [r3]
 8005c16:	4a3f      	ldr	r2, [pc, #252]	; (8005d14 <BWLPF+0x150>)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	edd3 7a00 	vldr	s15, [r3]
 8005c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2a:	4939      	ldr	r1, [pc, #228]	; (8005d10 <BWLPF+0x14c>)
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	3308      	adds	r3, #8
 8005c3a:	edd3 6a00 	vldr	s13, [r3]
 8005c3e:	4a35      	ldr	r2, [pc, #212]	; (8005d14 <BWLPF+0x150>)
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	3304      	adds	r3, #4
 8005c48:	edd3 7a00 	vldr	s15, [r3]
 8005c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c50:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - lpf_sos[i][4] * lpf_y_buffer[i][0] - lpf_sos[i][5] * lpf_y_buffer[i][1];
 8005c54:	492e      	ldr	r1, [pc, #184]	; (8005d10 <BWLPF+0x14c>)
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	3310      	adds	r3, #16
 8005c64:	edd3 6a00 	vldr	s13, [r3]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <BWLPF+0x154>)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c7c:	4924      	ldr	r1, [pc, #144]	; (8005d10 <BWLPF+0x14c>)
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	edd3 6a00 	vldr	s13, [r3]
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <BWLPF+0x154>)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	3304      	adds	r3, #4
 8005c9a:	edd3 7a00 	vldr	s15, [r3]
 8005c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        output = lpf_sos[i][0] * xn + lpf_sos[i][1] * lpf_x_buffer[i][0] + lpf_sos[i][2] * lpf_x_buffer[i][1]
 8005ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca6:	edc7 7a05 	vstr	s15, [r7, #20]

        lpf_x_buffer[i][1] = lpf_x_buffer[i][0];
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <BWLPF+0x150>)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4917      	ldr	r1, [pc, #92]	; (8005d14 <BWLPF+0x150>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	440b      	add	r3, r1
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	601a      	str	r2, [r3, #0]
        lpf_x_buffer[i][0] = xn;
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <BWLPF+0x150>)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]
        lpf_y_buffer[i][1] = lpf_y_buffer[i][0];
 8005ccc:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <BWLPF+0x154>)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4910      	ldr	r1, [pc, #64]	; (8005d18 <BWLPF+0x154>)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	440b      	add	r3, r1
 8005cde:	3304      	adds	r3, #4
 8005ce0:	601a      	str	r2, [r3, #0]
        lpf_y_buffer[i][0] = output;
 8005ce2:	4a0d      	ldr	r2, [pc, #52]	; (8005d18 <BWLPF+0x154>)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SECTIONS; i++) {
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	f77f af6f 	ble.w	8005bda <BWLPF+0x16>
    }
    return output;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	ee07 3a90 	vmov	s15, r3
}
 8005d02:	eeb0 0a67 	vmov.f32	s0, s15
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	2000000c 	.word	0x2000000c
 8005d14:	20000440 	.word	0x20000440
 8005d18:	20000450 	.word	0x20000450

08005d1c <NEURAL_ACTIVATION>:
}*/

/************************************************NEURAL ACTIVATION CALCULATION************************************************/
float na = 0, nat1 = 0, nat2 = 0;

float NEURAL_ACTIVATION(float emg){
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	; 0x24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	ed87 0a01 	vstr	s0, [r7, #4]
	float gma1 = -0.75, gma2 = -0.125;
 8005d26:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <NEURAL_ACTIVATION+0xc8>)
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	f04f 433e 	mov.w	r3, #3187671040	; 0xbe000000
 8005d2e:	61bb      	str	r3, [r7, #24]
	float bet1 = gma1 + gma2, bet2 = gma1*gma2, alp = 1 + bet1 + bet2;
 8005d30:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d34:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8005d40:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4c:	edc7 7a04 	vstr	s15, [r7, #16]
 8005d50:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d64:	edc7 7a03 	vstr	s15, [r7, #12]

	nat2 = nat1;
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <NEURAL_ACTIVATION+0xcc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <NEURAL_ACTIVATION+0xd0>)
 8005d6e:	6013      	str	r3, [r2, #0]
	nat1 = na;
 8005d70:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <NEURAL_ACTIVATION+0xd4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <NEURAL_ACTIVATION+0xcc>)
 8005d76:	6013      	str	r3, [r2, #0]
	na = (alp*emg - bet1*nat1 - bet2*nat2)-4;
 8005d78:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <NEURAL_ACTIVATION+0xcc>)
 8005d86:	edd3 6a00 	vldr	s13, [r3]
 8005d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <NEURAL_ACTIVATION+0xd0>)
 8005d98:	edd3 6a00 	vldr	s13, [r3]
 8005d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <NEURAL_ACTIVATION+0xd4>)
 8005db2:	edc3 7a00 	vstr	s15, [r3]
	if(na<0){
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <NEURAL_ACTIVATION+0xd4>)
 8005db8:	edd3 7a00 	vldr	s15, [r3]
 8005dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	d503      	bpl.n	8005dce <NEURAL_ACTIVATION+0xb2>
	  na=0;
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <NEURAL_ACTIVATION+0xd4>)
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
	}

	return na;
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <NEURAL_ACTIVATION+0xd4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	ee07 3a90 	vmov	s15, r3
}
 8005dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dda:	3724      	adds	r7, #36	; 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	bf400000 	.word	0xbf400000
 8005de8:	20000464 	.word	0x20000464
 8005dec:	20000468 	.word	0x20000468
 8005df0:	20000460 	.word	0x20000460

08005df4 <MUSCLE_ACTIVATION>:

/************************************************MUSCLE ACTIVATION CALCULATION************************************************/
float MUSCLE_ACTIVATION(float neural_activation){
 8005df4:	b5b0      	push	{r4, r5, r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	ed87 0a01 	vstr	s0, [r7, #4]
	float A = -0.03, max_value = 33.81404;
 8005dfe:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <MUSCLE_ACTIVATION+0xcc>)
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	4b30      	ldr	r3, [pc, #192]	; (8005ec4 <MUSCLE_ACTIVATION+0xd0>)
 8005e04:	613b      	str	r3, [r7, #16]
	float ma = (exp(A*neural_activation) - 1)/(exp(A) - 1);
 8005e06:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	ee17 0a90 	vmov	r0, s15
 8005e16:	f7fa fbb7 	bl	8000588 <__aeabi_f2d>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	ec43 2b10 	vmov	d0, r2, r3
 8005e22:	f002 fd65 	bl	80088f0 <exp>
 8005e26:	ec51 0b10 	vmov	r0, r1, d0
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <MUSCLE_ACTIVATION+0xd4>)
 8005e30:	f7fa fa4a 	bl	80002c8 <__aeabi_dsub>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	461d      	mov	r5, r3
 8005e3c:	6978      	ldr	r0, [r7, #20]
 8005e3e:	f7fa fba3 	bl	8000588 <__aeabi_f2d>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	ec43 2b10 	vmov	d0, r2, r3
 8005e4a:	f002 fd51 	bl	80088f0 <exp>
 8005e4e:	ec51 0b10 	vmov	r0, r1, d0
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <MUSCLE_ACTIVATION+0xd4>)
 8005e58:	f7fa fa36 	bl	80002c8 <__aeabi_dsub>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fd12 	bl	800088c <__aeabi_ddiv>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f7fa feba 	bl	8000be8 <__aeabi_d2f>
 8005e74:	4603      	mov	r3, r0
 8005e76:	60fb      	str	r3, [r7, #12]
	float ma_cal = ma/max_value*100;
 8005e78:	edd7 6a03 	vldr	s13, [r7, #12]
 8005e7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e84:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005ecc <MUSCLE_ACTIVATION+0xd8>
 8005e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e8c:	edc7 7a02 	vstr	s15, [r7, #8]

	return (int32_t)round(ma_cal);
 8005e90:	68b8      	ldr	r0, [r7, #8]
 8005e92:	f7fa fb79 	bl	8000588 <__aeabi_f2d>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	ec43 2b10 	vmov	d0, r2, r3
 8005e9e:	f002 fd7b 	bl	8008998 <round>
 8005ea2:	ec53 2b10 	vmov	r2, r3, d0
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fa fe75 	bl	8000b98 <__aeabi_d2iz>
 8005eae:	ee07 0a90 	vmov	s15, r0
 8005eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec0:	bcf5c28f 	.word	0xbcf5c28f
 8005ec4:	42074194 	.word	0x42074194
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	42c80000 	.word	0x42c80000

08005ed0 <__cvt>:
 8005ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	ec55 4b10 	vmov	r4, r5, d0
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	460e      	mov	r6, r1
 8005edc:	4619      	mov	r1, r3
 8005ede:	462b      	mov	r3, r5
 8005ee0:	bfbb      	ittet	lt
 8005ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ee6:	461d      	movlt	r5, r3
 8005ee8:	2300      	movge	r3, #0
 8005eea:	232d      	movlt	r3, #45	; 0x2d
 8005eec:	700b      	strb	r3, [r1, #0]
 8005eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ef4:	4691      	mov	r9, r2
 8005ef6:	f023 0820 	bic.w	r8, r3, #32
 8005efa:	bfbc      	itt	lt
 8005efc:	4622      	movlt	r2, r4
 8005efe:	4614      	movlt	r4, r2
 8005f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f04:	d005      	beq.n	8005f12 <__cvt+0x42>
 8005f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f0a:	d100      	bne.n	8005f0e <__cvt+0x3e>
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	2102      	movs	r1, #2
 8005f10:	e000      	b.n	8005f14 <__cvt+0x44>
 8005f12:	2103      	movs	r1, #3
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	ab02      	add	r3, sp, #8
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	ec45 4b10 	vmov	d0, r4, r5
 8005f20:	4653      	mov	r3, sl
 8005f22:	4632      	mov	r2, r6
 8005f24:	f000 fe64 	bl	8006bf0 <_dtoa_r>
 8005f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	d102      	bne.n	8005f36 <__cvt+0x66>
 8005f30:	f019 0f01 	tst.w	r9, #1
 8005f34:	d022      	beq.n	8005f7c <__cvt+0xac>
 8005f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f3a:	eb07 0906 	add.w	r9, r7, r6
 8005f3e:	d110      	bne.n	8005f62 <__cvt+0x92>
 8005f40:	783b      	ldrb	r3, [r7, #0]
 8005f42:	2b30      	cmp	r3, #48	; 0x30
 8005f44:	d10a      	bne.n	8005f5c <__cvt+0x8c>
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7fa fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8005f52:	b918      	cbnz	r0, 8005f5c <__cvt+0x8c>
 8005f54:	f1c6 0601 	rsb	r6, r6, #1
 8005f58:	f8ca 6000 	str.w	r6, [sl]
 8005f5c:	f8da 3000 	ldr.w	r3, [sl]
 8005f60:	4499      	add	r9, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4620      	mov	r0, r4
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f7fa fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8005f6e:	b108      	cbz	r0, 8005f74 <__cvt+0xa4>
 8005f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f74:	2230      	movs	r2, #48	; 0x30
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	454b      	cmp	r3, r9
 8005f7a:	d307      	bcc.n	8005f8c <__cvt+0xbc>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f80:	1bdb      	subs	r3, r3, r7
 8005f82:	4638      	mov	r0, r7
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	b004      	add	sp, #16
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	1c59      	adds	r1, r3, #1
 8005f8e:	9103      	str	r1, [sp, #12]
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e7f0      	b.n	8005f76 <__cvt+0xa6>

08005f94 <__exponent>:
 8005f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f96:	4603      	mov	r3, r0
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	bfb8      	it	lt
 8005f9c:	4249      	neglt	r1, r1
 8005f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8005fa2:	bfb4      	ite	lt
 8005fa4:	222d      	movlt	r2, #45	; 0x2d
 8005fa6:	222b      	movge	r2, #43	; 0x2b
 8005fa8:	2909      	cmp	r1, #9
 8005faa:	7042      	strb	r2, [r0, #1]
 8005fac:	dd2a      	ble.n	8006004 <__exponent+0x70>
 8005fae:	f10d 0207 	add.w	r2, sp, #7
 8005fb2:	4617      	mov	r7, r2
 8005fb4:	260a      	movs	r6, #10
 8005fb6:	4694      	mov	ip, r2
 8005fb8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005fbc:	fb06 1415 	mls	r4, r6, r5, r1
 8005fc0:	3430      	adds	r4, #48	; 0x30
 8005fc2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2c63      	cmp	r4, #99	; 0x63
 8005fca:	f102 32ff 	add.w	r2, r2, #4294967295
 8005fce:	4629      	mov	r1, r5
 8005fd0:	dcf1      	bgt.n	8005fb6 <__exponent+0x22>
 8005fd2:	3130      	adds	r1, #48	; 0x30
 8005fd4:	f1ac 0402 	sub.w	r4, ip, #2
 8005fd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005fdc:	1c41      	adds	r1, r0, #1
 8005fde:	4622      	mov	r2, r4
 8005fe0:	42ba      	cmp	r2, r7
 8005fe2:	d30a      	bcc.n	8005ffa <__exponent+0x66>
 8005fe4:	f10d 0209 	add.w	r2, sp, #9
 8005fe8:	eba2 020c 	sub.w	r2, r2, ip
 8005fec:	42bc      	cmp	r4, r7
 8005fee:	bf88      	it	hi
 8005ff0:	2200      	movhi	r2, #0
 8005ff2:	4413      	add	r3, r2
 8005ff4:	1a18      	subs	r0, r3, r0
 8005ff6:	b003      	add	sp, #12
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005ffe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006002:	e7ed      	b.n	8005fe0 <__exponent+0x4c>
 8006004:	2330      	movs	r3, #48	; 0x30
 8006006:	3130      	adds	r1, #48	; 0x30
 8006008:	7083      	strb	r3, [r0, #2]
 800600a:	70c1      	strb	r1, [r0, #3]
 800600c:	1d03      	adds	r3, r0, #4
 800600e:	e7f1      	b.n	8005ff4 <__exponent+0x60>

08006010 <_printf_float>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ed2d 8b02 	vpush	{d8}
 8006018:	b08d      	sub	sp, #52	; 0x34
 800601a:	460c      	mov	r4, r1
 800601c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006020:	4616      	mov	r6, r2
 8006022:	461f      	mov	r7, r3
 8006024:	4605      	mov	r5, r0
 8006026:	f000 fce1 	bl	80069ec <_localeconv_r>
 800602a:	f8d0 a000 	ldr.w	sl, [r0]
 800602e:	4650      	mov	r0, sl
 8006030:	f7fa f93e 	bl	80002b0 <strlen>
 8006034:	2300      	movs	r3, #0
 8006036:	930a      	str	r3, [sp, #40]	; 0x28
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	9305      	str	r3, [sp, #20]
 800603c:	f8d8 3000 	ldr.w	r3, [r8]
 8006040:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006044:	3307      	adds	r3, #7
 8006046:	f023 0307 	bic.w	r3, r3, #7
 800604a:	f103 0208 	add.w	r2, r3, #8
 800604e:	f8c8 2000 	str.w	r2, [r8]
 8006052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800605a:	9307      	str	r3, [sp, #28]
 800605c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006060:	ee08 0a10 	vmov	s16, r0
 8006064:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800606c:	4b9e      	ldr	r3, [pc, #632]	; (80062e8 <_printf_float+0x2d8>)
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	f7fa fd7b 	bl	8000b6c <__aeabi_dcmpun>
 8006076:	bb88      	cbnz	r0, 80060dc <_printf_float+0xcc>
 8006078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607c:	4b9a      	ldr	r3, [pc, #616]	; (80062e8 <_printf_float+0x2d8>)
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	f7fa fd55 	bl	8000b30 <__aeabi_dcmple>
 8006086:	bb48      	cbnz	r0, 80060dc <_printf_float+0xcc>
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	f7fa fd44 	bl	8000b1c <__aeabi_dcmplt>
 8006094:	b110      	cbz	r0, 800609c <_printf_float+0x8c>
 8006096:	232d      	movs	r3, #45	; 0x2d
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	4a93      	ldr	r2, [pc, #588]	; (80062ec <_printf_float+0x2dc>)
 800609e:	4b94      	ldr	r3, [pc, #592]	; (80062f0 <_printf_float+0x2e0>)
 80060a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060a4:	bf94      	ite	ls
 80060a6:	4690      	movls	r8, r2
 80060a8:	4698      	movhi	r8, r3
 80060aa:	2303      	movs	r3, #3
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	9b05      	ldr	r3, [sp, #20]
 80060b0:	f023 0304 	bic.w	r3, r3, #4
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	9700      	str	r7, [sp, #0]
 80060bc:	4633      	mov	r3, r6
 80060be:	aa0b      	add	r2, sp, #44	; 0x2c
 80060c0:	4621      	mov	r1, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f9da 	bl	800647c <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	f040 8090 	bne.w	80061ee <_printf_float+0x1de>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b00d      	add	sp, #52	; 0x34
 80060d4:	ecbd 8b02 	vpop	{d8}
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa fd42 	bl	8000b6c <__aeabi_dcmpun>
 80060e8:	b140      	cbz	r0, 80060fc <_printf_float+0xec>
 80060ea:	464b      	mov	r3, r9
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfbc      	itt	lt
 80060f0:	232d      	movlt	r3, #45	; 0x2d
 80060f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060f6:	4a7f      	ldr	r2, [pc, #508]	; (80062f4 <_printf_float+0x2e4>)
 80060f8:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <_printf_float+0x2e8>)
 80060fa:	e7d1      	b.n	80060a0 <_printf_float+0x90>
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006102:	9206      	str	r2, [sp, #24]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	d13f      	bne.n	8006188 <_printf_float+0x178>
 8006108:	2306      	movs	r3, #6
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	9b05      	ldr	r3, [sp, #20]
 800610e:	6861      	ldr	r1, [r4, #4]
 8006110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006114:	2300      	movs	r3, #0
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	ab0a      	add	r3, sp, #40	; 0x28
 800611a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800611e:	ab09      	add	r3, sp, #36	; 0x24
 8006120:	ec49 8b10 	vmov	d0, r8, r9
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800612c:	4628      	mov	r0, r5
 800612e:	f7ff fecf 	bl	8005ed0 <__cvt>
 8006132:	9b06      	ldr	r3, [sp, #24]
 8006134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006136:	2b47      	cmp	r3, #71	; 0x47
 8006138:	4680      	mov	r8, r0
 800613a:	d108      	bne.n	800614e <_printf_float+0x13e>
 800613c:	1cc8      	adds	r0, r1, #3
 800613e:	db02      	blt.n	8006146 <_printf_float+0x136>
 8006140:	6863      	ldr	r3, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	dd41      	ble.n	80061ca <_printf_float+0x1ba>
 8006146:	f1ab 0302 	sub.w	r3, fp, #2
 800614a:	fa5f fb83 	uxtb.w	fp, r3
 800614e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006152:	d820      	bhi.n	8006196 <_printf_float+0x186>
 8006154:	3901      	subs	r1, #1
 8006156:	465a      	mov	r2, fp
 8006158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800615c:	9109      	str	r1, [sp, #36]	; 0x24
 800615e:	f7ff ff19 	bl	8005f94 <__exponent>
 8006162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006164:	1813      	adds	r3, r2, r0
 8006166:	2a01      	cmp	r2, #1
 8006168:	4681      	mov	r9, r0
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	dc02      	bgt.n	8006174 <_printf_float+0x164>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	07d2      	lsls	r2, r2, #31
 8006172:	d501      	bpl.n	8006178 <_printf_float+0x168>
 8006174:	3301      	adds	r3, #1
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800617c:	2b00      	cmp	r3, #0
 800617e:	d09c      	beq.n	80060ba <_printf_float+0xaa>
 8006180:	232d      	movs	r3, #45	; 0x2d
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006186:	e798      	b.n	80060ba <_printf_float+0xaa>
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	2a47      	cmp	r2, #71	; 0x47
 800618c:	d1be      	bne.n	800610c <_printf_float+0xfc>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1bc      	bne.n	800610c <_printf_float+0xfc>
 8006192:	2301      	movs	r3, #1
 8006194:	e7b9      	b.n	800610a <_printf_float+0xfa>
 8006196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800619a:	d118      	bne.n	80061ce <_printf_float+0x1be>
 800619c:	2900      	cmp	r1, #0
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	dd0b      	ble.n	80061ba <_printf_float+0x1aa>
 80061a2:	6121      	str	r1, [r4, #16]
 80061a4:	b913      	cbnz	r3, 80061ac <_printf_float+0x19c>
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	d502      	bpl.n	80061b2 <_printf_float+0x1a2>
 80061ac:	3301      	adds	r3, #1
 80061ae:	440b      	add	r3, r1
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80061b4:	f04f 0900 	mov.w	r9, #0
 80061b8:	e7de      	b.n	8006178 <_printf_float+0x168>
 80061ba:	b913      	cbnz	r3, 80061c2 <_printf_float+0x1b2>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	07d2      	lsls	r2, r2, #31
 80061c0:	d501      	bpl.n	80061c6 <_printf_float+0x1b6>
 80061c2:	3302      	adds	r3, #2
 80061c4:	e7f4      	b.n	80061b0 <_printf_float+0x1a0>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e7f2      	b.n	80061b0 <_printf_float+0x1a0>
 80061ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d0:	4299      	cmp	r1, r3
 80061d2:	db05      	blt.n	80061e0 <_printf_float+0x1d0>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	6121      	str	r1, [r4, #16]
 80061d8:	07d8      	lsls	r0, r3, #31
 80061da:	d5ea      	bpl.n	80061b2 <_printf_float+0x1a2>
 80061dc:	1c4b      	adds	r3, r1, #1
 80061de:	e7e7      	b.n	80061b0 <_printf_float+0x1a0>
 80061e0:	2900      	cmp	r1, #0
 80061e2:	bfd4      	ite	le
 80061e4:	f1c1 0202 	rsble	r2, r1, #2
 80061e8:	2201      	movgt	r2, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	e7e0      	b.n	80061b0 <_printf_float+0x1a0>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	055a      	lsls	r2, r3, #21
 80061f2:	d407      	bmi.n	8006204 <_printf_float+0x1f4>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	4642      	mov	r2, r8
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	d12c      	bne.n	800625c <_printf_float+0x24c>
 8006202:	e764      	b.n	80060ce <_printf_float+0xbe>
 8006204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006208:	f240 80e0 	bls.w	80063cc <_printf_float+0x3bc>
 800620c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	f7fa fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8006218:	2800      	cmp	r0, #0
 800621a:	d034      	beq.n	8006286 <_printf_float+0x276>
 800621c:	4a37      	ldr	r2, [pc, #220]	; (80062fc <_printf_float+0x2ec>)
 800621e:	2301      	movs	r3, #1
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af51 	beq.w	80060ce <_printf_float+0xbe>
 800622c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006230:	429a      	cmp	r2, r3
 8006232:	db02      	blt.n	800623a <_printf_float+0x22a>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07d8      	lsls	r0, r3, #31
 8006238:	d510      	bpl.n	800625c <_printf_float+0x24c>
 800623a:	ee18 3a10 	vmov	r3, s16
 800623e:	4652      	mov	r2, sl
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	f43f af41 	beq.w	80060ce <_printf_float+0xbe>
 800624c:	f04f 0800 	mov.w	r8, #0
 8006250:	f104 091a 	add.w	r9, r4, #26
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	4543      	cmp	r3, r8
 800625a:	dc09      	bgt.n	8006270 <_printf_float+0x260>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	f100 8107 	bmi.w	8006472 <_printf_float+0x462>
 8006264:	68e0      	ldr	r0, [r4, #12]
 8006266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006268:	4298      	cmp	r0, r3
 800626a:	bfb8      	it	lt
 800626c:	4618      	movlt	r0, r3
 800626e:	e730      	b.n	80060d2 <_printf_float+0xc2>
 8006270:	2301      	movs	r3, #1
 8006272:	464a      	mov	r2, r9
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	f43f af27 	beq.w	80060ce <_printf_float+0xbe>
 8006280:	f108 0801 	add.w	r8, r8, #1
 8006284:	e7e6      	b.n	8006254 <_printf_float+0x244>
 8006286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc39      	bgt.n	8006300 <_printf_float+0x2f0>
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <_printf_float+0x2ec>)
 800628e:	2301      	movs	r3, #1
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f af19 	beq.w	80060ce <_printf_float+0xbe>
 800629c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d102      	bne.n	80062aa <_printf_float+0x29a>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	d5d8      	bpl.n	800625c <_printf_float+0x24c>
 80062aa:	ee18 3a10 	vmov	r3, s16
 80062ae:	4652      	mov	r2, sl
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f af09 	beq.w	80060ce <_printf_float+0xbe>
 80062bc:	f04f 0900 	mov.w	r9, #0
 80062c0:	f104 0a1a 	add.w	sl, r4, #26
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	425b      	negs	r3, r3
 80062c8:	454b      	cmp	r3, r9
 80062ca:	dc01      	bgt.n	80062d0 <_printf_float+0x2c0>
 80062cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ce:	e792      	b.n	80061f6 <_printf_float+0x1e6>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f aef7 	beq.w	80060ce <_printf_float+0xbe>
 80062e0:	f109 0901 	add.w	r9, r9, #1
 80062e4:	e7ee      	b.n	80062c4 <_printf_float+0x2b4>
 80062e6:	bf00      	nop
 80062e8:	7fefffff 	.word	0x7fefffff
 80062ec:	08008e94 	.word	0x08008e94
 80062f0:	08008e98 	.word	0x08008e98
 80062f4:	08008e9c 	.word	0x08008e9c
 80062f8:	08008ea0 	.word	0x08008ea0
 80062fc:	08008ea4 	.word	0x08008ea4
 8006300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006304:	429a      	cmp	r2, r3
 8006306:	bfa8      	it	ge
 8006308:	461a      	movge	r2, r3
 800630a:	2a00      	cmp	r2, #0
 800630c:	4691      	mov	r9, r2
 800630e:	dc37      	bgt.n	8006380 <_printf_float+0x370>
 8006310:	f04f 0b00 	mov.w	fp, #0
 8006314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006318:	f104 021a 	add.w	r2, r4, #26
 800631c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	eba3 0309 	sub.w	r3, r3, r9
 8006324:	455b      	cmp	r3, fp
 8006326:	dc33      	bgt.n	8006390 <_printf_float+0x380>
 8006328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632c:	429a      	cmp	r2, r3
 800632e:	db3b      	blt.n	80063a8 <_printf_float+0x398>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07da      	lsls	r2, r3, #31
 8006334:	d438      	bmi.n	80063a8 <_printf_float+0x398>
 8006336:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800633a:	eba2 0903 	sub.w	r9, r2, r3
 800633e:	9b05      	ldr	r3, [sp, #20]
 8006340:	1ad2      	subs	r2, r2, r3
 8006342:	4591      	cmp	r9, r2
 8006344:	bfa8      	it	ge
 8006346:	4691      	movge	r9, r2
 8006348:	f1b9 0f00 	cmp.w	r9, #0
 800634c:	dc35      	bgt.n	80063ba <_printf_float+0x3aa>
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006356:	f104 0a1a 	add.w	sl, r4, #26
 800635a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	eba3 0309 	sub.w	r3, r3, r9
 8006364:	4543      	cmp	r3, r8
 8006366:	f77f af79 	ble.w	800625c <_printf_float+0x24c>
 800636a:	2301      	movs	r3, #1
 800636c:	4652      	mov	r2, sl
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f aeaa 	beq.w	80060ce <_printf_float+0xbe>
 800637a:	f108 0801 	add.w	r8, r8, #1
 800637e:	e7ec      	b.n	800635a <_printf_float+0x34a>
 8006380:	4613      	mov	r3, r2
 8006382:	4631      	mov	r1, r6
 8006384:	4642      	mov	r2, r8
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	d1c0      	bne.n	8006310 <_printf_float+0x300>
 800638e:	e69e      	b.n	80060ce <_printf_float+0xbe>
 8006390:	2301      	movs	r3, #1
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f ae97 	beq.w	80060ce <_printf_float+0xbe>
 80063a0:	9a05      	ldr	r2, [sp, #20]
 80063a2:	f10b 0b01 	add.w	fp, fp, #1
 80063a6:	e7b9      	b.n	800631c <_printf_float+0x30c>
 80063a8:	ee18 3a10 	vmov	r3, s16
 80063ac:	4652      	mov	r2, sl
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	d1be      	bne.n	8006336 <_printf_float+0x326>
 80063b8:	e689      	b.n	80060ce <_printf_float+0xbe>
 80063ba:	9a05      	ldr	r2, [sp, #20]
 80063bc:	464b      	mov	r3, r9
 80063be:	4442      	add	r2, r8
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	d1c1      	bne.n	800634e <_printf_float+0x33e>
 80063ca:	e680      	b.n	80060ce <_printf_float+0xbe>
 80063cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	dc01      	bgt.n	80063d6 <_printf_float+0x3c6>
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d53a      	bpl.n	800644c <_printf_float+0x43c>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4642      	mov	r2, r8
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f ae74 	beq.w	80060ce <_printf_float+0xbe>
 80063e6:	ee18 3a10 	vmov	r3, s16
 80063ea:	4652      	mov	r2, sl
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f ae6b 	beq.w	80060ce <_printf_float+0xbe>
 80063f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006404:	f7fa fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8006408:	b9d8      	cbnz	r0, 8006442 <_printf_float+0x432>
 800640a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800640e:	f108 0201 	add.w	r2, r8, #1
 8006412:	4631      	mov	r1, r6
 8006414:	4628      	mov	r0, r5
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	d10e      	bne.n	800643a <_printf_float+0x42a>
 800641c:	e657      	b.n	80060ce <_printf_float+0xbe>
 800641e:	2301      	movs	r3, #1
 8006420:	4652      	mov	r2, sl
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f ae50 	beq.w	80060ce <_printf_float+0xbe>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006434:	3b01      	subs	r3, #1
 8006436:	4543      	cmp	r3, r8
 8006438:	dcf1      	bgt.n	800641e <_printf_float+0x40e>
 800643a:	464b      	mov	r3, r9
 800643c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006440:	e6da      	b.n	80061f8 <_printf_float+0x1e8>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	f104 0a1a 	add.w	sl, r4, #26
 800644a:	e7f2      	b.n	8006432 <_printf_float+0x422>
 800644c:	2301      	movs	r3, #1
 800644e:	4642      	mov	r2, r8
 8006450:	e7df      	b.n	8006412 <_printf_float+0x402>
 8006452:	2301      	movs	r3, #1
 8006454:	464a      	mov	r2, r9
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	f43f ae36 	beq.w	80060ce <_printf_float+0xbe>
 8006462:	f108 0801 	add.w	r8, r8, #1
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800646a:	1a5b      	subs	r3, r3, r1
 800646c:	4543      	cmp	r3, r8
 800646e:	dcf0      	bgt.n	8006452 <_printf_float+0x442>
 8006470:	e6f8      	b.n	8006264 <_printf_float+0x254>
 8006472:	f04f 0800 	mov.w	r8, #0
 8006476:	f104 0919 	add.w	r9, r4, #25
 800647a:	e7f4      	b.n	8006466 <_printf_float+0x456>

0800647c <_printf_common>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	4616      	mov	r6, r2
 8006482:	4699      	mov	r9, r3
 8006484:	688a      	ldr	r2, [r1, #8]
 8006486:	690b      	ldr	r3, [r1, #16]
 8006488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800648c:	4293      	cmp	r3, r2
 800648e:	bfb8      	it	lt
 8006490:	4613      	movlt	r3, r2
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006498:	4607      	mov	r7, r0
 800649a:	460c      	mov	r4, r1
 800649c:	b10a      	cbz	r2, 80064a2 <_printf_common+0x26>
 800649e:	3301      	adds	r3, #1
 80064a0:	6033      	str	r3, [r6, #0]
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	0699      	lsls	r1, r3, #26
 80064a6:	bf42      	ittt	mi
 80064a8:	6833      	ldrmi	r3, [r6, #0]
 80064aa:	3302      	addmi	r3, #2
 80064ac:	6033      	strmi	r3, [r6, #0]
 80064ae:	6825      	ldr	r5, [r4, #0]
 80064b0:	f015 0506 	ands.w	r5, r5, #6
 80064b4:	d106      	bne.n	80064c4 <_printf_common+0x48>
 80064b6:	f104 0a19 	add.w	sl, r4, #25
 80064ba:	68e3      	ldr	r3, [r4, #12]
 80064bc:	6832      	ldr	r2, [r6, #0]
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	42ab      	cmp	r3, r5
 80064c2:	dc26      	bgt.n	8006512 <_printf_common+0x96>
 80064c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064c8:	1e13      	subs	r3, r2, #0
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	bf18      	it	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	0692      	lsls	r2, r2, #26
 80064d2:	d42b      	bmi.n	800652c <_printf_common+0xb0>
 80064d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064d8:	4649      	mov	r1, r9
 80064da:	4638      	mov	r0, r7
 80064dc:	47c0      	blx	r8
 80064de:	3001      	adds	r0, #1
 80064e0:	d01e      	beq.n	8006520 <_printf_common+0xa4>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6922      	ldr	r2, [r4, #16]
 80064e6:	f003 0306 	and.w	r3, r3, #6
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	bf02      	ittt	eq
 80064ee:	68e5      	ldreq	r5, [r4, #12]
 80064f0:	6833      	ldreq	r3, [r6, #0]
 80064f2:	1aed      	subeq	r5, r5, r3
 80064f4:	68a3      	ldr	r3, [r4, #8]
 80064f6:	bf0c      	ite	eq
 80064f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064fc:	2500      	movne	r5, #0
 80064fe:	4293      	cmp	r3, r2
 8006500:	bfc4      	itt	gt
 8006502:	1a9b      	subgt	r3, r3, r2
 8006504:	18ed      	addgt	r5, r5, r3
 8006506:	2600      	movs	r6, #0
 8006508:	341a      	adds	r4, #26
 800650a:	42b5      	cmp	r5, r6
 800650c:	d11a      	bne.n	8006544 <_printf_common+0xc8>
 800650e:	2000      	movs	r0, #0
 8006510:	e008      	b.n	8006524 <_printf_common+0xa8>
 8006512:	2301      	movs	r3, #1
 8006514:	4652      	mov	r2, sl
 8006516:	4649      	mov	r1, r9
 8006518:	4638      	mov	r0, r7
 800651a:	47c0      	blx	r8
 800651c:	3001      	adds	r0, #1
 800651e:	d103      	bne.n	8006528 <_printf_common+0xac>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	3501      	adds	r5, #1
 800652a:	e7c6      	b.n	80064ba <_printf_common+0x3e>
 800652c:	18e1      	adds	r1, r4, r3
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	2030      	movs	r0, #48	; 0x30
 8006532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006536:	4422      	add	r2, r4
 8006538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800653c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006540:	3302      	adds	r3, #2
 8006542:	e7c7      	b.n	80064d4 <_printf_common+0x58>
 8006544:	2301      	movs	r3, #1
 8006546:	4622      	mov	r2, r4
 8006548:	4649      	mov	r1, r9
 800654a:	4638      	mov	r0, r7
 800654c:	47c0      	blx	r8
 800654e:	3001      	adds	r0, #1
 8006550:	d0e6      	beq.n	8006520 <_printf_common+0xa4>
 8006552:	3601      	adds	r6, #1
 8006554:	e7d9      	b.n	800650a <_printf_common+0x8e>
	...

08006558 <_printf_i>:
 8006558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	7e0f      	ldrb	r7, [r1, #24]
 800655e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006560:	2f78      	cmp	r7, #120	; 0x78
 8006562:	4691      	mov	r9, r2
 8006564:	4680      	mov	r8, r0
 8006566:	460c      	mov	r4, r1
 8006568:	469a      	mov	sl, r3
 800656a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800656e:	d807      	bhi.n	8006580 <_printf_i+0x28>
 8006570:	2f62      	cmp	r7, #98	; 0x62
 8006572:	d80a      	bhi.n	800658a <_printf_i+0x32>
 8006574:	2f00      	cmp	r7, #0
 8006576:	f000 80d4 	beq.w	8006722 <_printf_i+0x1ca>
 800657a:	2f58      	cmp	r7, #88	; 0x58
 800657c:	f000 80c0 	beq.w	8006700 <_printf_i+0x1a8>
 8006580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006588:	e03a      	b.n	8006600 <_printf_i+0xa8>
 800658a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800658e:	2b15      	cmp	r3, #21
 8006590:	d8f6      	bhi.n	8006580 <_printf_i+0x28>
 8006592:	a101      	add	r1, pc, #4	; (adr r1, 8006598 <_printf_i+0x40>)
 8006594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006598:	080065f1 	.word	0x080065f1
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006581 	.word	0x08006581
 80065a4:	08006581 	.word	0x08006581
 80065a8:	08006581 	.word	0x08006581
 80065ac:	08006581 	.word	0x08006581
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006581 	.word	0x08006581
 80065b8:	08006581 	.word	0x08006581
 80065bc:	08006581 	.word	0x08006581
 80065c0:	08006581 	.word	0x08006581
 80065c4:	08006709 	.word	0x08006709
 80065c8:	08006631 	.word	0x08006631
 80065cc:	080066c3 	.word	0x080066c3
 80065d0:	08006581 	.word	0x08006581
 80065d4:	08006581 	.word	0x08006581
 80065d8:	0800672b 	.word	0x0800672b
 80065dc:	08006581 	.word	0x08006581
 80065e0:	08006631 	.word	0x08006631
 80065e4:	08006581 	.word	0x08006581
 80065e8:	08006581 	.word	0x08006581
 80065ec:	080066cb 	.word	0x080066cb
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	602a      	str	r2, [r5, #0]
 80065f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006600:	2301      	movs	r3, #1
 8006602:	e09f      	b.n	8006744 <_printf_i+0x1ec>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	0607      	lsls	r7, r0, #24
 800660a:	f103 0104 	add.w	r1, r3, #4
 800660e:	6029      	str	r1, [r5, #0]
 8006610:	d501      	bpl.n	8006616 <_printf_i+0xbe>
 8006612:	681e      	ldr	r6, [r3, #0]
 8006614:	e003      	b.n	800661e <_printf_i+0xc6>
 8006616:	0646      	lsls	r6, r0, #25
 8006618:	d5fb      	bpl.n	8006612 <_printf_i+0xba>
 800661a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800661e:	2e00      	cmp	r6, #0
 8006620:	da03      	bge.n	800662a <_printf_i+0xd2>
 8006622:	232d      	movs	r3, #45	; 0x2d
 8006624:	4276      	negs	r6, r6
 8006626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662a:	485a      	ldr	r0, [pc, #360]	; (8006794 <_printf_i+0x23c>)
 800662c:	230a      	movs	r3, #10
 800662e:	e012      	b.n	8006656 <_printf_i+0xfe>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	1d19      	adds	r1, r3, #4
 8006636:	6029      	str	r1, [r5, #0]
 8006638:	0605      	lsls	r5, r0, #24
 800663a:	d501      	bpl.n	8006640 <_printf_i+0xe8>
 800663c:	681e      	ldr	r6, [r3, #0]
 800663e:	e002      	b.n	8006646 <_printf_i+0xee>
 8006640:	0641      	lsls	r1, r0, #25
 8006642:	d5fb      	bpl.n	800663c <_printf_i+0xe4>
 8006644:	881e      	ldrh	r6, [r3, #0]
 8006646:	4853      	ldr	r0, [pc, #332]	; (8006794 <_printf_i+0x23c>)
 8006648:	2f6f      	cmp	r7, #111	; 0x6f
 800664a:	bf0c      	ite	eq
 800664c:	2308      	moveq	r3, #8
 800664e:	230a      	movne	r3, #10
 8006650:	2100      	movs	r1, #0
 8006652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006656:	6865      	ldr	r5, [r4, #4]
 8006658:	60a5      	str	r5, [r4, #8]
 800665a:	2d00      	cmp	r5, #0
 800665c:	bfa2      	ittt	ge
 800665e:	6821      	ldrge	r1, [r4, #0]
 8006660:	f021 0104 	bicge.w	r1, r1, #4
 8006664:	6021      	strge	r1, [r4, #0]
 8006666:	b90e      	cbnz	r6, 800666c <_printf_i+0x114>
 8006668:	2d00      	cmp	r5, #0
 800666a:	d04b      	beq.n	8006704 <_printf_i+0x1ac>
 800666c:	4615      	mov	r5, r2
 800666e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006672:	fb03 6711 	mls	r7, r3, r1, r6
 8006676:	5dc7      	ldrb	r7, [r0, r7]
 8006678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800667c:	4637      	mov	r7, r6
 800667e:	42bb      	cmp	r3, r7
 8006680:	460e      	mov	r6, r1
 8006682:	d9f4      	bls.n	800666e <_printf_i+0x116>
 8006684:	2b08      	cmp	r3, #8
 8006686:	d10b      	bne.n	80066a0 <_printf_i+0x148>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07de      	lsls	r6, r3, #31
 800668c:	d508      	bpl.n	80066a0 <_printf_i+0x148>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	6861      	ldr	r1, [r4, #4]
 8006692:	4299      	cmp	r1, r3
 8006694:	bfde      	ittt	le
 8006696:	2330      	movle	r3, #48	; 0x30
 8006698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800669c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066a0:	1b52      	subs	r2, r2, r5
 80066a2:	6122      	str	r2, [r4, #16]
 80066a4:	f8cd a000 	str.w	sl, [sp]
 80066a8:	464b      	mov	r3, r9
 80066aa:	aa03      	add	r2, sp, #12
 80066ac:	4621      	mov	r1, r4
 80066ae:	4640      	mov	r0, r8
 80066b0:	f7ff fee4 	bl	800647c <_printf_common>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d14a      	bne.n	800674e <_printf_i+0x1f6>
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	b004      	add	sp, #16
 80066be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	4833      	ldr	r0, [pc, #204]	; (8006798 <_printf_i+0x240>)
 80066cc:	2778      	movs	r7, #120	; 0x78
 80066ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	6829      	ldr	r1, [r5, #0]
 80066d6:	061f      	lsls	r7, r3, #24
 80066d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066dc:	d402      	bmi.n	80066e4 <_printf_i+0x18c>
 80066de:	065f      	lsls	r7, r3, #25
 80066e0:	bf48      	it	mi
 80066e2:	b2b6      	uxthmi	r6, r6
 80066e4:	07df      	lsls	r7, r3, #31
 80066e6:	bf48      	it	mi
 80066e8:	f043 0320 	orrmi.w	r3, r3, #32
 80066ec:	6029      	str	r1, [r5, #0]
 80066ee:	bf48      	it	mi
 80066f0:	6023      	strmi	r3, [r4, #0]
 80066f2:	b91e      	cbnz	r6, 80066fc <_printf_i+0x1a4>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	f023 0320 	bic.w	r3, r3, #32
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	2310      	movs	r3, #16
 80066fe:	e7a7      	b.n	8006650 <_printf_i+0xf8>
 8006700:	4824      	ldr	r0, [pc, #144]	; (8006794 <_printf_i+0x23c>)
 8006702:	e7e4      	b.n	80066ce <_printf_i+0x176>
 8006704:	4615      	mov	r5, r2
 8006706:	e7bd      	b.n	8006684 <_printf_i+0x12c>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	6826      	ldr	r6, [r4, #0]
 800670c:	6961      	ldr	r1, [r4, #20]
 800670e:	1d18      	adds	r0, r3, #4
 8006710:	6028      	str	r0, [r5, #0]
 8006712:	0635      	lsls	r5, r6, #24
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	d501      	bpl.n	800671c <_printf_i+0x1c4>
 8006718:	6019      	str	r1, [r3, #0]
 800671a:	e002      	b.n	8006722 <_printf_i+0x1ca>
 800671c:	0670      	lsls	r0, r6, #25
 800671e:	d5fb      	bpl.n	8006718 <_printf_i+0x1c0>
 8006720:	8019      	strh	r1, [r3, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	4615      	mov	r5, r2
 8006728:	e7bc      	b.n	80066a4 <_printf_i+0x14c>
 800672a:	682b      	ldr	r3, [r5, #0]
 800672c:	1d1a      	adds	r2, r3, #4
 800672e:	602a      	str	r2, [r5, #0]
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	6862      	ldr	r2, [r4, #4]
 8006734:	2100      	movs	r1, #0
 8006736:	4628      	mov	r0, r5
 8006738:	f7f9 fd6a 	bl	8000210 <memchr>
 800673c:	b108      	cbz	r0, 8006742 <_printf_i+0x1ea>
 800673e:	1b40      	subs	r0, r0, r5
 8006740:	6060      	str	r0, [r4, #4]
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	2300      	movs	r3, #0
 8006748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674c:	e7aa      	b.n	80066a4 <_printf_i+0x14c>
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	462a      	mov	r2, r5
 8006752:	4649      	mov	r1, r9
 8006754:	4640      	mov	r0, r8
 8006756:	47d0      	blx	sl
 8006758:	3001      	adds	r0, #1
 800675a:	d0ad      	beq.n	80066b8 <_printf_i+0x160>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	d413      	bmi.n	800678a <_printf_i+0x232>
 8006762:	68e0      	ldr	r0, [r4, #12]
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	4298      	cmp	r0, r3
 8006768:	bfb8      	it	lt
 800676a:	4618      	movlt	r0, r3
 800676c:	e7a6      	b.n	80066bc <_printf_i+0x164>
 800676e:	2301      	movs	r3, #1
 8006770:	4632      	mov	r2, r6
 8006772:	4649      	mov	r1, r9
 8006774:	4640      	mov	r0, r8
 8006776:	47d0      	blx	sl
 8006778:	3001      	adds	r0, #1
 800677a:	d09d      	beq.n	80066b8 <_printf_i+0x160>
 800677c:	3501      	adds	r5, #1
 800677e:	68e3      	ldr	r3, [r4, #12]
 8006780:	9903      	ldr	r1, [sp, #12]
 8006782:	1a5b      	subs	r3, r3, r1
 8006784:	42ab      	cmp	r3, r5
 8006786:	dcf2      	bgt.n	800676e <_printf_i+0x216>
 8006788:	e7eb      	b.n	8006762 <_printf_i+0x20a>
 800678a:	2500      	movs	r5, #0
 800678c:	f104 0619 	add.w	r6, r4, #25
 8006790:	e7f5      	b.n	800677e <_printf_i+0x226>
 8006792:	bf00      	nop
 8006794:	08008ea6 	.word	0x08008ea6
 8006798:	08008eb7 	.word	0x08008eb7

0800679c <std>:
 800679c:	2300      	movs	r3, #0
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	e9c0 3300 	strd	r3, r3, [r0]
 80067a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067aa:	6083      	str	r3, [r0, #8]
 80067ac:	8181      	strh	r1, [r0, #12]
 80067ae:	6643      	str	r3, [r0, #100]	; 0x64
 80067b0:	81c2      	strh	r2, [r0, #14]
 80067b2:	6183      	str	r3, [r0, #24]
 80067b4:	4619      	mov	r1, r3
 80067b6:	2208      	movs	r2, #8
 80067b8:	305c      	adds	r0, #92	; 0x5c
 80067ba:	f000 f90e 	bl	80069da <memset>
 80067be:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <std+0x58>)
 80067c0:	6263      	str	r3, [r4, #36]	; 0x24
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <std+0x5c>)
 80067c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <std+0x60>)
 80067c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <std+0x64>)
 80067cc:	6323      	str	r3, [r4, #48]	; 0x30
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <std+0x68>)
 80067d0:	6224      	str	r4, [r4, #32]
 80067d2:	429c      	cmp	r4, r3
 80067d4:	d006      	beq.n	80067e4 <std+0x48>
 80067d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067da:	4294      	cmp	r4, r2
 80067dc:	d002      	beq.n	80067e4 <std+0x48>
 80067de:	33d0      	adds	r3, #208	; 0xd0
 80067e0:	429c      	cmp	r4, r3
 80067e2:	d105      	bne.n	80067f0 <std+0x54>
 80067e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	f000 b972 	b.w	8006ad4 <__retarget_lock_init_recursive>
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	08006955 	.word	0x08006955
 80067f8:	08006977 	.word	0x08006977
 80067fc:	080069af 	.word	0x080069af
 8006800:	080069d3 	.word	0x080069d3
 8006804:	2000046c 	.word	0x2000046c

08006808 <stdio_exit_handler>:
 8006808:	4a02      	ldr	r2, [pc, #8]	; (8006814 <stdio_exit_handler+0xc>)
 800680a:	4903      	ldr	r1, [pc, #12]	; (8006818 <stdio_exit_handler+0x10>)
 800680c:	4803      	ldr	r0, [pc, #12]	; (800681c <stdio_exit_handler+0x14>)
 800680e:	f000 b869 	b.w	80068e4 <_fwalk_sglue>
 8006812:	bf00      	nop
 8006814:	2000003c 	.word	0x2000003c
 8006818:	08008461 	.word	0x08008461
 800681c:	20000048 	.word	0x20000048

08006820 <cleanup_stdio>:
 8006820:	6841      	ldr	r1, [r0, #4]
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <cleanup_stdio+0x34>)
 8006824:	4299      	cmp	r1, r3
 8006826:	b510      	push	{r4, lr}
 8006828:	4604      	mov	r4, r0
 800682a:	d001      	beq.n	8006830 <cleanup_stdio+0x10>
 800682c:	f001 fe18 	bl	8008460 <_fflush_r>
 8006830:	68a1      	ldr	r1, [r4, #8]
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <cleanup_stdio+0x38>)
 8006834:	4299      	cmp	r1, r3
 8006836:	d002      	beq.n	800683e <cleanup_stdio+0x1e>
 8006838:	4620      	mov	r0, r4
 800683a:	f001 fe11 	bl	8008460 <_fflush_r>
 800683e:	68e1      	ldr	r1, [r4, #12]
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <cleanup_stdio+0x3c>)
 8006842:	4299      	cmp	r1, r3
 8006844:	d004      	beq.n	8006850 <cleanup_stdio+0x30>
 8006846:	4620      	mov	r0, r4
 8006848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800684c:	f001 be08 	b.w	8008460 <_fflush_r>
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	2000046c 	.word	0x2000046c
 8006858:	200004d4 	.word	0x200004d4
 800685c:	2000053c 	.word	0x2000053c

08006860 <global_stdio_init.part.0>:
 8006860:	b510      	push	{r4, lr}
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <global_stdio_init.part.0+0x30>)
 8006864:	4c0b      	ldr	r4, [pc, #44]	; (8006894 <global_stdio_init.part.0+0x34>)
 8006866:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <global_stdio_init.part.0+0x38>)
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	4620      	mov	r0, r4
 800686c:	2200      	movs	r2, #0
 800686e:	2104      	movs	r1, #4
 8006870:	f7ff ff94 	bl	800679c <std>
 8006874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006878:	2201      	movs	r2, #1
 800687a:	2109      	movs	r1, #9
 800687c:	f7ff ff8e 	bl	800679c <std>
 8006880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006884:	2202      	movs	r2, #2
 8006886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800688a:	2112      	movs	r1, #18
 800688c:	f7ff bf86 	b.w	800679c <std>
 8006890:	200005a4 	.word	0x200005a4
 8006894:	2000046c 	.word	0x2000046c
 8006898:	08006809 	.word	0x08006809

0800689c <__sfp_lock_acquire>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sfp_lock_acquire+0x8>)
 800689e:	f000 b91a 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	200005ad 	.word	0x200005ad

080068a8 <__sfp_lock_release>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_release+0x8>)
 80068aa:	f000 b915 	b.w	8006ad8 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	200005ad 	.word	0x200005ad

080068b4 <__sinit>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	f7ff fff0 	bl	800689c <__sfp_lock_acquire>
 80068bc:	6a23      	ldr	r3, [r4, #32]
 80068be:	b11b      	cbz	r3, 80068c8 <__sinit+0x14>
 80068c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c4:	f7ff bff0 	b.w	80068a8 <__sfp_lock_release>
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <__sinit+0x28>)
 80068ca:	6223      	str	r3, [r4, #32]
 80068cc:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <__sinit+0x2c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f5      	bne.n	80068c0 <__sinit+0xc>
 80068d4:	f7ff ffc4 	bl	8006860 <global_stdio_init.part.0>
 80068d8:	e7f2      	b.n	80068c0 <__sinit+0xc>
 80068da:	bf00      	nop
 80068dc:	08006821 	.word	0x08006821
 80068e0:	200005a4 	.word	0x200005a4

080068e4 <_fwalk_sglue>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	4607      	mov	r7, r0
 80068ea:	4688      	mov	r8, r1
 80068ec:	4614      	mov	r4, r2
 80068ee:	2600      	movs	r6, #0
 80068f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068f4:	f1b9 0901 	subs.w	r9, r9, #1
 80068f8:	d505      	bpl.n	8006906 <_fwalk_sglue+0x22>
 80068fa:	6824      	ldr	r4, [r4, #0]
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d1f7      	bne.n	80068f0 <_fwalk_sglue+0xc>
 8006900:	4630      	mov	r0, r6
 8006902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d907      	bls.n	800691c <_fwalk_sglue+0x38>
 800690c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006910:	3301      	adds	r3, #1
 8006912:	d003      	beq.n	800691c <_fwalk_sglue+0x38>
 8006914:	4629      	mov	r1, r5
 8006916:	4638      	mov	r0, r7
 8006918:	47c0      	blx	r8
 800691a:	4306      	orrs	r6, r0
 800691c:	3568      	adds	r5, #104	; 0x68
 800691e:	e7e9      	b.n	80068f4 <_fwalk_sglue+0x10>

08006920 <iprintf>:
 8006920:	b40f      	push	{r0, r1, r2, r3}
 8006922:	b507      	push	{r0, r1, r2, lr}
 8006924:	4906      	ldr	r1, [pc, #24]	; (8006940 <iprintf+0x20>)
 8006926:	ab04      	add	r3, sp, #16
 8006928:	6808      	ldr	r0, [r1, #0]
 800692a:	f853 2b04 	ldr.w	r2, [r3], #4
 800692e:	6881      	ldr	r1, [r0, #8]
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	f001 fbf5 	bl	8008120 <_vfiprintf_r>
 8006936:	b003      	add	sp, #12
 8006938:	f85d eb04 	ldr.w	lr, [sp], #4
 800693c:	b004      	add	sp, #16
 800693e:	4770      	bx	lr
 8006940:	20000094 	.word	0x20000094

08006944 <putchar>:
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <putchar+0xc>)
 8006946:	4601      	mov	r1, r0
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	6882      	ldr	r2, [r0, #8]
 800694c:	f001 bdb0 	b.w	80084b0 <_putc_r>
 8006950:	20000094 	.word	0x20000094

08006954 <__sread>:
 8006954:	b510      	push	{r4, lr}
 8006956:	460c      	mov	r4, r1
 8006958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695c:	f000 f86c 	bl	8006a38 <_read_r>
 8006960:	2800      	cmp	r0, #0
 8006962:	bfab      	itete	ge
 8006964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006966:	89a3      	ldrhlt	r3, [r4, #12]
 8006968:	181b      	addge	r3, r3, r0
 800696a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800696e:	bfac      	ite	ge
 8006970:	6563      	strge	r3, [r4, #84]	; 0x54
 8006972:	81a3      	strhlt	r3, [r4, #12]
 8006974:	bd10      	pop	{r4, pc}

08006976 <__swrite>:
 8006976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697a:	461f      	mov	r7, r3
 800697c:	898b      	ldrh	r3, [r1, #12]
 800697e:	05db      	lsls	r3, r3, #23
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	4616      	mov	r6, r2
 8006986:	d505      	bpl.n	8006994 <__swrite+0x1e>
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2302      	movs	r3, #2
 800698e:	2200      	movs	r2, #0
 8006990:	f000 f840 	bl	8006a14 <_lseek_r>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800699a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	4632      	mov	r2, r6
 80069a2:	463b      	mov	r3, r7
 80069a4:	4628      	mov	r0, r5
 80069a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069aa:	f000 b857 	b.w	8006a5c <_write_r>

080069ae <__sseek>:
 80069ae:	b510      	push	{r4, lr}
 80069b0:	460c      	mov	r4, r1
 80069b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b6:	f000 f82d 	bl	8006a14 <_lseek_r>
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	bf15      	itete	ne
 80069c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80069c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069ca:	81a3      	strheq	r3, [r4, #12]
 80069cc:	bf18      	it	ne
 80069ce:	81a3      	strhne	r3, [r4, #12]
 80069d0:	bd10      	pop	{r4, pc}

080069d2 <__sclose>:
 80069d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d6:	f000 b80d 	b.w	80069f4 <_close_r>

080069da <memset>:
 80069da:	4402      	add	r2, r0
 80069dc:	4603      	mov	r3, r0
 80069de:	4293      	cmp	r3, r2
 80069e0:	d100      	bne.n	80069e4 <memset+0xa>
 80069e2:	4770      	bx	lr
 80069e4:	f803 1b01 	strb.w	r1, [r3], #1
 80069e8:	e7f9      	b.n	80069de <memset+0x4>
	...

080069ec <_localeconv_r>:
 80069ec:	4800      	ldr	r0, [pc, #0]	; (80069f0 <_localeconv_r+0x4>)
 80069ee:	4770      	bx	lr
 80069f0:	20000188 	.word	0x20000188

080069f4 <_close_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	; (8006a10 <_close_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fb f879 	bl	8001af6 <_close>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_close_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_close_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	200005a8 	.word	0x200005a8

08006a14 <_lseek_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4d07      	ldr	r5, [pc, #28]	; (8006a34 <_lseek_r+0x20>)
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	602a      	str	r2, [r5, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7fb f88e 	bl	8001b44 <_lseek>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_lseek_r+0x1e>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_lseek_r+0x1e>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	200005a8 	.word	0x200005a8

08006a38 <_read_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d07      	ldr	r5, [pc, #28]	; (8006a58 <_read_r+0x20>)
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	4608      	mov	r0, r1
 8006a40:	4611      	mov	r1, r2
 8006a42:	2200      	movs	r2, #0
 8006a44:	602a      	str	r2, [r5, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f7fb f838 	bl	8001abc <_read>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_read_r+0x1e>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_read_r+0x1e>
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200005a8 	.word	0x200005a8

08006a5c <_write_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d07      	ldr	r5, [pc, #28]	; (8006a7c <_write_r+0x20>)
 8006a60:	4604      	mov	r4, r0
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f7fa fa8a 	bl	8000f84 <_write>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_write_r+0x1e>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_write_r+0x1e>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	200005a8 	.word	0x200005a8

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	; (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000094 	.word	0x20000094

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	; (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	; (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f002 f974 	bl	8008d8c <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	08009240 	.word	0x08009240
 8006ac8:	08009240 	.word	0x08009240
 8006acc:	08009240 	.word	0x08009240
 8006ad0:	08009244 	.word	0x08009244

08006ad4 <__retarget_lock_init_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_acquire_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <__retarget_lock_release_recursive>:
 8006ad8:	4770      	bx	lr

08006ada <quorem>:
 8006ada:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ade:	6903      	ldr	r3, [r0, #16]
 8006ae0:	690c      	ldr	r4, [r1, #16]
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	db7e      	blt.n	8006be6 <quorem+0x10c>
 8006ae8:	3c01      	subs	r4, #1
 8006aea:	f101 0814 	add.w	r8, r1, #20
 8006aee:	f100 0514 	add.w	r5, r0, #20
 8006af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006afc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b00:	3301      	adds	r3, #1
 8006b02:	429a      	cmp	r2, r3
 8006b04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b10:	d331      	bcc.n	8006b76 <quorem+0x9c>
 8006b12:	f04f 0e00 	mov.w	lr, #0
 8006b16:	4640      	mov	r0, r8
 8006b18:	46ac      	mov	ip, r5
 8006b1a:	46f2      	mov	sl, lr
 8006b1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b20:	b293      	uxth	r3, r2
 8006b22:	fb06 e303 	mla	r3, r6, r3, lr
 8006b26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b2a:	0c1a      	lsrs	r2, r3, #16
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	ebaa 0303 	sub.w	r3, sl, r3
 8006b32:	f8dc a000 	ldr.w	sl, [ip]
 8006b36:	fa13 f38a 	uxtah	r3, r3, sl
 8006b3a:	fb06 220e 	mla	r2, r6, lr, r2
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b46:	b292      	uxth	r2, r2
 8006b48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b50:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b54:	4581      	cmp	r9, r0
 8006b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b5a:	f84c 3b04 	str.w	r3, [ip], #4
 8006b5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b62:	d2db      	bcs.n	8006b1c <quorem+0x42>
 8006b64:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b68:	b92b      	cbnz	r3, 8006b76 <quorem+0x9c>
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	3b04      	subs	r3, #4
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	d32c      	bcc.n	8006bce <quorem+0xf4>
 8006b74:	613c      	str	r4, [r7, #16]
 8006b76:	4638      	mov	r0, r7
 8006b78:	f001 f9a8 	bl	8007ecc <__mcmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	db22      	blt.n	8006bc6 <quorem+0xec>
 8006b80:	3601      	adds	r6, #1
 8006b82:	4629      	mov	r1, r5
 8006b84:	2000      	movs	r0, #0
 8006b86:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b8a:	f8d1 c000 	ldr.w	ip, [r1]
 8006b8e:	b293      	uxth	r3, r2
 8006b90:	1ac3      	subs	r3, r0, r3
 8006b92:	0c12      	lsrs	r2, r2, #16
 8006b94:	fa13 f38c 	uxtah	r3, r3, ip
 8006b98:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ba6:	45c1      	cmp	r9, r8
 8006ba8:	f841 3b04 	str.w	r3, [r1], #4
 8006bac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bb0:	d2e9      	bcs.n	8006b86 <quorem+0xac>
 8006bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bba:	b922      	cbnz	r2, 8006bc6 <quorem+0xec>
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	d30a      	bcc.n	8006bda <quorem+0x100>
 8006bc4:	613c      	str	r4, [r7, #16]
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	b003      	add	sp, #12
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	d1ce      	bne.n	8006b74 <quorem+0x9a>
 8006bd6:	3c01      	subs	r4, #1
 8006bd8:	e7c9      	b.n	8006b6e <quorem+0x94>
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	3b04      	subs	r3, #4
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	d1f0      	bne.n	8006bc4 <quorem+0xea>
 8006be2:	3c01      	subs	r4, #1
 8006be4:	e7eb      	b.n	8006bbe <quorem+0xe4>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e7ee      	b.n	8006bc8 <quorem+0xee>
 8006bea:	0000      	movs	r0, r0
 8006bec:	0000      	movs	r0, r0
	...

08006bf0 <_dtoa_r>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	ed2d 8b04 	vpush	{d8-d9}
 8006bf8:	69c5      	ldr	r5, [r0, #28]
 8006bfa:	b093      	sub	sp, #76	; 0x4c
 8006bfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c00:	ec57 6b10 	vmov	r6, r7, d0
 8006c04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c08:	9107      	str	r1, [sp, #28]
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c10:	b975      	cbnz	r5, 8006c30 <_dtoa_r+0x40>
 8006c12:	2010      	movs	r0, #16
 8006c14:	f000 fe2a 	bl	800786c <malloc>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	61e0      	str	r0, [r4, #28]
 8006c1c:	b920      	cbnz	r0, 8006c28 <_dtoa_r+0x38>
 8006c1e:	4bae      	ldr	r3, [pc, #696]	; (8006ed8 <_dtoa_r+0x2e8>)
 8006c20:	21ef      	movs	r1, #239	; 0xef
 8006c22:	48ae      	ldr	r0, [pc, #696]	; (8006edc <_dtoa_r+0x2ec>)
 8006c24:	f001 fd2c 	bl	8008680 <__assert_func>
 8006c28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c2c:	6005      	str	r5, [r0, #0]
 8006c2e:	60c5      	str	r5, [r0, #12]
 8006c30:	69e3      	ldr	r3, [r4, #28]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	b151      	cbz	r1, 8006c4c <_dtoa_r+0x5c>
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	604a      	str	r2, [r1, #4]
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4093      	lsls	r3, r2
 8006c3e:	608b      	str	r3, [r1, #8]
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 ff07 	bl	8007a54 <_Bfree>
 8006c46:	69e3      	ldr	r3, [r4, #28]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	1e3b      	subs	r3, r7, #0
 8006c4e:	bfbb      	ittet	lt
 8006c50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c54:	9303      	strlt	r3, [sp, #12]
 8006c56:	2300      	movge	r3, #0
 8006c58:	2201      	movlt	r2, #1
 8006c5a:	bfac      	ite	ge
 8006c5c:	f8c8 3000 	strge.w	r3, [r8]
 8006c60:	f8c8 2000 	strlt.w	r2, [r8]
 8006c64:	4b9e      	ldr	r3, [pc, #632]	; (8006ee0 <_dtoa_r+0x2f0>)
 8006c66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c6a:	ea33 0308 	bics.w	r3, r3, r8
 8006c6e:	d11b      	bne.n	8006ca8 <_dtoa_r+0xb8>
 8006c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c72:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c7c:	4333      	orrs	r3, r6
 8006c7e:	f000 8593 	beq.w	80077a8 <_dtoa_r+0xbb8>
 8006c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c84:	b963      	cbnz	r3, 8006ca0 <_dtoa_r+0xb0>
 8006c86:	4b97      	ldr	r3, [pc, #604]	; (8006ee4 <_dtoa_r+0x2f4>)
 8006c88:	e027      	b.n	8006cda <_dtoa_r+0xea>
 8006c8a:	4b97      	ldr	r3, [pc, #604]	; (8006ee8 <_dtoa_r+0x2f8>)
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	9800      	ldr	r0, [sp, #0]
 8006c96:	b013      	add	sp, #76	; 0x4c
 8006c98:	ecbd 8b04 	vpop	{d8-d9}
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	4b90      	ldr	r3, [pc, #576]	; (8006ee4 <_dtoa_r+0x2f4>)
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	3303      	adds	r3, #3
 8006ca6:	e7f3      	b.n	8006c90 <_dtoa_r+0xa0>
 8006ca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	ec51 0b17 	vmov	r0, r1, d7
 8006cb2:	eeb0 8a47 	vmov.f32	s16, s14
 8006cb6:	eef0 8a67 	vmov.f32	s17, s15
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f7f9 ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8006cc0:	4681      	mov	r9, r0
 8006cc2:	b160      	cbz	r0, 8006cde <_dtoa_r+0xee>
 8006cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8568 	beq.w	80077a2 <_dtoa_r+0xbb2>
 8006cd2:	4b86      	ldr	r3, [pc, #536]	; (8006eec <_dtoa_r+0x2fc>)
 8006cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	e7da      	b.n	8006c94 <_dtoa_r+0xa4>
 8006cde:	aa10      	add	r2, sp, #64	; 0x40
 8006ce0:	a911      	add	r1, sp, #68	; 0x44
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ce8:	eef0 0a68 	vmov.f32	s1, s17
 8006cec:	f001 f994 	bl	8008018 <__d2b>
 8006cf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	d07f      	beq.n	8006dfa <_dtoa_r+0x20a>
 8006cfa:	ee18 3a90 	vmov	r3, s17
 8006cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d06:	ec51 0b18 	vmov	r0, r1, d8
 8006d0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d16:	4619      	mov	r1, r3
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b75      	ldr	r3, [pc, #468]	; (8006ef0 <_dtoa_r+0x300>)
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	a367      	add	r3, pc, #412	; (adr r3, 8006ec0 <_dtoa_r+0x2d0>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fc87 	bl	8000638 <__aeabi_dmul>
 8006d2a:	a367      	add	r3, pc, #412	; (adr r3, 8006ec8 <_dtoa_r+0x2d8>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f7f9 facc 	bl	80002cc <__adddf3>
 8006d34:	4606      	mov	r6, r0
 8006d36:	4628      	mov	r0, r5
 8006d38:	460f      	mov	r7, r1
 8006d3a:	f7f9 fc13 	bl	8000564 <__aeabi_i2d>
 8006d3e:	a364      	add	r3, pc, #400	; (adr r3, 8006ed0 <_dtoa_r+0x2e0>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fabc 	bl	80002cc <__adddf3>
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	f7f9 ff1e 	bl	8000b98 <__aeabi_d2iz>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4683      	mov	fp, r0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fed9 	bl	8000b1c <__aeabi_dcmplt>
 8006d6a:	b148      	cbz	r0, 8006d80 <_dtoa_r+0x190>
 8006d6c:	4658      	mov	r0, fp
 8006d6e:	f7f9 fbf9 	bl	8000564 <__aeabi_i2d>
 8006d72:	4632      	mov	r2, r6
 8006d74:	463b      	mov	r3, r7
 8006d76:	f7f9 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 8006d7a:	b908      	cbnz	r0, 8006d80 <_dtoa_r+0x190>
 8006d7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d80:	f1bb 0f16 	cmp.w	fp, #22
 8006d84:	d857      	bhi.n	8006e36 <_dtoa_r+0x246>
 8006d86:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <_dtoa_r+0x304>)
 8006d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	ec51 0b18 	vmov	r0, r1, d8
 8006d94:	f7f9 fec2 	bl	8000b1c <__aeabi_dcmplt>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d04e      	beq.n	8006e3a <_dtoa_r+0x24a>
 8006d9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006da0:	2300      	movs	r3, #0
 8006da2:	930c      	str	r3, [sp, #48]	; 0x30
 8006da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006da6:	1b5b      	subs	r3, r3, r5
 8006da8:	1e5a      	subs	r2, r3, #1
 8006daa:	bf45      	ittet	mi
 8006dac:	f1c3 0301 	rsbmi	r3, r3, #1
 8006db0:	9305      	strmi	r3, [sp, #20]
 8006db2:	2300      	movpl	r3, #0
 8006db4:	2300      	movmi	r3, #0
 8006db6:	9206      	str	r2, [sp, #24]
 8006db8:	bf54      	ite	pl
 8006dba:	9305      	strpl	r3, [sp, #20]
 8006dbc:	9306      	strmi	r3, [sp, #24]
 8006dbe:	f1bb 0f00 	cmp.w	fp, #0
 8006dc2:	db3c      	blt.n	8006e3e <_dtoa_r+0x24e>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006dca:	445b      	add	r3, fp
 8006dcc:	9306      	str	r3, [sp, #24]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d868      	bhi.n	8006eaa <_dtoa_r+0x2ba>
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	bfc4      	itt	gt
 8006ddc:	3b04      	subgt	r3, #4
 8006dde:	9307      	strgt	r3, [sp, #28]
 8006de0:	9b07      	ldr	r3, [sp, #28]
 8006de2:	f1a3 0302 	sub.w	r3, r3, #2
 8006de6:	bfcc      	ite	gt
 8006de8:	2500      	movgt	r5, #0
 8006dea:	2501      	movle	r5, #1
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	f200 8085 	bhi.w	8006efc <_dtoa_r+0x30c>
 8006df2:	e8df f003 	tbb	[pc, r3]
 8006df6:	3b2e      	.short	0x3b2e
 8006df8:	5839      	.short	0x5839
 8006dfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006dfe:	441d      	add	r5, r3
 8006e00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	bfc1      	itttt	gt
 8006e08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006e14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e18:	bfd6      	itet	le
 8006e1a:	f1c3 0320 	rsble	r3, r3, #32
 8006e1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e22:	fa06 f003 	lslle.w	r0, r6, r3
 8006e26:	f7f9 fb8d 	bl	8000544 <__aeabi_ui2d>
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e30:	3d01      	subs	r5, #1
 8006e32:	920e      	str	r2, [sp, #56]	; 0x38
 8006e34:	e76f      	b.n	8006d16 <_dtoa_r+0x126>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e7b3      	b.n	8006da2 <_dtoa_r+0x1b2>
 8006e3a:	900c      	str	r0, [sp, #48]	; 0x30
 8006e3c:	e7b2      	b.n	8006da4 <_dtoa_r+0x1b4>
 8006e3e:	9b05      	ldr	r3, [sp, #20]
 8006e40:	eba3 030b 	sub.w	r3, r3, fp
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	f1cb 0300 	rsb	r3, fp, #0
 8006e4a:	9308      	str	r3, [sp, #32]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e50:	e7bf      	b.n	8006dd2 <_dtoa_r+0x1e2>
 8006e52:	2300      	movs	r3, #0
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dc52      	bgt.n	8006f02 <_dtoa_r+0x312>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	461a      	mov	r2, r3
 8006e64:	920a      	str	r2, [sp, #40]	; 0x28
 8006e66:	e00b      	b.n	8006e80 <_dtoa_r+0x290>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e7f3      	b.n	8006e54 <_dtoa_r+0x264>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	445b      	add	r3, fp
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	3301      	adds	r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	bfb8      	it	lt
 8006e7e:	2301      	movlt	r3, #1
 8006e80:	69e0      	ldr	r0, [r4, #28]
 8006e82:	2100      	movs	r1, #0
 8006e84:	2204      	movs	r2, #4
 8006e86:	f102 0614 	add.w	r6, r2, #20
 8006e8a:	429e      	cmp	r6, r3
 8006e8c:	d93d      	bls.n	8006f0a <_dtoa_r+0x31a>
 8006e8e:	6041      	str	r1, [r0, #4]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fd9f 	bl	80079d4 <_Balloc>
 8006e96:	9000      	str	r0, [sp, #0]
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d139      	bne.n	8006f10 <_dtoa_r+0x320>
 8006e9c:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <_dtoa_r+0x308>)
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ea4:	e6bd      	b.n	8006c22 <_dtoa_r+0x32>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e7e1      	b.n	8006e6e <_dtoa_r+0x27e>
 8006eaa:	2501      	movs	r5, #1
 8006eac:	2300      	movs	r3, #0
 8006eae:	9307      	str	r3, [sp, #28]
 8006eb0:	9509      	str	r5, [sp, #36]	; 0x24
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2312      	movs	r3, #18
 8006ebe:	e7d1      	b.n	8006e64 <_dtoa_r+0x274>
 8006ec0:	636f4361 	.word	0x636f4361
 8006ec4:	3fd287a7 	.word	0x3fd287a7
 8006ec8:	8b60c8b3 	.word	0x8b60c8b3
 8006ecc:	3fc68a28 	.word	0x3fc68a28
 8006ed0:	509f79fb 	.word	0x509f79fb
 8006ed4:	3fd34413 	.word	0x3fd34413
 8006ed8:	08008ed5 	.word	0x08008ed5
 8006edc:	08008eec 	.word	0x08008eec
 8006ee0:	7ff00000 	.word	0x7ff00000
 8006ee4:	08008ed1 	.word	0x08008ed1
 8006ee8:	08008ec8 	.word	0x08008ec8
 8006eec:	08008ea5 	.word	0x08008ea5
 8006ef0:	3ff80000 	.word	0x3ff80000
 8006ef4:	08008fd8 	.word	0x08008fd8
 8006ef8:	08008f44 	.word	0x08008f44
 8006efc:	2301      	movs	r3, #1
 8006efe:	9309      	str	r3, [sp, #36]	; 0x24
 8006f00:	e7d7      	b.n	8006eb2 <_dtoa_r+0x2c2>
 8006f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	e7ba      	b.n	8006e80 <_dtoa_r+0x290>
 8006f0a:	3101      	adds	r1, #1
 8006f0c:	0052      	lsls	r2, r2, #1
 8006f0e:	e7ba      	b.n	8006e86 <_dtoa_r+0x296>
 8006f10:	69e3      	ldr	r3, [r4, #28]
 8006f12:	9a00      	ldr	r2, [sp, #0]
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	2b0e      	cmp	r3, #14
 8006f1a:	f200 80a8 	bhi.w	800706e <_dtoa_r+0x47e>
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	f000 80a5 	beq.w	800706e <_dtoa_r+0x47e>
 8006f24:	f1bb 0f00 	cmp.w	fp, #0
 8006f28:	dd38      	ble.n	8006f9c <_dtoa_r+0x3ac>
 8006f2a:	4bc0      	ldr	r3, [pc, #768]	; (800722c <_dtoa_r+0x63c>)
 8006f2c:	f00b 020f 	and.w	r2, fp, #15
 8006f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f40:	d019      	beq.n	8006f76 <_dtoa_r+0x386>
 8006f42:	4bbb      	ldr	r3, [pc, #748]	; (8007230 <_dtoa_r+0x640>)
 8006f44:	ec51 0b18 	vmov	r0, r1, d8
 8006f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f4c:	f7f9 fc9e 	bl	800088c <__aeabi_ddiv>
 8006f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f54:	f008 080f 	and.w	r8, r8, #15
 8006f58:	2503      	movs	r5, #3
 8006f5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007230 <_dtoa_r+0x640>
 8006f5e:	f1b8 0f00 	cmp.w	r8, #0
 8006f62:	d10a      	bne.n	8006f7a <_dtoa_r+0x38a>
 8006f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	f7f9 fc8e 	bl	800088c <__aeabi_ddiv>
 8006f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f74:	e02b      	b.n	8006fce <_dtoa_r+0x3de>
 8006f76:	2502      	movs	r5, #2
 8006f78:	e7ef      	b.n	8006f5a <_dtoa_r+0x36a>
 8006f7a:	f018 0f01 	tst.w	r8, #1
 8006f7e:	d008      	beq.n	8006f92 <_dtoa_r+0x3a2>
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460f      	mov	r7, r1
 8006f92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f96:	f109 0908 	add.w	r9, r9, #8
 8006f9a:	e7e0      	b.n	8006f5e <_dtoa_r+0x36e>
 8006f9c:	f000 809f 	beq.w	80070de <_dtoa_r+0x4ee>
 8006fa0:	f1cb 0600 	rsb	r6, fp, #0
 8006fa4:	4ba1      	ldr	r3, [pc, #644]	; (800722c <_dtoa_r+0x63c>)
 8006fa6:	4fa2      	ldr	r7, [pc, #648]	; (8007230 <_dtoa_r+0x640>)
 8006fa8:	f006 020f 	and.w	r2, r6, #15
 8006fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	ec51 0b18 	vmov	r0, r1, d8
 8006fb8:	f7f9 fb3e 	bl	8000638 <__aeabi_dmul>
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	1136      	asrs	r6, r6, #4
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2502      	movs	r5, #2
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d17e      	bne.n	80070c8 <_dtoa_r+0x4d8>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1d0      	bne.n	8006f70 <_dtoa_r+0x380>
 8006fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8084 	beq.w	80070e2 <_dtoa_r+0x4f2>
 8006fda:	4b96      	ldr	r3, [pc, #600]	; (8007234 <_dtoa_r+0x644>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d07b      	beq.n	80070e2 <_dtoa_r+0x4f2>
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d078      	beq.n	80070e2 <_dtoa_r+0x4f2>
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd39      	ble.n	800706a <_dtoa_r+0x47a>
 8006ff6:	4b90      	ldr	r3, [pc, #576]	; (8007238 <_dtoa_r+0x648>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 fb1b 	bl	8000638 <__aeabi_dmul>
 8007002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007006:	9e01      	ldr	r6, [sp, #4]
 8007008:	f10b 37ff 	add.w	r7, fp, #4294967295
 800700c:	3501      	adds	r5, #1
 800700e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007012:	4628      	mov	r0, r5
 8007014:	f7f9 faa6 	bl	8000564 <__aeabi_i2d>
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	f7f9 fb0c 	bl	8000638 <__aeabi_dmul>
 8007020:	4b86      	ldr	r3, [pc, #536]	; (800723c <_dtoa_r+0x64c>)
 8007022:	2200      	movs	r2, #0
 8007024:	f7f9 f952 	bl	80002cc <__adddf3>
 8007028:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800702c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	2e00      	cmp	r6, #0
 8007034:	d158      	bne.n	80070e8 <_dtoa_r+0x4f8>
 8007036:	4b82      	ldr	r3, [pc, #520]	; (8007240 <_dtoa_r+0x650>)
 8007038:	2200      	movs	r2, #0
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 f943 	bl	80002c8 <__aeabi_dsub>
 8007042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007046:	4680      	mov	r8, r0
 8007048:	4689      	mov	r9, r1
 800704a:	f7f9 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8296 	bne.w	8007580 <_dtoa_r+0x990>
 8007054:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007058:	4640      	mov	r0, r8
 800705a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	f040 8289 	bne.w	800757c <_dtoa_r+0x98c>
 800706a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800706e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007070:	2b00      	cmp	r3, #0
 8007072:	f2c0 814e 	blt.w	8007312 <_dtoa_r+0x722>
 8007076:	f1bb 0f0e 	cmp.w	fp, #14
 800707a:	f300 814a 	bgt.w	8007312 <_dtoa_r+0x722>
 800707e:	4b6b      	ldr	r3, [pc, #428]	; (800722c <_dtoa_r+0x63c>)
 8007080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	f280 80dc 	bge.w	8007248 <_dtoa_r+0x658>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f300 80d8 	bgt.w	8007248 <_dtoa_r+0x658>
 8007098:	f040 826f 	bne.w	800757a <_dtoa_r+0x98a>
 800709c:	4b68      	ldr	r3, [pc, #416]	; (8007240 <_dtoa_r+0x650>)
 800709e:	2200      	movs	r2, #0
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 fac8 	bl	8000638 <__aeabi_dmul>
 80070a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ac:	f7f9 fd4a 	bl	8000b44 <__aeabi_dcmpge>
 80070b0:	9e04      	ldr	r6, [sp, #16]
 80070b2:	4637      	mov	r7, r6
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f040 8245 	bne.w	8007544 <_dtoa_r+0x954>
 80070ba:	9d00      	ldr	r5, [sp, #0]
 80070bc:	2331      	movs	r3, #49	; 0x31
 80070be:	f805 3b01 	strb.w	r3, [r5], #1
 80070c2:	f10b 0b01 	add.w	fp, fp, #1
 80070c6:	e241      	b.n	800754c <_dtoa_r+0x95c>
 80070c8:	07f2      	lsls	r2, r6, #31
 80070ca:	d505      	bpl.n	80070d8 <_dtoa_r+0x4e8>
 80070cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d0:	f7f9 fab2 	bl	8000638 <__aeabi_dmul>
 80070d4:	3501      	adds	r5, #1
 80070d6:	2301      	movs	r3, #1
 80070d8:	1076      	asrs	r6, r6, #1
 80070da:	3708      	adds	r7, #8
 80070dc:	e773      	b.n	8006fc6 <_dtoa_r+0x3d6>
 80070de:	2502      	movs	r5, #2
 80070e0:	e775      	b.n	8006fce <_dtoa_r+0x3de>
 80070e2:	9e04      	ldr	r6, [sp, #16]
 80070e4:	465f      	mov	r7, fp
 80070e6:	e792      	b.n	800700e <_dtoa_r+0x41e>
 80070e8:	9900      	ldr	r1, [sp, #0]
 80070ea:	4b50      	ldr	r3, [pc, #320]	; (800722c <_dtoa_r+0x63c>)
 80070ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070f0:	4431      	add	r1, r6
 80070f2:	9102      	str	r1, [sp, #8]
 80070f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f6:	eeb0 9a47 	vmov.f32	s18, s14
 80070fa:	eef0 9a67 	vmov.f32	s19, s15
 80070fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007106:	2900      	cmp	r1, #0
 8007108:	d044      	beq.n	8007194 <_dtoa_r+0x5a4>
 800710a:	494e      	ldr	r1, [pc, #312]	; (8007244 <_dtoa_r+0x654>)
 800710c:	2000      	movs	r0, #0
 800710e:	f7f9 fbbd 	bl	800088c <__aeabi_ddiv>
 8007112:	ec53 2b19 	vmov	r2, r3, d9
 8007116:	f7f9 f8d7 	bl	80002c8 <__aeabi_dsub>
 800711a:	9d00      	ldr	r5, [sp, #0]
 800711c:	ec41 0b19 	vmov	d9, r0, r1
 8007120:	4649      	mov	r1, r9
 8007122:	4640      	mov	r0, r8
 8007124:	f7f9 fd38 	bl	8000b98 <__aeabi_d2iz>
 8007128:	4606      	mov	r6, r0
 800712a:	f7f9 fa1b 	bl	8000564 <__aeabi_i2d>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 f8c7 	bl	80002c8 <__aeabi_dsub>
 800713a:	3630      	adds	r6, #48	; 0x30
 800713c:	f805 6b01 	strb.w	r6, [r5], #1
 8007140:	ec53 2b19 	vmov	r2, r3, d9
 8007144:	4680      	mov	r8, r0
 8007146:	4689      	mov	r9, r1
 8007148:	f7f9 fce8 	bl	8000b1c <__aeabi_dcmplt>
 800714c:	2800      	cmp	r0, #0
 800714e:	d164      	bne.n	800721a <_dtoa_r+0x62a>
 8007150:	4642      	mov	r2, r8
 8007152:	464b      	mov	r3, r9
 8007154:	4937      	ldr	r1, [pc, #220]	; (8007234 <_dtoa_r+0x644>)
 8007156:	2000      	movs	r0, #0
 8007158:	f7f9 f8b6 	bl	80002c8 <__aeabi_dsub>
 800715c:	ec53 2b19 	vmov	r2, r3, d9
 8007160:	f7f9 fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8007164:	2800      	cmp	r0, #0
 8007166:	f040 80b6 	bne.w	80072d6 <_dtoa_r+0x6e6>
 800716a:	9b02      	ldr	r3, [sp, #8]
 800716c:	429d      	cmp	r5, r3
 800716e:	f43f af7c 	beq.w	800706a <_dtoa_r+0x47a>
 8007172:	4b31      	ldr	r3, [pc, #196]	; (8007238 <_dtoa_r+0x648>)
 8007174:	ec51 0b19 	vmov	r0, r1, d9
 8007178:	2200      	movs	r2, #0
 800717a:	f7f9 fa5d 	bl	8000638 <__aeabi_dmul>
 800717e:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <_dtoa_r+0x648>)
 8007180:	ec41 0b19 	vmov	d9, r0, r1
 8007184:	2200      	movs	r2, #0
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 fa55 	bl	8000638 <__aeabi_dmul>
 800718e:	4680      	mov	r8, r0
 8007190:	4689      	mov	r9, r1
 8007192:	e7c5      	b.n	8007120 <_dtoa_r+0x530>
 8007194:	ec51 0b17 	vmov	r0, r1, d7
 8007198:	f7f9 fa4e 	bl	8000638 <__aeabi_dmul>
 800719c:	9b02      	ldr	r3, [sp, #8]
 800719e:	9d00      	ldr	r5, [sp, #0]
 80071a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a2:	ec41 0b19 	vmov	d9, r0, r1
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	f7f9 fcf5 	bl	8000b98 <__aeabi_d2iz>
 80071ae:	4606      	mov	r6, r0
 80071b0:	f7f9 f9d8 	bl	8000564 <__aeabi_i2d>
 80071b4:	3630      	adds	r6, #48	; 0x30
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 f883 	bl	80002c8 <__aeabi_dsub>
 80071c2:	f805 6b01 	strb.w	r6, [r5], #1
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	429d      	cmp	r5, r3
 80071ca:	4680      	mov	r8, r0
 80071cc:	4689      	mov	r9, r1
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	d124      	bne.n	800721e <_dtoa_r+0x62e>
 80071d4:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <_dtoa_r+0x654>)
 80071d6:	ec51 0b19 	vmov	r0, r1, d9
 80071da:	f7f9 f877 	bl	80002cc <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4640      	mov	r0, r8
 80071e4:	4649      	mov	r1, r9
 80071e6:	f7f9 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d173      	bne.n	80072d6 <_dtoa_r+0x6e6>
 80071ee:	ec53 2b19 	vmov	r2, r3, d9
 80071f2:	4914      	ldr	r1, [pc, #80]	; (8007244 <_dtoa_r+0x654>)
 80071f4:	2000      	movs	r0, #0
 80071f6:	f7f9 f867 	bl	80002c8 <__aeabi_dsub>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f9 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f af2f 	beq.w	800706a <_dtoa_r+0x47a>
 800720c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800720e:	1e6b      	subs	r3, r5, #1
 8007210:	930f      	str	r3, [sp, #60]	; 0x3c
 8007212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007216:	2b30      	cmp	r3, #48	; 0x30
 8007218:	d0f8      	beq.n	800720c <_dtoa_r+0x61c>
 800721a:	46bb      	mov	fp, r7
 800721c:	e04a      	b.n	80072b4 <_dtoa_r+0x6c4>
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <_dtoa_r+0x648>)
 8007220:	f7f9 fa0a 	bl	8000638 <__aeabi_dmul>
 8007224:	4680      	mov	r8, r0
 8007226:	4689      	mov	r9, r1
 8007228:	e7bd      	b.n	80071a6 <_dtoa_r+0x5b6>
 800722a:	bf00      	nop
 800722c:	08008fd8 	.word	0x08008fd8
 8007230:	08008fb0 	.word	0x08008fb0
 8007234:	3ff00000 	.word	0x3ff00000
 8007238:	40240000 	.word	0x40240000
 800723c:	401c0000 	.word	0x401c0000
 8007240:	40140000 	.word	0x40140000
 8007244:	3fe00000 	.word	0x3fe00000
 8007248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800724c:	9d00      	ldr	r5, [sp, #0]
 800724e:	4642      	mov	r2, r8
 8007250:	464b      	mov	r3, r9
 8007252:	4630      	mov	r0, r6
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 fb19 	bl	800088c <__aeabi_ddiv>
 800725a:	f7f9 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800725e:	9001      	str	r0, [sp, #4]
 8007260:	f7f9 f980 	bl	8000564 <__aeabi_i2d>
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	f7f9 f9e6 	bl	8000638 <__aeabi_dmul>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f9 f828 	bl	80002c8 <__aeabi_dsub>
 8007278:	9e01      	ldr	r6, [sp, #4]
 800727a:	9f04      	ldr	r7, [sp, #16]
 800727c:	3630      	adds	r6, #48	; 0x30
 800727e:	f805 6b01 	strb.w	r6, [r5], #1
 8007282:	9e00      	ldr	r6, [sp, #0]
 8007284:	1bae      	subs	r6, r5, r6
 8007286:	42b7      	cmp	r7, r6
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	d134      	bne.n	80072f8 <_dtoa_r+0x708>
 800728e:	f7f9 f81d 	bl	80002cc <__adddf3>
 8007292:	4642      	mov	r2, r8
 8007294:	464b      	mov	r3, r9
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800729e:	b9c8      	cbnz	r0, 80072d4 <_dtoa_r+0x6e4>
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80072ac:	b110      	cbz	r0, 80072b4 <_dtoa_r+0x6c4>
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	07db      	lsls	r3, r3, #31
 80072b2:	d40f      	bmi.n	80072d4 <_dtoa_r+0x6e4>
 80072b4:	4651      	mov	r1, sl
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 fbcc 	bl	8007a54 <_Bfree>
 80072bc:	2300      	movs	r3, #0
 80072be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072c0:	702b      	strb	r3, [r5, #0]
 80072c2:	f10b 0301 	add.w	r3, fp, #1
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f43f ace2 	beq.w	8006c94 <_dtoa_r+0xa4>
 80072d0:	601d      	str	r5, [r3, #0]
 80072d2:	e4df      	b.n	8006c94 <_dtoa_r+0xa4>
 80072d4:	465f      	mov	r7, fp
 80072d6:	462b      	mov	r3, r5
 80072d8:	461d      	mov	r5, r3
 80072da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072de:	2a39      	cmp	r2, #57	; 0x39
 80072e0:	d106      	bne.n	80072f0 <_dtoa_r+0x700>
 80072e2:	9a00      	ldr	r2, [sp, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d1f7      	bne.n	80072d8 <_dtoa_r+0x6e8>
 80072e8:	9900      	ldr	r1, [sp, #0]
 80072ea:	2230      	movs	r2, #48	; 0x30
 80072ec:	3701      	adds	r7, #1
 80072ee:	700a      	strb	r2, [r1, #0]
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	3201      	adds	r2, #1
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e790      	b.n	800721a <_dtoa_r+0x62a>
 80072f8:	4ba3      	ldr	r3, [pc, #652]	; (8007588 <_dtoa_r+0x998>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	f7f9 f99c 	bl	8000638 <__aeabi_dmul>
 8007300:	2200      	movs	r2, #0
 8007302:	2300      	movs	r3, #0
 8007304:	4606      	mov	r6, r0
 8007306:	460f      	mov	r7, r1
 8007308:	f7f9 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800730c:	2800      	cmp	r0, #0
 800730e:	d09e      	beq.n	800724e <_dtoa_r+0x65e>
 8007310:	e7d0      	b.n	80072b4 <_dtoa_r+0x6c4>
 8007312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007314:	2a00      	cmp	r2, #0
 8007316:	f000 80ca 	beq.w	80074ae <_dtoa_r+0x8be>
 800731a:	9a07      	ldr	r2, [sp, #28]
 800731c:	2a01      	cmp	r2, #1
 800731e:	f300 80ad 	bgt.w	800747c <_dtoa_r+0x88c>
 8007322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007324:	2a00      	cmp	r2, #0
 8007326:	f000 80a5 	beq.w	8007474 <_dtoa_r+0x884>
 800732a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800732e:	9e08      	ldr	r6, [sp, #32]
 8007330:	9d05      	ldr	r5, [sp, #20]
 8007332:	9a05      	ldr	r2, [sp, #20]
 8007334:	441a      	add	r2, r3
 8007336:	9205      	str	r2, [sp, #20]
 8007338:	9a06      	ldr	r2, [sp, #24]
 800733a:	2101      	movs	r1, #1
 800733c:	441a      	add	r2, r3
 800733e:	4620      	mov	r0, r4
 8007340:	9206      	str	r2, [sp, #24]
 8007342:	f000 fc3d 	bl	8007bc0 <__i2b>
 8007346:	4607      	mov	r7, r0
 8007348:	b165      	cbz	r5, 8007364 <_dtoa_r+0x774>
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd09      	ble.n	8007364 <_dtoa_r+0x774>
 8007350:	42ab      	cmp	r3, r5
 8007352:	9a05      	ldr	r2, [sp, #20]
 8007354:	bfa8      	it	ge
 8007356:	462b      	movge	r3, r5
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	9205      	str	r2, [sp, #20]
 800735c:	9a06      	ldr	r2, [sp, #24]
 800735e:	1aed      	subs	r5, r5, r3
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	9306      	str	r3, [sp, #24]
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	b1f3      	cbz	r3, 80073a6 <_dtoa_r+0x7b6>
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80a3 	beq.w	80074b6 <_dtoa_r+0x8c6>
 8007370:	2e00      	cmp	r6, #0
 8007372:	dd10      	ble.n	8007396 <_dtoa_r+0x7a6>
 8007374:	4639      	mov	r1, r7
 8007376:	4632      	mov	r2, r6
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fce1 	bl	8007d40 <__pow5mult>
 800737e:	4652      	mov	r2, sl
 8007380:	4601      	mov	r1, r0
 8007382:	4607      	mov	r7, r0
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fc31 	bl	8007bec <__multiply>
 800738a:	4651      	mov	r1, sl
 800738c:	4680      	mov	r8, r0
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fb60 	bl	8007a54 <_Bfree>
 8007394:	46c2      	mov	sl, r8
 8007396:	9b08      	ldr	r3, [sp, #32]
 8007398:	1b9a      	subs	r2, r3, r6
 800739a:	d004      	beq.n	80073a6 <_dtoa_r+0x7b6>
 800739c:	4651      	mov	r1, sl
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fcce 	bl	8007d40 <__pow5mult>
 80073a4:	4682      	mov	sl, r0
 80073a6:	2101      	movs	r1, #1
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fc09 	bl	8007bc0 <__i2b>
 80073ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	4606      	mov	r6, r0
 80073b4:	f340 8081 	ble.w	80074ba <_dtoa_r+0x8ca>
 80073b8:	461a      	mov	r2, r3
 80073ba:	4601      	mov	r1, r0
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fcbf 	bl	8007d40 <__pow5mult>
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	4606      	mov	r6, r0
 80073c8:	dd7a      	ble.n	80074c0 <_dtoa_r+0x8d0>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	6933      	ldr	r3, [r6, #16]
 80073d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073d4:	6918      	ldr	r0, [r3, #16]
 80073d6:	f000 fba5 	bl	8007b24 <__hi0bits>
 80073da:	f1c0 0020 	rsb	r0, r0, #32
 80073de:	9b06      	ldr	r3, [sp, #24]
 80073e0:	4418      	add	r0, r3
 80073e2:	f010 001f 	ands.w	r0, r0, #31
 80073e6:	f000 8094 	beq.w	8007512 <_dtoa_r+0x922>
 80073ea:	f1c0 0320 	rsb	r3, r0, #32
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	f340 8085 	ble.w	80074fe <_dtoa_r+0x90e>
 80073f4:	9b05      	ldr	r3, [sp, #20]
 80073f6:	f1c0 001c 	rsb	r0, r0, #28
 80073fa:	4403      	add	r3, r0
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	4403      	add	r3, r0
 8007402:	4405      	add	r5, r0
 8007404:	9306      	str	r3, [sp, #24]
 8007406:	9b05      	ldr	r3, [sp, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dd05      	ble.n	8007418 <_dtoa_r+0x828>
 800740c:	4651      	mov	r1, sl
 800740e:	461a      	mov	r2, r3
 8007410:	4620      	mov	r0, r4
 8007412:	f000 fcef 	bl	8007df4 <__lshift>
 8007416:	4682      	mov	sl, r0
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	dd05      	ble.n	800742a <_dtoa_r+0x83a>
 800741e:	4631      	mov	r1, r6
 8007420:	461a      	mov	r2, r3
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fce6 	bl	8007df4 <__lshift>
 8007428:	4606      	mov	r6, r0
 800742a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d072      	beq.n	8007516 <_dtoa_r+0x926>
 8007430:	4631      	mov	r1, r6
 8007432:	4650      	mov	r0, sl
 8007434:	f000 fd4a 	bl	8007ecc <__mcmp>
 8007438:	2800      	cmp	r0, #0
 800743a:	da6c      	bge.n	8007516 <_dtoa_r+0x926>
 800743c:	2300      	movs	r3, #0
 800743e:	4651      	mov	r1, sl
 8007440:	220a      	movs	r2, #10
 8007442:	4620      	mov	r0, r4
 8007444:	f000 fb28 	bl	8007a98 <__multadd>
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800744e:	4682      	mov	sl, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 81b0 	beq.w	80077b6 <_dtoa_r+0xbc6>
 8007456:	2300      	movs	r3, #0
 8007458:	4639      	mov	r1, r7
 800745a:	220a      	movs	r2, #10
 800745c:	4620      	mov	r0, r4
 800745e:	f000 fb1b 	bl	8007a98 <__multadd>
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	4607      	mov	r7, r0
 8007468:	f300 8096 	bgt.w	8007598 <_dtoa_r+0x9a8>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	2b02      	cmp	r3, #2
 8007470:	dc59      	bgt.n	8007526 <_dtoa_r+0x936>
 8007472:	e091      	b.n	8007598 <_dtoa_r+0x9a8>
 8007474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800747a:	e758      	b.n	800732e <_dtoa_r+0x73e>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	1e5e      	subs	r6, r3, #1
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	42b3      	cmp	r3, r6
 8007484:	bfbf      	itttt	lt
 8007486:	9b08      	ldrlt	r3, [sp, #32]
 8007488:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800748a:	9608      	strlt	r6, [sp, #32]
 800748c:	1af3      	sublt	r3, r6, r3
 800748e:	bfb4      	ite	lt
 8007490:	18d2      	addlt	r2, r2, r3
 8007492:	1b9e      	subge	r6, r3, r6
 8007494:	9b04      	ldr	r3, [sp, #16]
 8007496:	bfbc      	itt	lt
 8007498:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800749a:	2600      	movlt	r6, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfb7      	itett	lt
 80074a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80074a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80074a8:	1a9d      	sublt	r5, r3, r2
 80074aa:	2300      	movlt	r3, #0
 80074ac:	e741      	b.n	8007332 <_dtoa_r+0x742>
 80074ae:	9e08      	ldr	r6, [sp, #32]
 80074b0:	9d05      	ldr	r5, [sp, #20]
 80074b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074b4:	e748      	b.n	8007348 <_dtoa_r+0x758>
 80074b6:	9a08      	ldr	r2, [sp, #32]
 80074b8:	e770      	b.n	800739c <_dtoa_r+0x7ac>
 80074ba:	9b07      	ldr	r3, [sp, #28]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	dc19      	bgt.n	80074f4 <_dtoa_r+0x904>
 80074c0:	9b02      	ldr	r3, [sp, #8]
 80074c2:	b9bb      	cbnz	r3, 80074f4 <_dtoa_r+0x904>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ca:	b99b      	cbnz	r3, 80074f4 <_dtoa_r+0x904>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074d2:	0d1b      	lsrs	r3, r3, #20
 80074d4:	051b      	lsls	r3, r3, #20
 80074d6:	b183      	cbz	r3, 80074fa <_dtoa_r+0x90a>
 80074d8:	9b05      	ldr	r3, [sp, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	3301      	adds	r3, #1
 80074e2:	9306      	str	r3, [sp, #24]
 80074e4:	f04f 0801 	mov.w	r8, #1
 80074e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f47f af6f 	bne.w	80073ce <_dtoa_r+0x7de>
 80074f0:	2001      	movs	r0, #1
 80074f2:	e774      	b.n	80073de <_dtoa_r+0x7ee>
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	e7f6      	b.n	80074e8 <_dtoa_r+0x8f8>
 80074fa:	4698      	mov	r8, r3
 80074fc:	e7f4      	b.n	80074e8 <_dtoa_r+0x8f8>
 80074fe:	d082      	beq.n	8007406 <_dtoa_r+0x816>
 8007500:	9a05      	ldr	r2, [sp, #20]
 8007502:	331c      	adds	r3, #28
 8007504:	441a      	add	r2, r3
 8007506:	9205      	str	r2, [sp, #20]
 8007508:	9a06      	ldr	r2, [sp, #24]
 800750a:	441a      	add	r2, r3
 800750c:	441d      	add	r5, r3
 800750e:	9206      	str	r2, [sp, #24]
 8007510:	e779      	b.n	8007406 <_dtoa_r+0x816>
 8007512:	4603      	mov	r3, r0
 8007514:	e7f4      	b.n	8007500 <_dtoa_r+0x910>
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	dc37      	bgt.n	800758c <_dtoa_r+0x99c>
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	2b02      	cmp	r3, #2
 8007520:	dd34      	ble.n	800758c <_dtoa_r+0x99c>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	b963      	cbnz	r3, 8007544 <_dtoa_r+0x954>
 800752a:	4631      	mov	r1, r6
 800752c:	2205      	movs	r2, #5
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fab2 	bl	8007a98 <__multadd>
 8007534:	4601      	mov	r1, r0
 8007536:	4606      	mov	r6, r0
 8007538:	4650      	mov	r0, sl
 800753a:	f000 fcc7 	bl	8007ecc <__mcmp>
 800753e:	2800      	cmp	r0, #0
 8007540:	f73f adbb 	bgt.w	80070ba <_dtoa_r+0x4ca>
 8007544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007546:	9d00      	ldr	r5, [sp, #0]
 8007548:	ea6f 0b03 	mvn.w	fp, r3
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	4631      	mov	r1, r6
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fa7e 	bl	8007a54 <_Bfree>
 8007558:	2f00      	cmp	r7, #0
 800755a:	f43f aeab 	beq.w	80072b4 <_dtoa_r+0x6c4>
 800755e:	f1b8 0f00 	cmp.w	r8, #0
 8007562:	d005      	beq.n	8007570 <_dtoa_r+0x980>
 8007564:	45b8      	cmp	r8, r7
 8007566:	d003      	beq.n	8007570 <_dtoa_r+0x980>
 8007568:	4641      	mov	r1, r8
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fa72 	bl	8007a54 <_Bfree>
 8007570:	4639      	mov	r1, r7
 8007572:	4620      	mov	r0, r4
 8007574:	f000 fa6e 	bl	8007a54 <_Bfree>
 8007578:	e69c      	b.n	80072b4 <_dtoa_r+0x6c4>
 800757a:	2600      	movs	r6, #0
 800757c:	4637      	mov	r7, r6
 800757e:	e7e1      	b.n	8007544 <_dtoa_r+0x954>
 8007580:	46bb      	mov	fp, r7
 8007582:	4637      	mov	r7, r6
 8007584:	e599      	b.n	80070ba <_dtoa_r+0x4ca>
 8007586:	bf00      	nop
 8007588:	40240000 	.word	0x40240000
 800758c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80c8 	beq.w	8007724 <_dtoa_r+0xb34>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	2d00      	cmp	r5, #0
 800759a:	dd05      	ble.n	80075a8 <_dtoa_r+0x9b8>
 800759c:	4639      	mov	r1, r7
 800759e:	462a      	mov	r2, r5
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fc27 	bl	8007df4 <__lshift>
 80075a6:	4607      	mov	r7, r0
 80075a8:	f1b8 0f00 	cmp.w	r8, #0
 80075ac:	d05b      	beq.n	8007666 <_dtoa_r+0xa76>
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fa0f 	bl	80079d4 <_Balloc>
 80075b6:	4605      	mov	r5, r0
 80075b8:	b928      	cbnz	r0, 80075c6 <_dtoa_r+0x9d6>
 80075ba:	4b83      	ldr	r3, [pc, #524]	; (80077c8 <_dtoa_r+0xbd8>)
 80075bc:	4602      	mov	r2, r0
 80075be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80075c2:	f7ff bb2e 	b.w	8006c22 <_dtoa_r+0x32>
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	3202      	adds	r2, #2
 80075ca:	0092      	lsls	r2, r2, #2
 80075cc:	f107 010c 	add.w	r1, r7, #12
 80075d0:	300c      	adds	r0, #12
 80075d2:	f001 f847 	bl	8008664 <memcpy>
 80075d6:	2201      	movs	r2, #1
 80075d8:	4629      	mov	r1, r5
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fc0a 	bl	8007df4 <__lshift>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ea:	4413      	add	r3, r2
 80075ec:	9308      	str	r3, [sp, #32]
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	46b8      	mov	r8, r7
 80075f6:	9306      	str	r3, [sp, #24]
 80075f8:	4607      	mov	r7, r0
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	4631      	mov	r1, r6
 80075fe:	3b01      	subs	r3, #1
 8007600:	4650      	mov	r0, sl
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f7ff fa69 	bl	8006ada <quorem>
 8007608:	4641      	mov	r1, r8
 800760a:	9002      	str	r0, [sp, #8]
 800760c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007610:	4650      	mov	r0, sl
 8007612:	f000 fc5b 	bl	8007ecc <__mcmp>
 8007616:	463a      	mov	r2, r7
 8007618:	9005      	str	r0, [sp, #20]
 800761a:	4631      	mov	r1, r6
 800761c:	4620      	mov	r0, r4
 800761e:	f000 fc71 	bl	8007f04 <__mdiff>
 8007622:	68c2      	ldr	r2, [r0, #12]
 8007624:	4605      	mov	r5, r0
 8007626:	bb02      	cbnz	r2, 800766a <_dtoa_r+0xa7a>
 8007628:	4601      	mov	r1, r0
 800762a:	4650      	mov	r0, sl
 800762c:	f000 fc4e 	bl	8007ecc <__mcmp>
 8007630:	4602      	mov	r2, r0
 8007632:	4629      	mov	r1, r5
 8007634:	4620      	mov	r0, r4
 8007636:	9209      	str	r2, [sp, #36]	; 0x24
 8007638:	f000 fa0c 	bl	8007a54 <_Bfree>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007640:	9d04      	ldr	r5, [sp, #16]
 8007642:	ea43 0102 	orr.w	r1, r3, r2
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	4319      	orrs	r1, r3
 800764a:	d110      	bne.n	800766e <_dtoa_r+0xa7e>
 800764c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007650:	d029      	beq.n	80076a6 <_dtoa_r+0xab6>
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd02      	ble.n	800765e <_dtoa_r+0xa6e>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800765e:	9b01      	ldr	r3, [sp, #4]
 8007660:	f883 9000 	strb.w	r9, [r3]
 8007664:	e774      	b.n	8007550 <_dtoa_r+0x960>
 8007666:	4638      	mov	r0, r7
 8007668:	e7ba      	b.n	80075e0 <_dtoa_r+0x9f0>
 800766a:	2201      	movs	r2, #1
 800766c:	e7e1      	b.n	8007632 <_dtoa_r+0xa42>
 800766e:	9b05      	ldr	r3, [sp, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	db04      	blt.n	800767e <_dtoa_r+0xa8e>
 8007674:	9907      	ldr	r1, [sp, #28]
 8007676:	430b      	orrs	r3, r1
 8007678:	9906      	ldr	r1, [sp, #24]
 800767a:	430b      	orrs	r3, r1
 800767c:	d120      	bne.n	80076c0 <_dtoa_r+0xad0>
 800767e:	2a00      	cmp	r2, #0
 8007680:	dded      	ble.n	800765e <_dtoa_r+0xa6e>
 8007682:	4651      	mov	r1, sl
 8007684:	2201      	movs	r2, #1
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fbb4 	bl	8007df4 <__lshift>
 800768c:	4631      	mov	r1, r6
 800768e:	4682      	mov	sl, r0
 8007690:	f000 fc1c 	bl	8007ecc <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	dc03      	bgt.n	80076a0 <_dtoa_r+0xab0>
 8007698:	d1e1      	bne.n	800765e <_dtoa_r+0xa6e>
 800769a:	f019 0f01 	tst.w	r9, #1
 800769e:	d0de      	beq.n	800765e <_dtoa_r+0xa6e>
 80076a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076a4:	d1d8      	bne.n	8007658 <_dtoa_r+0xa68>
 80076a6:	9a01      	ldr	r2, [sp, #4]
 80076a8:	2339      	movs	r3, #57	; 0x39
 80076aa:	7013      	strb	r3, [r2, #0]
 80076ac:	462b      	mov	r3, r5
 80076ae:	461d      	mov	r5, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076b6:	2a39      	cmp	r2, #57	; 0x39
 80076b8:	d06c      	beq.n	8007794 <_dtoa_r+0xba4>
 80076ba:	3201      	adds	r2, #1
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e747      	b.n	8007550 <_dtoa_r+0x960>
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	dd07      	ble.n	80076d4 <_dtoa_r+0xae4>
 80076c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076c8:	d0ed      	beq.n	80076a6 <_dtoa_r+0xab6>
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	f109 0301 	add.w	r3, r9, #1
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	e73d      	b.n	8007550 <_dtoa_r+0x960>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	9a08      	ldr	r2, [sp, #32]
 80076d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d043      	beq.n	8007768 <_dtoa_r+0xb78>
 80076e0:	4651      	mov	r1, sl
 80076e2:	2300      	movs	r3, #0
 80076e4:	220a      	movs	r2, #10
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 f9d6 	bl	8007a98 <__multadd>
 80076ec:	45b8      	cmp	r8, r7
 80076ee:	4682      	mov	sl, r0
 80076f0:	f04f 0300 	mov.w	r3, #0
 80076f4:	f04f 020a 	mov.w	r2, #10
 80076f8:	4641      	mov	r1, r8
 80076fa:	4620      	mov	r0, r4
 80076fc:	d107      	bne.n	800770e <_dtoa_r+0xb1e>
 80076fe:	f000 f9cb 	bl	8007a98 <__multadd>
 8007702:	4680      	mov	r8, r0
 8007704:	4607      	mov	r7, r0
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	3301      	adds	r3, #1
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	e775      	b.n	80075fa <_dtoa_r+0xa0a>
 800770e:	f000 f9c3 	bl	8007a98 <__multadd>
 8007712:	4639      	mov	r1, r7
 8007714:	4680      	mov	r8, r0
 8007716:	2300      	movs	r3, #0
 8007718:	220a      	movs	r2, #10
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f9bc 	bl	8007a98 <__multadd>
 8007720:	4607      	mov	r7, r0
 8007722:	e7f0      	b.n	8007706 <_dtoa_r+0xb16>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	9d00      	ldr	r5, [sp, #0]
 800772a:	4631      	mov	r1, r6
 800772c:	4650      	mov	r0, sl
 800772e:	f7ff f9d4 	bl	8006ada <quorem>
 8007732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	f805 9b01 	strb.w	r9, [r5], #1
 800773c:	1aea      	subs	r2, r5, r3
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	4293      	cmp	r3, r2
 8007742:	dd07      	ble.n	8007754 <_dtoa_r+0xb64>
 8007744:	4651      	mov	r1, sl
 8007746:	2300      	movs	r3, #0
 8007748:	220a      	movs	r2, #10
 800774a:	4620      	mov	r0, r4
 800774c:	f000 f9a4 	bl	8007a98 <__multadd>
 8007750:	4682      	mov	sl, r0
 8007752:	e7ea      	b.n	800772a <_dtoa_r+0xb3a>
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	bfc8      	it	gt
 800775a:	461d      	movgt	r5, r3
 800775c:	9b00      	ldr	r3, [sp, #0]
 800775e:	bfd8      	it	le
 8007760:	2501      	movle	r5, #1
 8007762:	441d      	add	r5, r3
 8007764:	f04f 0800 	mov.w	r8, #0
 8007768:	4651      	mov	r1, sl
 800776a:	2201      	movs	r2, #1
 800776c:	4620      	mov	r0, r4
 800776e:	f000 fb41 	bl	8007df4 <__lshift>
 8007772:	4631      	mov	r1, r6
 8007774:	4682      	mov	sl, r0
 8007776:	f000 fba9 	bl	8007ecc <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	dc96      	bgt.n	80076ac <_dtoa_r+0xabc>
 800777e:	d102      	bne.n	8007786 <_dtoa_r+0xb96>
 8007780:	f019 0f01 	tst.w	r9, #1
 8007784:	d192      	bne.n	80076ac <_dtoa_r+0xabc>
 8007786:	462b      	mov	r3, r5
 8007788:	461d      	mov	r5, r3
 800778a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800778e:	2a30      	cmp	r2, #48	; 0x30
 8007790:	d0fa      	beq.n	8007788 <_dtoa_r+0xb98>
 8007792:	e6dd      	b.n	8007550 <_dtoa_r+0x960>
 8007794:	9a00      	ldr	r2, [sp, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d189      	bne.n	80076ae <_dtoa_r+0xabe>
 800779a:	f10b 0b01 	add.w	fp, fp, #1
 800779e:	2331      	movs	r3, #49	; 0x31
 80077a0:	e796      	b.n	80076d0 <_dtoa_r+0xae0>
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <_dtoa_r+0xbdc>)
 80077a4:	f7ff ba99 	b.w	8006cda <_dtoa_r+0xea>
 80077a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f47f aa6d 	bne.w	8006c8a <_dtoa_r+0x9a>
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <_dtoa_r+0xbe0>)
 80077b2:	f7ff ba92 	b.w	8006cda <_dtoa_r+0xea>
 80077b6:	9b01      	ldr	r3, [sp, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dcb5      	bgt.n	8007728 <_dtoa_r+0xb38>
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	2b02      	cmp	r3, #2
 80077c0:	f73f aeb1 	bgt.w	8007526 <_dtoa_r+0x936>
 80077c4:	e7b0      	b.n	8007728 <_dtoa_r+0xb38>
 80077c6:	bf00      	nop
 80077c8:	08008f44 	.word	0x08008f44
 80077cc:	08008ea4 	.word	0x08008ea4
 80077d0:	08008ec8 	.word	0x08008ec8

080077d4 <_free_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d044      	beq.n	8007864 <_free_r+0x90>
 80077da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077de:	9001      	str	r0, [sp, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f1a1 0404 	sub.w	r4, r1, #4
 80077e6:	bfb8      	it	lt
 80077e8:	18e4      	addlt	r4, r4, r3
 80077ea:	f000 f8e7 	bl	80079bc <__malloc_lock>
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <_free_r+0x94>)
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	b933      	cbnz	r3, 8007804 <_free_r+0x30>
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6014      	str	r4, [r2, #0]
 80077fa:	b003      	add	sp, #12
 80077fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007800:	f000 b8e2 	b.w	80079c8 <__malloc_unlock>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d908      	bls.n	800781a <_free_r+0x46>
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	1961      	adds	r1, r4, r5
 800780c:	428b      	cmp	r3, r1
 800780e:	bf01      	itttt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	1949      	addeq	r1, r1, r5
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	e7ed      	b.n	80077f6 <_free_r+0x22>
 800781a:	461a      	mov	r2, r3
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b10b      	cbz	r3, 8007824 <_free_r+0x50>
 8007820:	42a3      	cmp	r3, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x46>
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	1855      	adds	r5, r2, r1
 8007828:	42a5      	cmp	r5, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x70>
 800782c:	6824      	ldr	r4, [r4, #0]
 800782e:	4421      	add	r1, r4
 8007830:	1854      	adds	r4, r2, r1
 8007832:	42a3      	cmp	r3, r4
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	d1e0      	bne.n	80077fa <_free_r+0x26>
 8007838:	681c      	ldr	r4, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	6053      	str	r3, [r2, #4]
 800783e:	440c      	add	r4, r1
 8007840:	6014      	str	r4, [r2, #0]
 8007842:	e7da      	b.n	80077fa <_free_r+0x26>
 8007844:	d902      	bls.n	800784c <_free_r+0x78>
 8007846:	230c      	movs	r3, #12
 8007848:	6003      	str	r3, [r0, #0]
 800784a:	e7d6      	b.n	80077fa <_free_r+0x26>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	1961      	adds	r1, r4, r5
 8007850:	428b      	cmp	r3, r1
 8007852:	bf04      	itt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1949      	addeq	r1, r1, r5
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	6054      	str	r4, [r2, #4]
 8007862:	e7ca      	b.n	80077fa <_free_r+0x26>
 8007864:	b003      	add	sp, #12
 8007866:	bd30      	pop	{r4, r5, pc}
 8007868:	200005b0 	.word	0x200005b0

0800786c <malloc>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <malloc+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f000 b823 	b.w	80078bc <_malloc_r>
 8007876:	bf00      	nop
 8007878:	20000094 	.word	0x20000094

0800787c <sbrk_aligned>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4e0e      	ldr	r6, [pc, #56]	; (80078b8 <sbrk_aligned+0x3c>)
 8007880:	460c      	mov	r4, r1
 8007882:	6831      	ldr	r1, [r6, #0]
 8007884:	4605      	mov	r5, r0
 8007886:	b911      	cbnz	r1, 800788e <sbrk_aligned+0x12>
 8007888:	f000 fedc 	bl	8008644 <_sbrk_r>
 800788c:	6030      	str	r0, [r6, #0]
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 fed7 	bl	8008644 <_sbrk_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d00a      	beq.n	80078b0 <sbrk_aligned+0x34>
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d007      	beq.n	80078b4 <sbrk_aligned+0x38>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fecc 	bl	8008644 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d101      	bne.n	80078b4 <sbrk_aligned+0x38>
 80078b0:	f04f 34ff 	mov.w	r4, #4294967295
 80078b4:	4620      	mov	r0, r4
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	200005b4 	.word	0x200005b4

080078bc <_malloc_r>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	1ccd      	adds	r5, r1, #3
 80078c2:	f025 0503 	bic.w	r5, r5, #3
 80078c6:	3508      	adds	r5, #8
 80078c8:	2d0c      	cmp	r5, #12
 80078ca:	bf38      	it	cc
 80078cc:	250c      	movcc	r5, #12
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	4607      	mov	r7, r0
 80078d2:	db01      	blt.n	80078d8 <_malloc_r+0x1c>
 80078d4:	42a9      	cmp	r1, r5
 80078d6:	d905      	bls.n	80078e4 <_malloc_r+0x28>
 80078d8:	230c      	movs	r3, #12
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	2600      	movs	r6, #0
 80078de:	4630      	mov	r0, r6
 80078e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079b8 <_malloc_r+0xfc>
 80078e8:	f000 f868 	bl	80079bc <__malloc_lock>
 80078ec:	f8d8 3000 	ldr.w	r3, [r8]
 80078f0:	461c      	mov	r4, r3
 80078f2:	bb5c      	cbnz	r4, 800794c <_malloc_r+0x90>
 80078f4:	4629      	mov	r1, r5
 80078f6:	4638      	mov	r0, r7
 80078f8:	f7ff ffc0 	bl	800787c <sbrk_aligned>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	4604      	mov	r4, r0
 8007900:	d155      	bne.n	80079ae <_malloc_r+0xf2>
 8007902:	f8d8 4000 	ldr.w	r4, [r8]
 8007906:	4626      	mov	r6, r4
 8007908:	2e00      	cmp	r6, #0
 800790a:	d145      	bne.n	8007998 <_malloc_r+0xdc>
 800790c:	2c00      	cmp	r4, #0
 800790e:	d048      	beq.n	80079a2 <_malloc_r+0xe6>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	4631      	mov	r1, r6
 8007914:	4638      	mov	r0, r7
 8007916:	eb04 0903 	add.w	r9, r4, r3
 800791a:	f000 fe93 	bl	8008644 <_sbrk_r>
 800791e:	4581      	cmp	r9, r0
 8007920:	d13f      	bne.n	80079a2 <_malloc_r+0xe6>
 8007922:	6821      	ldr	r1, [r4, #0]
 8007924:	1a6d      	subs	r5, r5, r1
 8007926:	4629      	mov	r1, r5
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff ffa7 	bl	800787c <sbrk_aligned>
 800792e:	3001      	adds	r0, #1
 8007930:	d037      	beq.n	80079a2 <_malloc_r+0xe6>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	442b      	add	r3, r5
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	f8d8 3000 	ldr.w	r3, [r8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d038      	beq.n	80079b2 <_malloc_r+0xf6>
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	42a2      	cmp	r2, r4
 8007944:	d12b      	bne.n	800799e <_malloc_r+0xe2>
 8007946:	2200      	movs	r2, #0
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	e00f      	b.n	800796c <_malloc_r+0xb0>
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	1b52      	subs	r2, r2, r5
 8007950:	d41f      	bmi.n	8007992 <_malloc_r+0xd6>
 8007952:	2a0b      	cmp	r2, #11
 8007954:	d917      	bls.n	8007986 <_malloc_r+0xca>
 8007956:	1961      	adds	r1, r4, r5
 8007958:	42a3      	cmp	r3, r4
 800795a:	6025      	str	r5, [r4, #0]
 800795c:	bf18      	it	ne
 800795e:	6059      	strne	r1, [r3, #4]
 8007960:	6863      	ldr	r3, [r4, #4]
 8007962:	bf08      	it	eq
 8007964:	f8c8 1000 	streq.w	r1, [r8]
 8007968:	5162      	str	r2, [r4, r5]
 800796a:	604b      	str	r3, [r1, #4]
 800796c:	4638      	mov	r0, r7
 800796e:	f104 060b 	add.w	r6, r4, #11
 8007972:	f000 f829 	bl	80079c8 <__malloc_unlock>
 8007976:	f026 0607 	bic.w	r6, r6, #7
 800797a:	1d23      	adds	r3, r4, #4
 800797c:	1af2      	subs	r2, r6, r3
 800797e:	d0ae      	beq.n	80078de <_malloc_r+0x22>
 8007980:	1b9b      	subs	r3, r3, r6
 8007982:	50a3      	str	r3, [r4, r2]
 8007984:	e7ab      	b.n	80078de <_malloc_r+0x22>
 8007986:	42a3      	cmp	r3, r4
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	d1dd      	bne.n	8007948 <_malloc_r+0x8c>
 800798c:	f8c8 2000 	str.w	r2, [r8]
 8007990:	e7ec      	b.n	800796c <_malloc_r+0xb0>
 8007992:	4623      	mov	r3, r4
 8007994:	6864      	ldr	r4, [r4, #4]
 8007996:	e7ac      	b.n	80078f2 <_malloc_r+0x36>
 8007998:	4634      	mov	r4, r6
 800799a:	6876      	ldr	r6, [r6, #4]
 800799c:	e7b4      	b.n	8007908 <_malloc_r+0x4c>
 800799e:	4613      	mov	r3, r2
 80079a0:	e7cc      	b.n	800793c <_malloc_r+0x80>
 80079a2:	230c      	movs	r3, #12
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4638      	mov	r0, r7
 80079a8:	f000 f80e 	bl	80079c8 <__malloc_unlock>
 80079ac:	e797      	b.n	80078de <_malloc_r+0x22>
 80079ae:	6025      	str	r5, [r4, #0]
 80079b0:	e7dc      	b.n	800796c <_malloc_r+0xb0>
 80079b2:	605b      	str	r3, [r3, #4]
 80079b4:	deff      	udf	#255	; 0xff
 80079b6:	bf00      	nop
 80079b8:	200005b0 	.word	0x200005b0

080079bc <__malloc_lock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	; (80079c4 <__malloc_lock+0x8>)
 80079be:	f7ff b88a 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 80079c2:	bf00      	nop
 80079c4:	200005ac 	.word	0x200005ac

080079c8 <__malloc_unlock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_unlock+0x8>)
 80079ca:	f7ff b885 	b.w	8006ad8 <__retarget_lock_release_recursive>
 80079ce:	bf00      	nop
 80079d0:	200005ac 	.word	0x200005ac

080079d4 <_Balloc>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	69c6      	ldr	r6, [r0, #28]
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	b976      	cbnz	r6, 80079fc <_Balloc+0x28>
 80079de:	2010      	movs	r0, #16
 80079e0:	f7ff ff44 	bl	800786c <malloc>
 80079e4:	4602      	mov	r2, r0
 80079e6:	61e0      	str	r0, [r4, #28]
 80079e8:	b920      	cbnz	r0, 80079f4 <_Balloc+0x20>
 80079ea:	4b18      	ldr	r3, [pc, #96]	; (8007a4c <_Balloc+0x78>)
 80079ec:	4818      	ldr	r0, [pc, #96]	; (8007a50 <_Balloc+0x7c>)
 80079ee:	216b      	movs	r1, #107	; 0x6b
 80079f0:	f000 fe46 	bl	8008680 <__assert_func>
 80079f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f8:	6006      	str	r6, [r0, #0]
 80079fa:	60c6      	str	r6, [r0, #12]
 80079fc:	69e6      	ldr	r6, [r4, #28]
 80079fe:	68f3      	ldr	r3, [r6, #12]
 8007a00:	b183      	cbz	r3, 8007a24 <_Balloc+0x50>
 8007a02:	69e3      	ldr	r3, [r4, #28]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a0a:	b9b8      	cbnz	r0, 8007a3c <_Balloc+0x68>
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007a12:	1d72      	adds	r2, r6, #5
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fe50 	bl	80086bc <_calloc_r>
 8007a1c:	b160      	cbz	r0, 8007a38 <_Balloc+0x64>
 8007a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a22:	e00e      	b.n	8007a42 <_Balloc+0x6e>
 8007a24:	2221      	movs	r2, #33	; 0x21
 8007a26:	2104      	movs	r1, #4
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fe47 	bl	80086bc <_calloc_r>
 8007a2e:	69e3      	ldr	r3, [r4, #28]
 8007a30:	60f0      	str	r0, [r6, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e4      	bne.n	8007a02 <_Balloc+0x2e>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	6802      	ldr	r2, [r0, #0]
 8007a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a42:	2300      	movs	r3, #0
 8007a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a48:	e7f7      	b.n	8007a3a <_Balloc+0x66>
 8007a4a:	bf00      	nop
 8007a4c:	08008ed5 	.word	0x08008ed5
 8007a50:	08008f55 	.word	0x08008f55

08007a54 <_Bfree>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	69c6      	ldr	r6, [r0, #28]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b976      	cbnz	r6, 8007a7c <_Bfree+0x28>
 8007a5e:	2010      	movs	r0, #16
 8007a60:	f7ff ff04 	bl	800786c <malloc>
 8007a64:	4602      	mov	r2, r0
 8007a66:	61e8      	str	r0, [r5, #28]
 8007a68:	b920      	cbnz	r0, 8007a74 <_Bfree+0x20>
 8007a6a:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <_Bfree+0x3c>)
 8007a6c:	4809      	ldr	r0, [pc, #36]	; (8007a94 <_Bfree+0x40>)
 8007a6e:	218f      	movs	r1, #143	; 0x8f
 8007a70:	f000 fe06 	bl	8008680 <__assert_func>
 8007a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a78:	6006      	str	r6, [r0, #0]
 8007a7a:	60c6      	str	r6, [r0, #12]
 8007a7c:	b13c      	cbz	r4, 8007a8e <_Bfree+0x3a>
 8007a7e:	69eb      	ldr	r3, [r5, #28]
 8007a80:	6862      	ldr	r2, [r4, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a88:	6021      	str	r1, [r4, #0]
 8007a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	08008ed5 	.word	0x08008ed5
 8007a94:	08008f55 	.word	0x08008f55

08007a98 <__multadd>:
 8007a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9c:	690d      	ldr	r5, [r1, #16]
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	461e      	mov	r6, r3
 8007aa4:	f101 0c14 	add.w	ip, r1, #20
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8007aae:	b299      	uxth	r1, r3
 8007ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab4:	0c1e      	lsrs	r6, r3, #16
 8007ab6:	0c0b      	lsrs	r3, r1, #16
 8007ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8007abc:	b289      	uxth	r1, r1
 8007abe:	3001      	adds	r0, #1
 8007ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac4:	4285      	cmp	r5, r0
 8007ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8007aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ace:	dcec      	bgt.n	8007aaa <__multadd+0x12>
 8007ad0:	b30e      	cbz	r6, 8007b16 <__multadd+0x7e>
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	42ab      	cmp	r3, r5
 8007ad6:	dc19      	bgt.n	8007b0c <__multadd+0x74>
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	4638      	mov	r0, r7
 8007adc:	3101      	adds	r1, #1
 8007ade:	f7ff ff79 	bl	80079d4 <_Balloc>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	b928      	cbnz	r0, 8007af2 <__multadd+0x5a>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <__multadd+0x84>)
 8007aea:	480d      	ldr	r0, [pc, #52]	; (8007b20 <__multadd+0x88>)
 8007aec:	21ba      	movs	r1, #186	; 0xba
 8007aee:	f000 fdc7 	bl	8008680 <__assert_func>
 8007af2:	6922      	ldr	r2, [r4, #16]
 8007af4:	3202      	adds	r2, #2
 8007af6:	f104 010c 	add.w	r1, r4, #12
 8007afa:	0092      	lsls	r2, r2, #2
 8007afc:	300c      	adds	r0, #12
 8007afe:	f000 fdb1 	bl	8008664 <memcpy>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff ffa5 	bl	8007a54 <_Bfree>
 8007b0a:	4644      	mov	r4, r8
 8007b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b10:	3501      	adds	r5, #1
 8007b12:	615e      	str	r6, [r3, #20]
 8007b14:	6125      	str	r5, [r4, #16]
 8007b16:	4620      	mov	r0, r4
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	08008f44 	.word	0x08008f44
 8007b20:	08008f55 	.word	0x08008f55

08007b24 <__hi0bits>:
 8007b24:	0c03      	lsrs	r3, r0, #16
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	b9d3      	cbnz	r3, 8007b60 <__hi0bits+0x3c>
 8007b2a:	0400      	lsls	r0, r0, #16
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b32:	bf04      	itt	eq
 8007b34:	0200      	lsleq	r0, r0, #8
 8007b36:	3308      	addeq	r3, #8
 8007b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b3c:	bf04      	itt	eq
 8007b3e:	0100      	lsleq	r0, r0, #4
 8007b40:	3304      	addeq	r3, #4
 8007b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b46:	bf04      	itt	eq
 8007b48:	0080      	lsleq	r0, r0, #2
 8007b4a:	3302      	addeq	r3, #2
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	db05      	blt.n	8007b5c <__hi0bits+0x38>
 8007b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b54:	f103 0301 	add.w	r3, r3, #1
 8007b58:	bf08      	it	eq
 8007b5a:	2320      	moveq	r3, #32
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4770      	bx	lr
 8007b60:	2300      	movs	r3, #0
 8007b62:	e7e4      	b.n	8007b2e <__hi0bits+0xa>

08007b64 <__lo0bits>:
 8007b64:	6803      	ldr	r3, [r0, #0]
 8007b66:	f013 0207 	ands.w	r2, r3, #7
 8007b6a:	d00c      	beq.n	8007b86 <__lo0bits+0x22>
 8007b6c:	07d9      	lsls	r1, r3, #31
 8007b6e:	d422      	bmi.n	8007bb6 <__lo0bits+0x52>
 8007b70:	079a      	lsls	r2, r3, #30
 8007b72:	bf49      	itett	mi
 8007b74:	085b      	lsrmi	r3, r3, #1
 8007b76:	089b      	lsrpl	r3, r3, #2
 8007b78:	6003      	strmi	r3, [r0, #0]
 8007b7a:	2201      	movmi	r2, #1
 8007b7c:	bf5c      	itt	pl
 8007b7e:	6003      	strpl	r3, [r0, #0]
 8007b80:	2202      	movpl	r2, #2
 8007b82:	4610      	mov	r0, r2
 8007b84:	4770      	bx	lr
 8007b86:	b299      	uxth	r1, r3
 8007b88:	b909      	cbnz	r1, 8007b8e <__lo0bits+0x2a>
 8007b8a:	0c1b      	lsrs	r3, r3, #16
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	b2d9      	uxtb	r1, r3
 8007b90:	b909      	cbnz	r1, 8007b96 <__lo0bits+0x32>
 8007b92:	3208      	adds	r2, #8
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	0719      	lsls	r1, r3, #28
 8007b98:	bf04      	itt	eq
 8007b9a:	091b      	lsreq	r3, r3, #4
 8007b9c:	3204      	addeq	r2, #4
 8007b9e:	0799      	lsls	r1, r3, #30
 8007ba0:	bf04      	itt	eq
 8007ba2:	089b      	lsreq	r3, r3, #2
 8007ba4:	3202      	addeq	r2, #2
 8007ba6:	07d9      	lsls	r1, r3, #31
 8007ba8:	d403      	bmi.n	8007bb2 <__lo0bits+0x4e>
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	f102 0201 	add.w	r2, r2, #1
 8007bb0:	d003      	beq.n	8007bba <__lo0bits+0x56>
 8007bb2:	6003      	str	r3, [r0, #0]
 8007bb4:	e7e5      	b.n	8007b82 <__lo0bits+0x1e>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	e7e3      	b.n	8007b82 <__lo0bits+0x1e>
 8007bba:	2220      	movs	r2, #32
 8007bbc:	e7e1      	b.n	8007b82 <__lo0bits+0x1e>
	...

08007bc0 <__i2b>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	f7ff ff05 	bl	80079d4 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__i2b+0x1a>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <__i2b+0x24>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <__i2b+0x28>)
 8007bd2:	f240 1145 	movw	r1, #325	; 0x145
 8007bd6:	f000 fd53 	bl	8008680 <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6144      	str	r4, [r0, #20]
 8007bde:	6103      	str	r3, [r0, #16]
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	08008f44 	.word	0x08008f44
 8007be8:	08008f55 	.word	0x08008f55

08007bec <__multiply>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4691      	mov	r9, r2
 8007bf2:	690a      	ldr	r2, [r1, #16]
 8007bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bfb8      	it	lt
 8007bfc:	460b      	movlt	r3, r1
 8007bfe:	460c      	mov	r4, r1
 8007c00:	bfbc      	itt	lt
 8007c02:	464c      	movlt	r4, r9
 8007c04:	4699      	movlt	r9, r3
 8007c06:	6927      	ldr	r7, [r4, #16]
 8007c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c0c:	68a3      	ldr	r3, [r4, #8]
 8007c0e:	6861      	ldr	r1, [r4, #4]
 8007c10:	eb07 060a 	add.w	r6, r7, sl
 8007c14:	42b3      	cmp	r3, r6
 8007c16:	b085      	sub	sp, #20
 8007c18:	bfb8      	it	lt
 8007c1a:	3101      	addlt	r1, #1
 8007c1c:	f7ff feda 	bl	80079d4 <_Balloc>
 8007c20:	b930      	cbnz	r0, 8007c30 <__multiply+0x44>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b44      	ldr	r3, [pc, #272]	; (8007d38 <__multiply+0x14c>)
 8007c26:	4845      	ldr	r0, [pc, #276]	; (8007d3c <__multiply+0x150>)
 8007c28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c2c:	f000 fd28 	bl	8008680 <__assert_func>
 8007c30:	f100 0514 	add.w	r5, r0, #20
 8007c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c38:	462b      	mov	r3, r5
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	d321      	bcc.n	8007c84 <__multiply+0x98>
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c48:	f109 0314 	add.w	r3, r9, #20
 8007c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c50:	9202      	str	r2, [sp, #8]
 8007c52:	1b3a      	subs	r2, r7, r4
 8007c54:	3a15      	subs	r2, #21
 8007c56:	f022 0203 	bic.w	r2, r2, #3
 8007c5a:	3204      	adds	r2, #4
 8007c5c:	f104 0115 	add.w	r1, r4, #21
 8007c60:	428f      	cmp	r7, r1
 8007c62:	bf38      	it	cc
 8007c64:	2204      	movcc	r2, #4
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9a02      	ldr	r2, [sp, #8]
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d80c      	bhi.n	8007c8a <__multiply+0x9e>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	dd03      	ble.n	8007c7c <__multiply+0x90>
 8007c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05b      	beq.n	8007d34 <__multiply+0x148>
 8007c7c:	6106      	str	r6, [r0, #16]
 8007c7e:	b005      	add	sp, #20
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	f843 2b04 	str.w	r2, [r3], #4
 8007c88:	e7d8      	b.n	8007c3c <__multiply+0x50>
 8007c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c8e:	f1ba 0f00 	cmp.w	sl, #0
 8007c92:	d024      	beq.n	8007cde <__multiply+0xf2>
 8007c94:	f104 0e14 	add.w	lr, r4, #20
 8007c98:	46a9      	mov	r9, r5
 8007c9a:	f04f 0c00 	mov.w	ip, #0
 8007c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ca6:	fa1f fb82 	uxth.w	fp, r2
 8007caa:	b289      	uxth	r1, r1
 8007cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cb8:	4461      	add	r1, ip
 8007cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cc6:	b289      	uxth	r1, r1
 8007cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ccc:	4577      	cmp	r7, lr
 8007cce:	f849 1b04 	str.w	r1, [r9], #4
 8007cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cd6:	d8e2      	bhi.n	8007c9e <__multiply+0xb2>
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	f845 c002 	str.w	ip, [r5, r2]
 8007cde:	9a03      	ldr	r2, [sp, #12]
 8007ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	d021      	beq.n	8007d30 <__multiply+0x144>
 8007cec:	6829      	ldr	r1, [r5, #0]
 8007cee:	f104 0c14 	add.w	ip, r4, #20
 8007cf2:	46ae      	mov	lr, r5
 8007cf4:	f04f 0a00 	mov.w	sl, #0
 8007cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8007cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d00:	fb09 220b 	mla	r2, r9, fp, r2
 8007d04:	4452      	add	r2, sl
 8007d06:	b289      	uxth	r1, r1
 8007d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d18:	f8be 1000 	ldrh.w	r1, [lr]
 8007d1c:	fb09 110a 	mla	r1, r9, sl, r1
 8007d20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d24:	4567      	cmp	r7, ip
 8007d26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d2a:	d8e5      	bhi.n	8007cf8 <__multiply+0x10c>
 8007d2c:	9a01      	ldr	r2, [sp, #4]
 8007d2e:	50a9      	str	r1, [r5, r2]
 8007d30:	3504      	adds	r5, #4
 8007d32:	e799      	b.n	8007c68 <__multiply+0x7c>
 8007d34:	3e01      	subs	r6, #1
 8007d36:	e79b      	b.n	8007c70 <__multiply+0x84>
 8007d38:	08008f44 	.word	0x08008f44
 8007d3c:	08008f55 	.word	0x08008f55

08007d40 <__pow5mult>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	4615      	mov	r5, r2
 8007d46:	f012 0203 	ands.w	r2, r2, #3
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460f      	mov	r7, r1
 8007d4e:	d007      	beq.n	8007d60 <__pow5mult+0x20>
 8007d50:	4c25      	ldr	r4, [pc, #148]	; (8007de8 <__pow5mult+0xa8>)
 8007d52:	3a01      	subs	r2, #1
 8007d54:	2300      	movs	r3, #0
 8007d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d5a:	f7ff fe9d 	bl	8007a98 <__multadd>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	10ad      	asrs	r5, r5, #2
 8007d62:	d03d      	beq.n	8007de0 <__pow5mult+0xa0>
 8007d64:	69f4      	ldr	r4, [r6, #28]
 8007d66:	b97c      	cbnz	r4, 8007d88 <__pow5mult+0x48>
 8007d68:	2010      	movs	r0, #16
 8007d6a:	f7ff fd7f 	bl	800786c <malloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	61f0      	str	r0, [r6, #28]
 8007d72:	b928      	cbnz	r0, 8007d80 <__pow5mult+0x40>
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <__pow5mult+0xac>)
 8007d76:	481e      	ldr	r0, [pc, #120]	; (8007df0 <__pow5mult+0xb0>)
 8007d78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d7c:	f000 fc80 	bl	8008680 <__assert_func>
 8007d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d84:	6004      	str	r4, [r0, #0]
 8007d86:	60c4      	str	r4, [r0, #12]
 8007d88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d90:	b94c      	cbnz	r4, 8007da6 <__pow5mult+0x66>
 8007d92:	f240 2171 	movw	r1, #625	; 0x271
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7ff ff12 	bl	8007bc0 <__i2b>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007da2:	4604      	mov	r4, r0
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	07eb      	lsls	r3, r5, #31
 8007dac:	d50a      	bpl.n	8007dc4 <__pow5mult+0x84>
 8007dae:	4639      	mov	r1, r7
 8007db0:	4622      	mov	r2, r4
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff ff1a 	bl	8007bec <__multiply>
 8007db8:	4639      	mov	r1, r7
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff fe49 	bl	8007a54 <_Bfree>
 8007dc2:	4647      	mov	r7, r8
 8007dc4:	106d      	asrs	r5, r5, #1
 8007dc6:	d00b      	beq.n	8007de0 <__pow5mult+0xa0>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	b938      	cbnz	r0, 8007ddc <__pow5mult+0x9c>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ff0b 	bl	8007bec <__multiply>
 8007dd6:	6020      	str	r0, [r4, #0]
 8007dd8:	f8c0 9000 	str.w	r9, [r0]
 8007ddc:	4604      	mov	r4, r0
 8007dde:	e7e4      	b.n	8007daa <__pow5mult+0x6a>
 8007de0:	4638      	mov	r0, r7
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	bf00      	nop
 8007de8:	080090a0 	.word	0x080090a0
 8007dec:	08008ed5 	.word	0x08008ed5
 8007df0:	08008f55 	.word	0x08008f55

08007df4 <__lshift>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6849      	ldr	r1, [r1, #4]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	4607      	mov	r7, r0
 8007e06:	4691      	mov	r9, r2
 8007e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e0c:	f108 0601 	add.w	r6, r8, #1
 8007e10:	42b3      	cmp	r3, r6
 8007e12:	db0b      	blt.n	8007e2c <__lshift+0x38>
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff fddd 	bl	80079d4 <_Balloc>
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	b948      	cbnz	r0, 8007e32 <__lshift+0x3e>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	4b28      	ldr	r3, [pc, #160]	; (8007ec4 <__lshift+0xd0>)
 8007e22:	4829      	ldr	r0, [pc, #164]	; (8007ec8 <__lshift+0xd4>)
 8007e24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e28:	f000 fc2a 	bl	8008680 <__assert_func>
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	e7ee      	b.n	8007e10 <__lshift+0x1c>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f100 0114 	add.w	r1, r0, #20
 8007e38:	f100 0210 	add.w	r2, r0, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4553      	cmp	r3, sl
 8007e40:	db33      	blt.n	8007eaa <__lshift+0xb6>
 8007e42:	6920      	ldr	r0, [r4, #16]
 8007e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e48:	f104 0314 	add.w	r3, r4, #20
 8007e4c:	f019 091f 	ands.w	r9, r9, #31
 8007e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e58:	d02b      	beq.n	8007eb2 <__lshift+0xbe>
 8007e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e5e:	468a      	mov	sl, r1
 8007e60:	2200      	movs	r2, #0
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	fa00 f009 	lsl.w	r0, r0, r9
 8007e68:	4310      	orrs	r0, r2
 8007e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e72:	459c      	cmp	ip, r3
 8007e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e78:	d8f3      	bhi.n	8007e62 <__lshift+0x6e>
 8007e7a:	ebac 0304 	sub.w	r3, ip, r4
 8007e7e:	3b15      	subs	r3, #21
 8007e80:	f023 0303 	bic.w	r3, r3, #3
 8007e84:	3304      	adds	r3, #4
 8007e86:	f104 0015 	add.w	r0, r4, #21
 8007e8a:	4584      	cmp	ip, r0
 8007e8c:	bf38      	it	cc
 8007e8e:	2304      	movcc	r3, #4
 8007e90:	50ca      	str	r2, [r1, r3]
 8007e92:	b10a      	cbz	r2, 8007e98 <__lshift+0xa4>
 8007e94:	f108 0602 	add.w	r6, r8, #2
 8007e98:	3e01      	subs	r6, #1
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	612e      	str	r6, [r5, #16]
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f7ff fdd8 	bl	8007a54 <_Bfree>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eae:	3301      	adds	r3, #1
 8007eb0:	e7c5      	b.n	8007e3e <__lshift+0x4a>
 8007eb2:	3904      	subs	r1, #4
 8007eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ebc:	459c      	cmp	ip, r3
 8007ebe:	d8f9      	bhi.n	8007eb4 <__lshift+0xc0>
 8007ec0:	e7ea      	b.n	8007e98 <__lshift+0xa4>
 8007ec2:	bf00      	nop
 8007ec4:	08008f44 	.word	0x08008f44
 8007ec8:	08008f55 	.word	0x08008f55

08007ecc <__mcmp>:
 8007ecc:	b530      	push	{r4, r5, lr}
 8007ece:	6902      	ldr	r2, [r0, #16]
 8007ed0:	690c      	ldr	r4, [r1, #16]
 8007ed2:	1b12      	subs	r2, r2, r4
 8007ed4:	d10e      	bne.n	8007ef4 <__mcmp+0x28>
 8007ed6:	f100 0314 	add.w	r3, r0, #20
 8007eda:	3114      	adds	r1, #20
 8007edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007eec:	42a5      	cmp	r5, r4
 8007eee:	d003      	beq.n	8007ef8 <__mcmp+0x2c>
 8007ef0:	d305      	bcc.n	8007efe <__mcmp+0x32>
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	4283      	cmp	r3, r0
 8007efa:	d3f3      	bcc.n	8007ee4 <__mcmp+0x18>
 8007efc:	e7fa      	b.n	8007ef4 <__mcmp+0x28>
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	e7f7      	b.n	8007ef4 <__mcmp+0x28>

08007f04 <__mdiff>:
 8007f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	460c      	mov	r4, r1
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4620      	mov	r0, r4
 8007f10:	4690      	mov	r8, r2
 8007f12:	f7ff ffdb 	bl	8007ecc <__mcmp>
 8007f16:	1e05      	subs	r5, r0, #0
 8007f18:	d110      	bne.n	8007f3c <__mdiff+0x38>
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fd59 	bl	80079d4 <_Balloc>
 8007f22:	b930      	cbnz	r0, 8007f32 <__mdiff+0x2e>
 8007f24:	4b3a      	ldr	r3, [pc, #232]	; (8008010 <__mdiff+0x10c>)
 8007f26:	4602      	mov	r2, r0
 8007f28:	f240 2137 	movw	r1, #567	; 0x237
 8007f2c:	4839      	ldr	r0, [pc, #228]	; (8008014 <__mdiff+0x110>)
 8007f2e:	f000 fba7 	bl	8008680 <__assert_func>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3c:	bfa4      	itt	ge
 8007f3e:	4643      	movge	r3, r8
 8007f40:	46a0      	movge	r8, r4
 8007f42:	4630      	mov	r0, r6
 8007f44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f48:	bfa6      	itte	ge
 8007f4a:	461c      	movge	r4, r3
 8007f4c:	2500      	movge	r5, #0
 8007f4e:	2501      	movlt	r5, #1
 8007f50:	f7ff fd40 	bl	80079d4 <_Balloc>
 8007f54:	b920      	cbnz	r0, 8007f60 <__mdiff+0x5c>
 8007f56:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <__mdiff+0x10c>)
 8007f58:	4602      	mov	r2, r0
 8007f5a:	f240 2145 	movw	r1, #581	; 0x245
 8007f5e:	e7e5      	b.n	8007f2c <__mdiff+0x28>
 8007f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f64:	6926      	ldr	r6, [r4, #16]
 8007f66:	60c5      	str	r5, [r0, #12]
 8007f68:	f104 0914 	add.w	r9, r4, #20
 8007f6c:	f108 0514 	add.w	r5, r8, #20
 8007f70:	f100 0e14 	add.w	lr, r0, #20
 8007f74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f7c:	f108 0210 	add.w	r2, r8, #16
 8007f80:	46f2      	mov	sl, lr
 8007f82:	2100      	movs	r1, #0
 8007f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f8c:	fa11 f88b 	uxtah	r8, r1, fp
 8007f90:	b299      	uxth	r1, r3
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	eba8 0801 	sub.w	r8, r8, r1
 8007f98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fa0:	fa1f f888 	uxth.w	r8, r8
 8007fa4:	1419      	asrs	r1, r3, #16
 8007fa6:	454e      	cmp	r6, r9
 8007fa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fac:	f84a 3b04 	str.w	r3, [sl], #4
 8007fb0:	d8e8      	bhi.n	8007f84 <__mdiff+0x80>
 8007fb2:	1b33      	subs	r3, r6, r4
 8007fb4:	3b15      	subs	r3, #21
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	3304      	adds	r3, #4
 8007fbc:	3415      	adds	r4, #21
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	bf38      	it	cc
 8007fc2:	2304      	movcc	r3, #4
 8007fc4:	441d      	add	r5, r3
 8007fc6:	4473      	add	r3, lr
 8007fc8:	469e      	mov	lr, r3
 8007fca:	462e      	mov	r6, r5
 8007fcc:	4566      	cmp	r6, ip
 8007fce:	d30e      	bcc.n	8007fee <__mdiff+0xea>
 8007fd0:	f10c 0203 	add.w	r2, ip, #3
 8007fd4:	1b52      	subs	r2, r2, r5
 8007fd6:	f022 0203 	bic.w	r2, r2, #3
 8007fda:	3d03      	subs	r5, #3
 8007fdc:	45ac      	cmp	ip, r5
 8007fde:	bf38      	it	cc
 8007fe0:	2200      	movcc	r2, #0
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fe8:	b17a      	cbz	r2, 800800a <__mdiff+0x106>
 8007fea:	6107      	str	r7, [r0, #16]
 8007fec:	e7a4      	b.n	8007f38 <__mdiff+0x34>
 8007fee:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ff2:	fa11 f288 	uxtah	r2, r1, r8
 8007ff6:	1414      	asrs	r4, r2, #16
 8007ff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ffc:	b292      	uxth	r2, r2
 8007ffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008002:	f84e 2b04 	str.w	r2, [lr], #4
 8008006:	1421      	asrs	r1, r4, #16
 8008008:	e7e0      	b.n	8007fcc <__mdiff+0xc8>
 800800a:	3f01      	subs	r7, #1
 800800c:	e7ea      	b.n	8007fe4 <__mdiff+0xe0>
 800800e:	bf00      	nop
 8008010:	08008f44 	.word	0x08008f44
 8008014:	08008f55 	.word	0x08008f55

08008018 <__d2b>:
 8008018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800801c:	460f      	mov	r7, r1
 800801e:	2101      	movs	r1, #1
 8008020:	ec59 8b10 	vmov	r8, r9, d0
 8008024:	4616      	mov	r6, r2
 8008026:	f7ff fcd5 	bl	80079d4 <_Balloc>
 800802a:	4604      	mov	r4, r0
 800802c:	b930      	cbnz	r0, 800803c <__d2b+0x24>
 800802e:	4602      	mov	r2, r0
 8008030:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <__d2b+0xac>)
 8008032:	4825      	ldr	r0, [pc, #148]	; (80080c8 <__d2b+0xb0>)
 8008034:	f240 310f 	movw	r1, #783	; 0x30f
 8008038:	f000 fb22 	bl	8008680 <__assert_func>
 800803c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008044:	bb2d      	cbnz	r5, 8008092 <__d2b+0x7a>
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	f1b8 0300 	subs.w	r3, r8, #0
 800804c:	d026      	beq.n	800809c <__d2b+0x84>
 800804e:	4668      	mov	r0, sp
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f7ff fd87 	bl	8007b64 <__lo0bits>
 8008056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800805a:	b1e8      	cbz	r0, 8008098 <__d2b+0x80>
 800805c:	f1c0 0320 	rsb	r3, r0, #32
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	430b      	orrs	r3, r1
 8008066:	40c2      	lsrs	r2, r0
 8008068:	6163      	str	r3, [r4, #20]
 800806a:	9201      	str	r2, [sp, #4]
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	61a3      	str	r3, [r4, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf14      	ite	ne
 8008074:	2202      	movne	r2, #2
 8008076:	2201      	moveq	r2, #1
 8008078:	6122      	str	r2, [r4, #16]
 800807a:	b1bd      	cbz	r5, 80080ac <__d2b+0x94>
 800807c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008080:	4405      	add	r5, r0
 8008082:	603d      	str	r5, [r7, #0]
 8008084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008088:	6030      	str	r0, [r6, #0]
 800808a:	4620      	mov	r0, r4
 800808c:	b003      	add	sp, #12
 800808e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008096:	e7d6      	b.n	8008046 <__d2b+0x2e>
 8008098:	6161      	str	r1, [r4, #20]
 800809a:	e7e7      	b.n	800806c <__d2b+0x54>
 800809c:	a801      	add	r0, sp, #4
 800809e:	f7ff fd61 	bl	8007b64 <__lo0bits>
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	6163      	str	r3, [r4, #20]
 80080a6:	3020      	adds	r0, #32
 80080a8:	2201      	movs	r2, #1
 80080aa:	e7e5      	b.n	8008078 <__d2b+0x60>
 80080ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080b4:	6038      	str	r0, [r7, #0]
 80080b6:	6918      	ldr	r0, [r3, #16]
 80080b8:	f7ff fd34 	bl	8007b24 <__hi0bits>
 80080bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080c0:	e7e2      	b.n	8008088 <__d2b+0x70>
 80080c2:	bf00      	nop
 80080c4:	08008f44 	.word	0x08008f44
 80080c8:	08008f55 	.word	0x08008f55

080080cc <__sfputc_r>:
 80080cc:	6893      	ldr	r3, [r2, #8]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	b410      	push	{r4}
 80080d4:	6093      	str	r3, [r2, #8]
 80080d6:	da08      	bge.n	80080ea <__sfputc_r+0x1e>
 80080d8:	6994      	ldr	r4, [r2, #24]
 80080da:	42a3      	cmp	r3, r4
 80080dc:	db01      	blt.n	80080e2 <__sfputc_r+0x16>
 80080de:	290a      	cmp	r1, #10
 80080e0:	d103      	bne.n	80080ea <__sfputc_r+0x1e>
 80080e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e6:	f000 ba17 	b.w	8008518 <__swbuf_r>
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	1c58      	adds	r0, r3, #1
 80080ee:	6010      	str	r0, [r2, #0]
 80080f0:	7019      	strb	r1, [r3, #0]
 80080f2:	4608      	mov	r0, r1
 80080f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <__sfputs_r>:
 80080fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	4614      	mov	r4, r2
 8008102:	18d5      	adds	r5, r2, r3
 8008104:	42ac      	cmp	r4, r5
 8008106:	d101      	bne.n	800810c <__sfputs_r+0x12>
 8008108:	2000      	movs	r0, #0
 800810a:	e007      	b.n	800811c <__sfputs_r+0x22>
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	463a      	mov	r2, r7
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ffda 	bl	80080cc <__sfputc_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d1f3      	bne.n	8008104 <__sfputs_r+0xa>
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008120 <_vfiprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	460d      	mov	r5, r1
 8008126:	b09d      	sub	sp, #116	; 0x74
 8008128:	4614      	mov	r4, r2
 800812a:	4698      	mov	r8, r3
 800812c:	4606      	mov	r6, r0
 800812e:	b118      	cbz	r0, 8008138 <_vfiprintf_r+0x18>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <_vfiprintf_r+0x18>
 8008134:	f7fe fbbe 	bl	80068b4 <__sinit>
 8008138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d405      	bmi.n	800814a <_vfiprintf_r+0x2a>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	059a      	lsls	r2, r3, #22
 8008142:	d402      	bmi.n	800814a <_vfiprintf_r+0x2a>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7fe fcc6 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	d501      	bpl.n	8008154 <_vfiprintf_r+0x34>
 8008150:	692b      	ldr	r3, [r5, #16]
 8008152:	b99b      	cbnz	r3, 800817c <_vfiprintf_r+0x5c>
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f000 fa1c 	bl	8008594 <__swsetup_r>
 800815c:	b170      	cbz	r0, 800817c <_vfiprintf_r+0x5c>
 800815e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008160:	07dc      	lsls	r4, r3, #31
 8008162:	d504      	bpl.n	800816e <_vfiprintf_r+0x4e>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	b01d      	add	sp, #116	; 0x74
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	0598      	lsls	r0, r3, #22
 8008172:	d4f7      	bmi.n	8008164 <_vfiprintf_r+0x44>
 8008174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008176:	f7fe fcaf 	bl	8006ad8 <__retarget_lock_release_recursive>
 800817a:	e7f3      	b.n	8008164 <_vfiprintf_r+0x44>
 800817c:	2300      	movs	r3, #0
 800817e:	9309      	str	r3, [sp, #36]	; 0x24
 8008180:	2320      	movs	r3, #32
 8008182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008186:	f8cd 800c 	str.w	r8, [sp, #12]
 800818a:	2330      	movs	r3, #48	; 0x30
 800818c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008340 <_vfiprintf_r+0x220>
 8008190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008194:	f04f 0901 	mov.w	r9, #1
 8008198:	4623      	mov	r3, r4
 800819a:	469a      	mov	sl, r3
 800819c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a0:	b10a      	cbz	r2, 80081a6 <_vfiprintf_r+0x86>
 80081a2:	2a25      	cmp	r2, #37	; 0x25
 80081a4:	d1f9      	bne.n	800819a <_vfiprintf_r+0x7a>
 80081a6:	ebba 0b04 	subs.w	fp, sl, r4
 80081aa:	d00b      	beq.n	80081c4 <_vfiprintf_r+0xa4>
 80081ac:	465b      	mov	r3, fp
 80081ae:	4622      	mov	r2, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff ffa1 	bl	80080fa <__sfputs_r>
 80081b8:	3001      	adds	r0, #1
 80081ba:	f000 80a9 	beq.w	8008310 <_vfiprintf_r+0x1f0>
 80081be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c0:	445a      	add	r2, fp
 80081c2:	9209      	str	r2, [sp, #36]	; 0x24
 80081c4:	f89a 3000 	ldrb.w	r3, [sl]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80a1 	beq.w	8008310 <_vfiprintf_r+0x1f0>
 80081ce:	2300      	movs	r3, #0
 80081d0:	f04f 32ff 	mov.w	r2, #4294967295
 80081d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d8:	f10a 0a01 	add.w	sl, sl, #1
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e4:	931a      	str	r3, [sp, #104]	; 0x68
 80081e6:	4654      	mov	r4, sl
 80081e8:	2205      	movs	r2, #5
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	4854      	ldr	r0, [pc, #336]	; (8008340 <_vfiprintf_r+0x220>)
 80081f0:	f7f8 f80e 	bl	8000210 <memchr>
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	b9d8      	cbnz	r0, 8008230 <_vfiprintf_r+0x110>
 80081f8:	06d1      	lsls	r1, r2, #27
 80081fa:	bf44      	itt	mi
 80081fc:	2320      	movmi	r3, #32
 80081fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008202:	0713      	lsls	r3, r2, #28
 8008204:	bf44      	itt	mi
 8008206:	232b      	movmi	r3, #43	; 0x2b
 8008208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820c:	f89a 3000 	ldrb.w	r3, [sl]
 8008210:	2b2a      	cmp	r3, #42	; 0x2a
 8008212:	d015      	beq.n	8008240 <_vfiprintf_r+0x120>
 8008214:	9a07      	ldr	r2, [sp, #28]
 8008216:	4654      	mov	r4, sl
 8008218:	2000      	movs	r0, #0
 800821a:	f04f 0c0a 	mov.w	ip, #10
 800821e:	4621      	mov	r1, r4
 8008220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008224:	3b30      	subs	r3, #48	; 0x30
 8008226:	2b09      	cmp	r3, #9
 8008228:	d94d      	bls.n	80082c6 <_vfiprintf_r+0x1a6>
 800822a:	b1b0      	cbz	r0, 800825a <_vfiprintf_r+0x13a>
 800822c:	9207      	str	r2, [sp, #28]
 800822e:	e014      	b.n	800825a <_vfiprintf_r+0x13a>
 8008230:	eba0 0308 	sub.w	r3, r0, r8
 8008234:	fa09 f303 	lsl.w	r3, r9, r3
 8008238:	4313      	orrs	r3, r2
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	46a2      	mov	sl, r4
 800823e:	e7d2      	b.n	80081e6 <_vfiprintf_r+0xc6>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d19      	adds	r1, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9103      	str	r1, [sp, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfbb      	ittet	lt
 800824c:	425b      	neglt	r3, r3
 800824e:	f042 0202 	orrlt.w	r2, r2, #2
 8008252:	9307      	strge	r3, [sp, #28]
 8008254:	9307      	strlt	r3, [sp, #28]
 8008256:	bfb8      	it	lt
 8008258:	9204      	strlt	r2, [sp, #16]
 800825a:	7823      	ldrb	r3, [r4, #0]
 800825c:	2b2e      	cmp	r3, #46	; 0x2e
 800825e:	d10c      	bne.n	800827a <_vfiprintf_r+0x15a>
 8008260:	7863      	ldrb	r3, [r4, #1]
 8008262:	2b2a      	cmp	r3, #42	; 0x2a
 8008264:	d134      	bne.n	80082d0 <_vfiprintf_r+0x1b0>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	1d1a      	adds	r2, r3, #4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	9203      	str	r2, [sp, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	f04f 33ff 	movlt.w	r3, #4294967295
 8008276:	3402      	adds	r4, #2
 8008278:	9305      	str	r3, [sp, #20]
 800827a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008350 <_vfiprintf_r+0x230>
 800827e:	7821      	ldrb	r1, [r4, #0]
 8008280:	2203      	movs	r2, #3
 8008282:	4650      	mov	r0, sl
 8008284:	f7f7 ffc4 	bl	8000210 <memchr>
 8008288:	b138      	cbz	r0, 800829a <_vfiprintf_r+0x17a>
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	eba0 000a 	sub.w	r0, r0, sl
 8008290:	2240      	movs	r2, #64	; 0x40
 8008292:	4082      	lsls	r2, r0
 8008294:	4313      	orrs	r3, r2
 8008296:	3401      	adds	r4, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829e:	4829      	ldr	r0, [pc, #164]	; (8008344 <_vfiprintf_r+0x224>)
 80082a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a4:	2206      	movs	r2, #6
 80082a6:	f7f7 ffb3 	bl	8000210 <memchr>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d03f      	beq.n	800832e <_vfiprintf_r+0x20e>
 80082ae:	4b26      	ldr	r3, [pc, #152]	; (8008348 <_vfiprintf_r+0x228>)
 80082b0:	bb1b      	cbnz	r3, 80082fa <_vfiprintf_r+0x1da>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	3307      	adds	r3, #7
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	3308      	adds	r3, #8
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	443b      	add	r3, r7
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	e768      	b.n	8008198 <_vfiprintf_r+0x78>
 80082c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ca:	460c      	mov	r4, r1
 80082cc:	2001      	movs	r0, #1
 80082ce:	e7a6      	b.n	800821e <_vfiprintf_r+0xfe>
 80082d0:	2300      	movs	r3, #0
 80082d2:	3401      	adds	r4, #1
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	4619      	mov	r1, r3
 80082d8:	f04f 0c0a 	mov.w	ip, #10
 80082dc:	4620      	mov	r0, r4
 80082de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e2:	3a30      	subs	r2, #48	; 0x30
 80082e4:	2a09      	cmp	r2, #9
 80082e6:	d903      	bls.n	80082f0 <_vfiprintf_r+0x1d0>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0c6      	beq.n	800827a <_vfiprintf_r+0x15a>
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	e7c4      	b.n	800827a <_vfiprintf_r+0x15a>
 80082f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f4:	4604      	mov	r4, r0
 80082f6:	2301      	movs	r3, #1
 80082f8:	e7f0      	b.n	80082dc <_vfiprintf_r+0x1bc>
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <_vfiprintf_r+0x22c>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	4630      	mov	r0, r6
 8008306:	f7fd fe83 	bl	8006010 <_printf_float>
 800830a:	4607      	mov	r7, r0
 800830c:	1c78      	adds	r0, r7, #1
 800830e:	d1d6      	bne.n	80082be <_vfiprintf_r+0x19e>
 8008310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d405      	bmi.n	8008322 <_vfiprintf_r+0x202>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d402      	bmi.n	8008322 <_vfiprintf_r+0x202>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7fe fbdb 	bl	8006ad8 <__retarget_lock_release_recursive>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	065b      	lsls	r3, r3, #25
 8008326:	f53f af1d 	bmi.w	8008164 <_vfiprintf_r+0x44>
 800832a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832c:	e71c      	b.n	8008168 <_vfiprintf_r+0x48>
 800832e:	ab03      	add	r3, sp, #12
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	462a      	mov	r2, r5
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <_vfiprintf_r+0x22c>)
 8008336:	a904      	add	r1, sp, #16
 8008338:	4630      	mov	r0, r6
 800833a:	f7fe f90d 	bl	8006558 <_printf_i>
 800833e:	e7e4      	b.n	800830a <_vfiprintf_r+0x1ea>
 8008340:	080090ac 	.word	0x080090ac
 8008344:	080090b6 	.word	0x080090b6
 8008348:	08006011 	.word	0x08006011
 800834c:	080080fb 	.word	0x080080fb
 8008350:	080090b2 	.word	0x080090b2

08008354 <__sflush_r>:
 8008354:	898a      	ldrh	r2, [r1, #12]
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	4605      	mov	r5, r0
 800835c:	0710      	lsls	r0, r2, #28
 800835e:	460c      	mov	r4, r1
 8008360:	d458      	bmi.n	8008414 <__sflush_r+0xc0>
 8008362:	684b      	ldr	r3, [r1, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	dc05      	bgt.n	8008374 <__sflush_r+0x20>
 8008368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc02      	bgt.n	8008374 <__sflush_r+0x20>
 800836e:	2000      	movs	r0, #0
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008376:	2e00      	cmp	r6, #0
 8008378:	d0f9      	beq.n	800836e <__sflush_r+0x1a>
 800837a:	2300      	movs	r3, #0
 800837c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008380:	682f      	ldr	r7, [r5, #0]
 8008382:	6a21      	ldr	r1, [r4, #32]
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	d032      	beq.n	80083ee <__sflush_r+0x9a>
 8008388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	075a      	lsls	r2, r3, #29
 800838e:	d505      	bpl.n	800839c <__sflush_r+0x48>
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	1ac0      	subs	r0, r0, r3
 8008394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008396:	b10b      	cbz	r3, 800839c <__sflush_r+0x48>
 8008398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	2300      	movs	r3, #0
 800839e:	4602      	mov	r2, r0
 80083a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a2:	6a21      	ldr	r1, [r4, #32]
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b0      	blx	r6
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	d106      	bne.n	80083bc <__sflush_r+0x68>
 80083ae:	6829      	ldr	r1, [r5, #0]
 80083b0:	291d      	cmp	r1, #29
 80083b2:	d82b      	bhi.n	800840c <__sflush_r+0xb8>
 80083b4:	4a29      	ldr	r2, [pc, #164]	; (800845c <__sflush_r+0x108>)
 80083b6:	410a      	asrs	r2, r1
 80083b8:	07d6      	lsls	r6, r2, #31
 80083ba:	d427      	bmi.n	800840c <__sflush_r+0xb8>
 80083bc:	2200      	movs	r2, #0
 80083be:	6062      	str	r2, [r4, #4]
 80083c0:	04d9      	lsls	r1, r3, #19
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	6022      	str	r2, [r4, #0]
 80083c6:	d504      	bpl.n	80083d2 <__sflush_r+0x7e>
 80083c8:	1c42      	adds	r2, r0, #1
 80083ca:	d101      	bne.n	80083d0 <__sflush_r+0x7c>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b903      	cbnz	r3, 80083d2 <__sflush_r+0x7e>
 80083d0:	6560      	str	r0, [r4, #84]	; 0x54
 80083d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d4:	602f      	str	r7, [r5, #0]
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d0c9      	beq.n	800836e <__sflush_r+0x1a>
 80083da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083de:	4299      	cmp	r1, r3
 80083e0:	d002      	beq.n	80083e8 <__sflush_r+0x94>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff f9f6 	bl	80077d4 <_free_r>
 80083e8:	2000      	movs	r0, #0
 80083ea:	6360      	str	r0, [r4, #52]	; 0x34
 80083ec:	e7c0      	b.n	8008370 <__sflush_r+0x1c>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b0      	blx	r6
 80083f4:	1c41      	adds	r1, r0, #1
 80083f6:	d1c8      	bne.n	800838a <__sflush_r+0x36>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0c5      	beq.n	800838a <__sflush_r+0x36>
 80083fe:	2b1d      	cmp	r3, #29
 8008400:	d001      	beq.n	8008406 <__sflush_r+0xb2>
 8008402:	2b16      	cmp	r3, #22
 8008404:	d101      	bne.n	800840a <__sflush_r+0xb6>
 8008406:	602f      	str	r7, [r5, #0]
 8008408:	e7b1      	b.n	800836e <__sflush_r+0x1a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	e7ad      	b.n	8008370 <__sflush_r+0x1c>
 8008414:	690f      	ldr	r7, [r1, #16]
 8008416:	2f00      	cmp	r7, #0
 8008418:	d0a9      	beq.n	800836e <__sflush_r+0x1a>
 800841a:	0793      	lsls	r3, r2, #30
 800841c:	680e      	ldr	r6, [r1, #0]
 800841e:	bf08      	it	eq
 8008420:	694b      	ldreq	r3, [r1, #20]
 8008422:	600f      	str	r7, [r1, #0]
 8008424:	bf18      	it	ne
 8008426:	2300      	movne	r3, #0
 8008428:	eba6 0807 	sub.w	r8, r6, r7
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	dd9c      	ble.n	800836e <__sflush_r+0x1a>
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008438:	4643      	mov	r3, r8
 800843a:	463a      	mov	r2, r7
 800843c:	4628      	mov	r0, r5
 800843e:	47b0      	blx	r6
 8008440:	2800      	cmp	r0, #0
 8008442:	dc06      	bgt.n	8008452 <__sflush_r+0xfe>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e78e      	b.n	8008370 <__sflush_r+0x1c>
 8008452:	4407      	add	r7, r0
 8008454:	eba8 0800 	sub.w	r8, r8, r0
 8008458:	e7e9      	b.n	800842e <__sflush_r+0xda>
 800845a:	bf00      	nop
 800845c:	dfbffffe 	.word	0xdfbffffe

08008460 <_fflush_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	b913      	cbnz	r3, 8008470 <_fflush_r+0x10>
 800846a:	2500      	movs	r5, #0
 800846c:	4628      	mov	r0, r5
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	b118      	cbz	r0, 800847a <_fflush_r+0x1a>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <_fflush_r+0x1a>
 8008476:	f7fe fa1d 	bl	80068b4 <__sinit>
 800847a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f3      	beq.n	800846a <_fflush_r+0xa>
 8008482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008484:	07d0      	lsls	r0, r2, #31
 8008486:	d404      	bmi.n	8008492 <_fflush_r+0x32>
 8008488:	0599      	lsls	r1, r3, #22
 800848a:	d402      	bmi.n	8008492 <_fflush_r+0x32>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f7fe fb22 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 8008492:	4628      	mov	r0, r5
 8008494:	4621      	mov	r1, r4
 8008496:	f7ff ff5d 	bl	8008354 <__sflush_r>
 800849a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	4605      	mov	r5, r0
 80084a0:	d4e4      	bmi.n	800846c <_fflush_r+0xc>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d4e1      	bmi.n	800846c <_fflush_r+0xc>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f7fe fb15 	bl	8006ad8 <__retarget_lock_release_recursive>
 80084ae:	e7dd      	b.n	800846c <_fflush_r+0xc>

080084b0 <_putc_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	460d      	mov	r5, r1
 80084b4:	4614      	mov	r4, r2
 80084b6:	4606      	mov	r6, r0
 80084b8:	b118      	cbz	r0, 80084c2 <_putc_r+0x12>
 80084ba:	6a03      	ldr	r3, [r0, #32]
 80084bc:	b90b      	cbnz	r3, 80084c2 <_putc_r+0x12>
 80084be:	f7fe f9f9 	bl	80068b4 <__sinit>
 80084c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c4:	07d8      	lsls	r0, r3, #31
 80084c6:	d405      	bmi.n	80084d4 <_putc_r+0x24>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	0599      	lsls	r1, r3, #22
 80084cc:	d402      	bmi.n	80084d4 <_putc_r+0x24>
 80084ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d0:	f7fe fb01 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	60a3      	str	r3, [r4, #8]
 80084dc:	da05      	bge.n	80084ea <_putc_r+0x3a>
 80084de:	69a2      	ldr	r2, [r4, #24]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	db12      	blt.n	800850a <_putc_r+0x5a>
 80084e4:	b2eb      	uxtb	r3, r5
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	d00f      	beq.n	800850a <_putc_r+0x5a>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	701d      	strb	r5, [r3, #0]
 80084f2:	b2ed      	uxtb	r5, r5
 80084f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f6:	07da      	lsls	r2, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_putc_r+0x56>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	059b      	lsls	r3, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_putc_r+0x56>
 8008500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008502:	f7fe fae9 	bl	8006ad8 <__retarget_lock_release_recursive>
 8008506:	4628      	mov	r0, r5
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	4629      	mov	r1, r5
 800850c:	4622      	mov	r2, r4
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f802 	bl	8008518 <__swbuf_r>
 8008514:	4605      	mov	r5, r0
 8008516:	e7ed      	b.n	80084f4 <_putc_r+0x44>

08008518 <__swbuf_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	460e      	mov	r6, r1
 800851c:	4614      	mov	r4, r2
 800851e:	4605      	mov	r5, r0
 8008520:	b118      	cbz	r0, 800852a <__swbuf_r+0x12>
 8008522:	6a03      	ldr	r3, [r0, #32]
 8008524:	b90b      	cbnz	r3, 800852a <__swbuf_r+0x12>
 8008526:	f7fe f9c5 	bl	80068b4 <__sinit>
 800852a:	69a3      	ldr	r3, [r4, #24]
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	071a      	lsls	r2, r3, #28
 8008532:	d525      	bpl.n	8008580 <__swbuf_r+0x68>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	b31b      	cbz	r3, 8008580 <__swbuf_r+0x68>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	6922      	ldr	r2, [r4, #16]
 800853c:	1a98      	subs	r0, r3, r2
 800853e:	6963      	ldr	r3, [r4, #20]
 8008540:	b2f6      	uxtb	r6, r6
 8008542:	4283      	cmp	r3, r0
 8008544:	4637      	mov	r7, r6
 8008546:	dc04      	bgt.n	8008552 <__swbuf_r+0x3a>
 8008548:	4621      	mov	r1, r4
 800854a:	4628      	mov	r0, r5
 800854c:	f7ff ff88 	bl	8008460 <_fflush_r>
 8008550:	b9e0      	cbnz	r0, 800858c <__swbuf_r+0x74>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	701e      	strb	r6, [r3, #0]
 8008560:	6962      	ldr	r2, [r4, #20]
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	429a      	cmp	r2, r3
 8008566:	d004      	beq.n	8008572 <__swbuf_r+0x5a>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	07db      	lsls	r3, r3, #31
 800856c:	d506      	bpl.n	800857c <__swbuf_r+0x64>
 800856e:	2e0a      	cmp	r6, #10
 8008570:	d104      	bne.n	800857c <__swbuf_r+0x64>
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff ff73 	bl	8008460 <_fflush_r>
 800857a:	b938      	cbnz	r0, 800858c <__swbuf_r+0x74>
 800857c:	4638      	mov	r0, r7
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f806 	bl	8008594 <__swsetup_r>
 8008588:	2800      	cmp	r0, #0
 800858a:	d0d5      	beq.n	8008538 <__swbuf_r+0x20>
 800858c:	f04f 37ff 	mov.w	r7, #4294967295
 8008590:	e7f4      	b.n	800857c <__swbuf_r+0x64>
	...

08008594 <__swsetup_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <__swsetup_r+0xac>)
 8008598:	4605      	mov	r5, r0
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	460c      	mov	r4, r1
 800859e:	b118      	cbz	r0, 80085a8 <__swsetup_r+0x14>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <__swsetup_r+0x14>
 80085a4:	f7fe f986 	bl	80068b4 <__sinit>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085ae:	0718      	lsls	r0, r3, #28
 80085b0:	d422      	bmi.n	80085f8 <__swsetup_r+0x64>
 80085b2:	06d9      	lsls	r1, r3, #27
 80085b4:	d407      	bmi.n	80085c6 <__swsetup_r+0x32>
 80085b6:	2309      	movs	r3, #9
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e034      	b.n	8008630 <__swsetup_r+0x9c>
 80085c6:	0758      	lsls	r0, r3, #29
 80085c8:	d512      	bpl.n	80085f0 <__swsetup_r+0x5c>
 80085ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085cc:	b141      	cbz	r1, 80085e0 <__swsetup_r+0x4c>
 80085ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d2:	4299      	cmp	r1, r3
 80085d4:	d002      	beq.n	80085dc <__swsetup_r+0x48>
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7ff f8fc 	bl	80077d4 <_free_r>
 80085dc:	2300      	movs	r3, #0
 80085de:	6363      	str	r3, [r4, #52]	; 0x34
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	2300      	movs	r3, #0
 80085ea:	6063      	str	r3, [r4, #4]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	f043 0308 	orr.w	r3, r3, #8
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	b94b      	cbnz	r3, 8008610 <__swsetup_r+0x7c>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008606:	d003      	beq.n	8008610 <__swsetup_r+0x7c>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f8c4 	bl	8008798 <__smakebuf_r>
 8008610:	89a0      	ldrh	r0, [r4, #12]
 8008612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008616:	f010 0301 	ands.w	r3, r0, #1
 800861a:	d00a      	beq.n	8008632 <__swsetup_r+0x9e>
 800861c:	2300      	movs	r3, #0
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	6963      	ldr	r3, [r4, #20]
 8008622:	425b      	negs	r3, r3
 8008624:	61a3      	str	r3, [r4, #24]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	b943      	cbnz	r3, 800863c <__swsetup_r+0xa8>
 800862a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800862e:	d1c4      	bne.n	80085ba <__swsetup_r+0x26>
 8008630:	bd38      	pop	{r3, r4, r5, pc}
 8008632:	0781      	lsls	r1, r0, #30
 8008634:	bf58      	it	pl
 8008636:	6963      	ldrpl	r3, [r4, #20]
 8008638:	60a3      	str	r3, [r4, #8]
 800863a:	e7f4      	b.n	8008626 <__swsetup_r+0x92>
 800863c:	2000      	movs	r0, #0
 800863e:	e7f7      	b.n	8008630 <__swsetup_r+0x9c>
 8008640:	20000094 	.word	0x20000094

08008644 <_sbrk_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d06      	ldr	r5, [pc, #24]	; (8008660 <_sbrk_r+0x1c>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7f9 fa86 	bl	8001b60 <_sbrk>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_sbrk_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_sbrk_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	200005a8 	.word	0x200005a8

08008664 <memcpy>:
 8008664:	440a      	add	r2, r1
 8008666:	4291      	cmp	r1, r2
 8008668:	f100 33ff 	add.w	r3, r0, #4294967295
 800866c:	d100      	bne.n	8008670 <memcpy+0xc>
 800866e:	4770      	bx	lr
 8008670:	b510      	push	{r4, lr}
 8008672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800867a:	4291      	cmp	r1, r2
 800867c:	d1f9      	bne.n	8008672 <memcpy+0xe>
 800867e:	bd10      	pop	{r4, pc}

08008680 <__assert_func>:
 8008680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008682:	4614      	mov	r4, r2
 8008684:	461a      	mov	r2, r3
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <__assert_func+0x2c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4605      	mov	r5, r0
 800868c:	68d8      	ldr	r0, [r3, #12]
 800868e:	b14c      	cbz	r4, 80086a4 <__assert_func+0x24>
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <__assert_func+0x30>)
 8008692:	9100      	str	r1, [sp, #0]
 8008694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008698:	4906      	ldr	r1, [pc, #24]	; (80086b4 <__assert_func+0x34>)
 800869a:	462b      	mov	r3, r5
 800869c:	f000 f844 	bl	8008728 <fiprintf>
 80086a0:	f000 f8d8 	bl	8008854 <abort>
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <__assert_func+0x38>)
 80086a6:	461c      	mov	r4, r3
 80086a8:	e7f3      	b.n	8008692 <__assert_func+0x12>
 80086aa:	bf00      	nop
 80086ac:	20000094 	.word	0x20000094
 80086b0:	080090c7 	.word	0x080090c7
 80086b4:	080090d4 	.word	0x080090d4
 80086b8:	08009102 	.word	0x08009102

080086bc <_calloc_r>:
 80086bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086be:	fba1 2402 	umull	r2, r4, r1, r2
 80086c2:	b94c      	cbnz	r4, 80086d8 <_calloc_r+0x1c>
 80086c4:	4611      	mov	r1, r2
 80086c6:	9201      	str	r2, [sp, #4]
 80086c8:	f7ff f8f8 	bl	80078bc <_malloc_r>
 80086cc:	9a01      	ldr	r2, [sp, #4]
 80086ce:	4605      	mov	r5, r0
 80086d0:	b930      	cbnz	r0, 80086e0 <_calloc_r+0x24>
 80086d2:	4628      	mov	r0, r5
 80086d4:	b003      	add	sp, #12
 80086d6:	bd30      	pop	{r4, r5, pc}
 80086d8:	220c      	movs	r2, #12
 80086da:	6002      	str	r2, [r0, #0]
 80086dc:	2500      	movs	r5, #0
 80086de:	e7f8      	b.n	80086d2 <_calloc_r+0x16>
 80086e0:	4621      	mov	r1, r4
 80086e2:	f7fe f97a 	bl	80069da <memset>
 80086e6:	e7f4      	b.n	80086d2 <_calloc_r+0x16>

080086e8 <__ascii_mbtowc>:
 80086e8:	b082      	sub	sp, #8
 80086ea:	b901      	cbnz	r1, 80086ee <__ascii_mbtowc+0x6>
 80086ec:	a901      	add	r1, sp, #4
 80086ee:	b142      	cbz	r2, 8008702 <__ascii_mbtowc+0x1a>
 80086f0:	b14b      	cbz	r3, 8008706 <__ascii_mbtowc+0x1e>
 80086f2:	7813      	ldrb	r3, [r2, #0]
 80086f4:	600b      	str	r3, [r1, #0]
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	1e10      	subs	r0, r2, #0
 80086fa:	bf18      	it	ne
 80086fc:	2001      	movne	r0, #1
 80086fe:	b002      	add	sp, #8
 8008700:	4770      	bx	lr
 8008702:	4610      	mov	r0, r2
 8008704:	e7fb      	b.n	80086fe <__ascii_mbtowc+0x16>
 8008706:	f06f 0001 	mvn.w	r0, #1
 800870a:	e7f8      	b.n	80086fe <__ascii_mbtowc+0x16>

0800870c <__ascii_wctomb>:
 800870c:	b149      	cbz	r1, 8008722 <__ascii_wctomb+0x16>
 800870e:	2aff      	cmp	r2, #255	; 0xff
 8008710:	bf85      	ittet	hi
 8008712:	238a      	movhi	r3, #138	; 0x8a
 8008714:	6003      	strhi	r3, [r0, #0]
 8008716:	700a      	strbls	r2, [r1, #0]
 8008718:	f04f 30ff 	movhi.w	r0, #4294967295
 800871c:	bf98      	it	ls
 800871e:	2001      	movls	r0, #1
 8008720:	4770      	bx	lr
 8008722:	4608      	mov	r0, r1
 8008724:	4770      	bx	lr
	...

08008728 <fiprintf>:
 8008728:	b40e      	push	{r1, r2, r3}
 800872a:	b503      	push	{r0, r1, lr}
 800872c:	4601      	mov	r1, r0
 800872e:	ab03      	add	r3, sp, #12
 8008730:	4805      	ldr	r0, [pc, #20]	; (8008748 <fiprintf+0x20>)
 8008732:	f853 2b04 	ldr.w	r2, [r3], #4
 8008736:	6800      	ldr	r0, [r0, #0]
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	f7ff fcf1 	bl	8008120 <_vfiprintf_r>
 800873e:	b002      	add	sp, #8
 8008740:	f85d eb04 	ldr.w	lr, [sp], #4
 8008744:	b003      	add	sp, #12
 8008746:	4770      	bx	lr
 8008748:	20000094 	.word	0x20000094

0800874c <__swhatbuf_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2900      	cmp	r1, #0
 8008756:	b096      	sub	sp, #88	; 0x58
 8008758:	4615      	mov	r5, r2
 800875a:	461e      	mov	r6, r3
 800875c:	da0d      	bge.n	800877a <__swhatbuf_r+0x2e>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	bf0c      	ite	eq
 800876a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800876e:	2340      	movne	r3, #64	; 0x40
 8008770:	2000      	movs	r0, #0
 8008772:	6031      	str	r1, [r6, #0]
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	b016      	add	sp, #88	; 0x58
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	466a      	mov	r2, sp
 800877c:	f000 f848 	bl	8008810 <_fstat_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	dbec      	blt.n	800875e <__swhatbuf_r+0x12>
 8008784:	9901      	ldr	r1, [sp, #4]
 8008786:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800878a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800878e:	4259      	negs	r1, r3
 8008790:	4159      	adcs	r1, r3
 8008792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008796:	e7eb      	b.n	8008770 <__swhatbuf_r+0x24>

08008798 <__smakebuf_r>:
 8008798:	898b      	ldrh	r3, [r1, #12]
 800879a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800879c:	079d      	lsls	r5, r3, #30
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	d507      	bpl.n	80087b4 <__smakebuf_r+0x1c>
 80087a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2301      	movs	r3, #1
 80087ae:	6163      	str	r3, [r4, #20]
 80087b0:	b002      	add	sp, #8
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	ab01      	add	r3, sp, #4
 80087b6:	466a      	mov	r2, sp
 80087b8:	f7ff ffc8 	bl	800874c <__swhatbuf_r>
 80087bc:	9900      	ldr	r1, [sp, #0]
 80087be:	4605      	mov	r5, r0
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7ff f87b 	bl	80078bc <_malloc_r>
 80087c6:	b948      	cbnz	r0, 80087dc <__smakebuf_r+0x44>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d4ef      	bmi.n	80087b0 <__smakebuf_r+0x18>
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	e7e3      	b.n	80087a4 <__smakebuf_r+0xc>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	6163      	str	r3, [r4, #20]
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	6120      	str	r0, [r4, #16]
 80087ee:	b15b      	cbz	r3, 8008808 <__smakebuf_r+0x70>
 80087f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f81d 	bl	8008834 <_isatty_r>
 80087fa:	b128      	cbz	r0, 8008808 <__smakebuf_r+0x70>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	431d      	orrs	r5, r3
 800880c:	81a5      	strh	r5, [r4, #12]
 800880e:	e7cf      	b.n	80087b0 <__smakebuf_r+0x18>

08008810 <_fstat_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d07      	ldr	r5, [pc, #28]	; (8008830 <_fstat_r+0x20>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	4611      	mov	r1, r2
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f7f9 f976 	bl	8001b0e <_fstat>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d102      	bne.n	800882c <_fstat_r+0x1c>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b103      	cbz	r3, 800882c <_fstat_r+0x1c>
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	bd38      	pop	{r3, r4, r5, pc}
 800882e:	bf00      	nop
 8008830:	200005a8 	.word	0x200005a8

08008834 <_isatty_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d06      	ldr	r5, [pc, #24]	; (8008850 <_isatty_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f9 f975 	bl	8001b2e <_isatty>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_isatty_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_isatty_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200005a8 	.word	0x200005a8

08008854 <abort>:
 8008854:	b508      	push	{r3, lr}
 8008856:	2006      	movs	r0, #6
 8008858:	f000 f82c 	bl	80088b4 <raise>
 800885c:	2001      	movs	r0, #1
 800885e:	f7f9 f923 	bl	8001aa8 <_exit>

08008862 <_raise_r>:
 8008862:	291f      	cmp	r1, #31
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4604      	mov	r4, r0
 8008868:	460d      	mov	r5, r1
 800886a:	d904      	bls.n	8008876 <_raise_r+0x14>
 800886c:	2316      	movs	r3, #22
 800886e:	6003      	str	r3, [r0, #0]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	bd38      	pop	{r3, r4, r5, pc}
 8008876:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008878:	b112      	cbz	r2, 8008880 <_raise_r+0x1e>
 800887a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800887e:	b94b      	cbnz	r3, 8008894 <_raise_r+0x32>
 8008880:	4620      	mov	r0, r4
 8008882:	f000 f831 	bl	80088e8 <_getpid_r>
 8008886:	462a      	mov	r2, r5
 8008888:	4601      	mov	r1, r0
 800888a:	4620      	mov	r0, r4
 800888c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008890:	f000 b818 	b.w	80088c4 <_kill_r>
 8008894:	2b01      	cmp	r3, #1
 8008896:	d00a      	beq.n	80088ae <_raise_r+0x4c>
 8008898:	1c59      	adds	r1, r3, #1
 800889a:	d103      	bne.n	80088a4 <_raise_r+0x42>
 800889c:	2316      	movs	r3, #22
 800889e:	6003      	str	r3, [r0, #0]
 80088a0:	2001      	movs	r0, #1
 80088a2:	e7e7      	b.n	8008874 <_raise_r+0x12>
 80088a4:	2400      	movs	r4, #0
 80088a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088aa:	4628      	mov	r0, r5
 80088ac:	4798      	blx	r3
 80088ae:	2000      	movs	r0, #0
 80088b0:	e7e0      	b.n	8008874 <_raise_r+0x12>
	...

080088b4 <raise>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <raise+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f7ff bfd2 	b.w	8008862 <_raise_r>
 80088be:	bf00      	nop
 80088c0:	20000094 	.word	0x20000094

080088c4 <_kill_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d07      	ldr	r5, [pc, #28]	; (80088e4 <_kill_r+0x20>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	4611      	mov	r1, r2
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f7f9 f8d9 	bl	8001a88 <_kill>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	d102      	bne.n	80088e0 <_kill_r+0x1c>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	b103      	cbz	r3, 80088e0 <_kill_r+0x1c>
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	bd38      	pop	{r3, r4, r5, pc}
 80088e2:	bf00      	nop
 80088e4:	200005a8 	.word	0x200005a8

080088e8 <_getpid_r>:
 80088e8:	f7f9 b8c6 	b.w	8001a78 <_getpid>
 80088ec:	0000      	movs	r0, r0
	...

080088f0 <exp>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	ed2d 8b02 	vpush	{d8}
 80088f6:	ec55 4b10 	vmov	r4, r5, d0
 80088fa:	f000 f895 	bl	8008a28 <__ieee754_exp>
 80088fe:	eeb0 8a40 	vmov.f32	s16, s0
 8008902:	eef0 8a60 	vmov.f32	s17, s1
 8008906:	ec45 4b10 	vmov	d0, r4, r5
 800890a:	f000 f839 	bl	8008980 <finite>
 800890e:	b168      	cbz	r0, 800892c <exp+0x3c>
 8008910:	a317      	add	r3, pc, #92	; (adr r3, 8008970 <exp+0x80>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f8 f91d 	bl	8000b58 <__aeabi_dcmpgt>
 800891e:	b160      	cbz	r0, 800893a <exp+0x4a>
 8008920:	f7fe f8ae 	bl	8006a80 <__errno>
 8008924:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008960 <exp+0x70>
 8008928:	2322      	movs	r3, #34	; 0x22
 800892a:	6003      	str	r3, [r0, #0]
 800892c:	eeb0 0a48 	vmov.f32	s0, s16
 8008930:	eef0 0a68 	vmov.f32	s1, s17
 8008934:	ecbd 8b02 	vpop	{d8}
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	a30f      	add	r3, pc, #60	; (adr r3, 8008978 <exp+0x88>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	4620      	mov	r0, r4
 8008942:	4629      	mov	r1, r5
 8008944:	f7f8 f8ea 	bl	8000b1c <__aeabi_dcmplt>
 8008948:	2800      	cmp	r0, #0
 800894a:	d0ef      	beq.n	800892c <exp+0x3c>
 800894c:	f7fe f898 	bl	8006a80 <__errno>
 8008950:	2322      	movs	r3, #34	; 0x22
 8008952:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008968 <exp+0x78>
 8008956:	6003      	str	r3, [r0, #0]
 8008958:	e7e8      	b.n	800892c <exp+0x3c>
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w
 8008960:	00000000 	.word	0x00000000
 8008964:	7ff00000 	.word	0x7ff00000
	...
 8008970:	fefa39ef 	.word	0xfefa39ef
 8008974:	40862e42 	.word	0x40862e42
 8008978:	d52d3051 	.word	0xd52d3051
 800897c:	c0874910 	.word	0xc0874910

08008980 <finite>:
 8008980:	b082      	sub	sp, #8
 8008982:	ed8d 0b00 	vstr	d0, [sp]
 8008986:	9801      	ldr	r0, [sp, #4]
 8008988:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800898c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008990:	0fc0      	lsrs	r0, r0, #31
 8008992:	b002      	add	sp, #8
 8008994:	4770      	bx	lr
	...

08008998 <round>:
 8008998:	ec53 2b10 	vmov	r2, r3, d0
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80089a2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80089a6:	2813      	cmp	r0, #19
 80089a8:	ee10 5a10 	vmov	r5, s0
 80089ac:	4619      	mov	r1, r3
 80089ae:	dc18      	bgt.n	80089e2 <round+0x4a>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	da09      	bge.n	80089c8 <round+0x30>
 80089b4:	3001      	adds	r0, #1
 80089b6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80089ba:	d103      	bne.n	80089c4 <round+0x2c>
 80089bc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80089c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089c4:	2300      	movs	r3, #0
 80089c6:	e02a      	b.n	8008a1e <round+0x86>
 80089c8:	4c16      	ldr	r4, [pc, #88]	; (8008a24 <round+0x8c>)
 80089ca:	4104      	asrs	r4, r0
 80089cc:	ea03 0604 	and.w	r6, r3, r4
 80089d0:	4316      	orrs	r6, r2
 80089d2:	d011      	beq.n	80089f8 <round+0x60>
 80089d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089d8:	4103      	asrs	r3, r0
 80089da:	440b      	add	r3, r1
 80089dc:	ea23 0104 	bic.w	r1, r3, r4
 80089e0:	e7f0      	b.n	80089c4 <round+0x2c>
 80089e2:	2833      	cmp	r0, #51	; 0x33
 80089e4:	dd0b      	ble.n	80089fe <round+0x66>
 80089e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80089ea:	d105      	bne.n	80089f8 <round+0x60>
 80089ec:	ee10 0a10 	vmov	r0, s0
 80089f0:	f7f7 fc6c 	bl	80002cc <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	ec43 2b10 	vmov	d0, r2, r3
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
 80089fe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008a02:	f04f 34ff 	mov.w	r4, #4294967295
 8008a06:	40f4      	lsrs	r4, r6
 8008a08:	4214      	tst	r4, r2
 8008a0a:	d0f5      	beq.n	80089f8 <round+0x60>
 8008a0c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008a10:	2301      	movs	r3, #1
 8008a12:	4083      	lsls	r3, r0
 8008a14:	195b      	adds	r3, r3, r5
 8008a16:	bf28      	it	cs
 8008a18:	3101      	addcs	r1, #1
 8008a1a:	ea23 0304 	bic.w	r3, r3, r4
 8008a1e:	461a      	mov	r2, r3
 8008a20:	460b      	mov	r3, r1
 8008a22:	e7e9      	b.n	80089f8 <round+0x60>
 8008a24:	000fffff 	.word	0x000fffff

08008a28 <__ieee754_exp>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	ec55 4b10 	vmov	r4, r5, d0
 8008a30:	49b5      	ldr	r1, [pc, #724]	; (8008d08 <__ieee754_exp+0x2e0>)
 8008a32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008a36:	428a      	cmp	r2, r1
 8008a38:	ed2d 8b04 	vpush	{d8-d9}
 8008a3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008a40:	d93b      	bls.n	8008aba <__ieee754_exp+0x92>
 8008a42:	49b2      	ldr	r1, [pc, #712]	; (8008d0c <__ieee754_exp+0x2e4>)
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d916      	bls.n	8008a76 <__ieee754_exp+0x4e>
 8008a48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a4c:	4323      	orrs	r3, r4
 8008a4e:	ee10 2a10 	vmov	r2, s0
 8008a52:	d007      	beq.n	8008a64 <__ieee754_exp+0x3c>
 8008a54:	462b      	mov	r3, r5
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f7 fc37 	bl	80002cc <__adddf3>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	e002      	b.n	8008a6a <__ieee754_exp+0x42>
 8008a64:	b10e      	cbz	r6, 8008a6a <__ieee754_exp+0x42>
 8008a66:	2400      	movs	r4, #0
 8008a68:	2500      	movs	r5, #0
 8008a6a:	ecbd 8b04 	vpop	{d8-d9}
 8008a6e:	ec45 4b10 	vmov	d0, r4, r5
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	a38e      	add	r3, pc, #568	; (adr r3, 8008cb0 <__ieee754_exp+0x288>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	ee10 0a10 	vmov	r0, s0
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f8 f869 	bl	8000b58 <__aeabi_dcmpgt>
 8008a86:	4607      	mov	r7, r0
 8008a88:	b130      	cbz	r0, 8008a98 <__ieee754_exp+0x70>
 8008a8a:	ecbd 8b04 	vpop	{d8-d9}
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	f000 b971 	b.w	8008d7a <__math_oflow>
 8008a98:	a387      	add	r3, pc, #540	; (adr r3, 8008cb8 <__ieee754_exp+0x290>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f8 f83b 	bl	8000b1c <__aeabi_dcmplt>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f000 808b 	beq.w	8008bc2 <__ieee754_exp+0x19a>
 8008aac:	ecbd 8b04 	vpop	{d8-d9}
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab6:	f000 b957 	b.w	8008d68 <__math_uflow>
 8008aba:	4b95      	ldr	r3, [pc, #596]	; (8008d10 <__ieee754_exp+0x2e8>)
 8008abc:	429a      	cmp	r2, r3
 8008abe:	f240 80ac 	bls.w	8008c1a <__ieee754_exp+0x1f2>
 8008ac2:	4b94      	ldr	r3, [pc, #592]	; (8008d14 <__ieee754_exp+0x2ec>)
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d87c      	bhi.n	8008bc2 <__ieee754_exp+0x19a>
 8008ac8:	4b93      	ldr	r3, [pc, #588]	; (8008d18 <__ieee754_exp+0x2f0>)
 8008aca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	ee10 0a10 	vmov	r0, s0
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fbf6 	bl	80002c8 <__aeabi_dsub>
 8008adc:	4b8f      	ldr	r3, [pc, #572]	; (8008d1c <__ieee754_exp+0x2f4>)
 8008ade:	00f7      	lsls	r7, r6, #3
 8008ae0:	443b      	add	r3, r7
 8008ae2:	ed93 7b00 	vldr	d7, [r3]
 8008ae6:	f1c6 0a01 	rsb	sl, r6, #1
 8008aea:	4680      	mov	r8, r0
 8008aec:	4689      	mov	r9, r1
 8008aee:	ebaa 0a06 	sub.w	sl, sl, r6
 8008af2:	eeb0 8a47 	vmov.f32	s16, s14
 8008af6:	eef0 8a67 	vmov.f32	s17, s15
 8008afa:	ec53 2b18 	vmov	r2, r3, d8
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fbe1 	bl	80002c8 <__aeabi_dsub>
 8008b06:	4604      	mov	r4, r0
 8008b08:	460d      	mov	r5, r1
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 fd91 	bl	8000638 <__aeabi_dmul>
 8008b16:	a36a      	add	r3, pc, #424	; (adr r3, 8008cc0 <__ieee754_exp+0x298>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	f7f7 fd8a 	bl	8000638 <__aeabi_dmul>
 8008b24:	a368      	add	r3, pc, #416	; (adr r3, 8008cc8 <__ieee754_exp+0x2a0>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 fbcd 	bl	80002c8 <__aeabi_dsub>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463b      	mov	r3, r7
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	a366      	add	r3, pc, #408	; (adr r3, 8008cd0 <__ieee754_exp+0x2a8>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fbc6 	bl	80002cc <__adddf3>
 8008b40:	4632      	mov	r2, r6
 8008b42:	463b      	mov	r3, r7
 8008b44:	f7f7 fd78 	bl	8000638 <__aeabi_dmul>
 8008b48:	a363      	add	r3, pc, #396	; (adr r3, 8008cd8 <__ieee754_exp+0x2b0>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 fbbb 	bl	80002c8 <__aeabi_dsub>
 8008b52:	4632      	mov	r2, r6
 8008b54:	463b      	mov	r3, r7
 8008b56:	f7f7 fd6f 	bl	8000638 <__aeabi_dmul>
 8008b5a:	a361      	add	r3, pc, #388	; (adr r3, 8008ce0 <__ieee754_exp+0x2b8>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fbb4 	bl	80002cc <__adddf3>
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	f7f7 fd66 	bl	8000638 <__aeabi_dmul>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fba8 	bl	80002c8 <__aeabi_dsub>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	460f      	mov	r7, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f7 fd58 	bl	8000638 <__aeabi_dmul>
 8008b88:	ec41 0b19 	vmov	d9, r0, r1
 8008b8c:	f1ba 0f00 	cmp.w	sl, #0
 8008b90:	d15d      	bne.n	8008c4e <__ieee754_exp+0x226>
 8008b92:	2200      	movs	r2, #0
 8008b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f7 fb94 	bl	80002c8 <__aeabi_dsub>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	ec51 0b19 	vmov	r0, r1, d9
 8008ba8:	f7f7 fe70 	bl	800088c <__aeabi_ddiv>
 8008bac:	4622      	mov	r2, r4
 8008bae:	462b      	mov	r3, r5
 8008bb0:	f7f7 fb8a 	bl	80002c8 <__aeabi_dsub>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4959      	ldr	r1, [pc, #356]	; (8008d20 <__ieee754_exp+0x2f8>)
 8008bbc:	f7f7 fb84 	bl	80002c8 <__aeabi_dsub>
 8008bc0:	e74d      	b.n	8008a5e <__ieee754_exp+0x36>
 8008bc2:	4b58      	ldr	r3, [pc, #352]	; (8008d24 <__ieee754_exp+0x2fc>)
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008bca:	4629      	mov	r1, r5
 8008bcc:	a346      	add	r3, pc, #280	; (adr r3, 8008ce8 <__ieee754_exp+0x2c0>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fd31 	bl	8000638 <__aeabi_dmul>
 8008bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bda:	f7f7 fb77 	bl	80002cc <__adddf3>
 8008bde:	f7f7 ffdb 	bl	8000b98 <__aeabi_d2iz>
 8008be2:	4682      	mov	sl, r0
 8008be4:	f7f7 fcbe 	bl	8000564 <__aeabi_i2d>
 8008be8:	a341      	add	r3, pc, #260	; (adr r3, 8008cf0 <__ieee754_exp+0x2c8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	f7f7 fd21 	bl	8000638 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7f7 fb63 	bl	80002c8 <__aeabi_dsub>
 8008c02:	a33d      	add	r3, pc, #244	; (adr r3, 8008cf8 <__ieee754_exp+0x2d0>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 fd12 	bl	8000638 <__aeabi_dmul>
 8008c14:	ec41 0b18 	vmov	d8, r0, r1
 8008c18:	e76f      	b.n	8008afa <__ieee754_exp+0xd2>
 8008c1a:	4b43      	ldr	r3, [pc, #268]	; (8008d28 <__ieee754_exp+0x300>)
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d811      	bhi.n	8008c44 <__ieee754_exp+0x21c>
 8008c20:	a337      	add	r3, pc, #220	; (adr r3, 8008d00 <__ieee754_exp+0x2d8>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	ee10 0a10 	vmov	r0, s0
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fb4e 	bl	80002cc <__adddf3>
 8008c30:	4b3b      	ldr	r3, [pc, #236]	; (8008d20 <__ieee754_exp+0x2f8>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 ff90 	bl	8000b58 <__aeabi_dcmpgt>
 8008c38:	b138      	cbz	r0, 8008c4a <__ieee754_exp+0x222>
 8008c3a:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <__ieee754_exp+0x2f8>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	e70a      	b.n	8008a5a <__ieee754_exp+0x32>
 8008c44:	f04f 0a00 	mov.w	sl, #0
 8008c48:	e75f      	b.n	8008b0a <__ieee754_exp+0xe2>
 8008c4a:	4682      	mov	sl, r0
 8008c4c:	e75d      	b.n	8008b0a <__ieee754_exp+0xe2>
 8008c4e:	4632      	mov	r2, r6
 8008c50:	463b      	mov	r3, r7
 8008c52:	2000      	movs	r0, #0
 8008c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008c58:	f7f7 fb36 	bl	80002c8 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	ec51 0b19 	vmov	r0, r1, d9
 8008c64:	f7f7 fe12 	bl	800088c <__aeabi_ddiv>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	ec51 0b18 	vmov	r0, r1, d8
 8008c70:	f7f7 fb2a 	bl	80002c8 <__aeabi_dsub>
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	f7f7 fb26 	bl	80002c8 <__aeabi_dsub>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	2000      	movs	r0, #0
 8008c82:	4927      	ldr	r1, [pc, #156]	; (8008d20 <__ieee754_exp+0x2f8>)
 8008c84:	f7f7 fb20 	bl	80002c8 <__aeabi_dsub>
 8008c88:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008c8c:	4592      	cmp	sl, r2
 8008c8e:	db02      	blt.n	8008c96 <__ieee754_exp+0x26e>
 8008c90:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008c94:	e6e3      	b.n	8008a5e <__ieee754_exp+0x36>
 8008c96:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008c9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008ca4:	f7f7 fcc8 	bl	8000638 <__aeabi_dmul>
 8008ca8:	e6d9      	b.n	8008a5e <__ieee754_exp+0x36>
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w
 8008cb0:	fefa39ef 	.word	0xfefa39ef
 8008cb4:	40862e42 	.word	0x40862e42
 8008cb8:	d52d3051 	.word	0xd52d3051
 8008cbc:	c0874910 	.word	0xc0874910
 8008cc0:	72bea4d0 	.word	0x72bea4d0
 8008cc4:	3e663769 	.word	0x3e663769
 8008cc8:	c5d26bf1 	.word	0xc5d26bf1
 8008ccc:	3ebbbd41 	.word	0x3ebbbd41
 8008cd0:	af25de2c 	.word	0xaf25de2c
 8008cd4:	3f11566a 	.word	0x3f11566a
 8008cd8:	16bebd93 	.word	0x16bebd93
 8008cdc:	3f66c16c 	.word	0x3f66c16c
 8008ce0:	5555553e 	.word	0x5555553e
 8008ce4:	3fc55555 	.word	0x3fc55555
 8008ce8:	652b82fe 	.word	0x652b82fe
 8008cec:	3ff71547 	.word	0x3ff71547
 8008cf0:	fee00000 	.word	0xfee00000
 8008cf4:	3fe62e42 	.word	0x3fe62e42
 8008cf8:	35793c76 	.word	0x35793c76
 8008cfc:	3dea39ef 	.word	0x3dea39ef
 8008d00:	8800759c 	.word	0x8800759c
 8008d04:	7e37e43c 	.word	0x7e37e43c
 8008d08:	40862e41 	.word	0x40862e41
 8008d0c:	7fefffff 	.word	0x7fefffff
 8008d10:	3fd62e42 	.word	0x3fd62e42
 8008d14:	3ff0a2b1 	.word	0x3ff0a2b1
 8008d18:	08009218 	.word	0x08009218
 8008d1c:	08009228 	.word	0x08009228
 8008d20:	3ff00000 	.word	0x3ff00000
 8008d24:	08009208 	.word	0x08009208
 8008d28:	3defffff 	.word	0x3defffff

08008d2c <with_errno>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	4604      	mov	r4, r0
 8008d30:	460d      	mov	r5, r1
 8008d32:	4616      	mov	r6, r2
 8008d34:	f7fd fea4 	bl	8006a80 <__errno>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	6006      	str	r6, [r0, #0]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <xflow>:
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d42:	4614      	mov	r4, r2
 8008d44:	461d      	mov	r5, r3
 8008d46:	b108      	cbz	r0, 8008d4c <xflow+0xc>
 8008d48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	e9cd 2300 	strd	r2, r3, [sp]
 8008d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	2222      	movs	r2, #34	; 0x22
 8008d5e:	b003      	add	sp, #12
 8008d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d64:	f7ff bfe2 	b.w	8008d2c <with_errno>

08008d68 <__math_uflow>:
 8008d68:	b508      	push	{r3, lr}
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d70:	f7ff ffe6 	bl	8008d40 <xflow>
 8008d74:	ec41 0b10 	vmov	d0, r0, r1
 8008d78:	bd08      	pop	{r3, pc}

08008d7a <__math_oflow>:
 8008d7a:	b508      	push	{r3, lr}
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008d82:	f7ff ffdd 	bl	8008d40 <xflow>
 8008d86:	ec41 0b10 	vmov	d0, r0, r1
 8008d8a:	bd08      	pop	{r3, pc}

08008d8c <_init>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr

08008d98 <_fini>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr
